(function(/*! Brunch !*/) {
  'use strict';

  var globals = typeof window !== 'undefined' ? window : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};

  var has = function(object, name) {
    return ({}).hasOwnProperty.call(object, name);
  };

  var expand = function(root, name) {
    var results = [], parts, part;
    if (/^\.\.?(\/|$)/.test(name)) {
      parts = [root, name].join('/').split('/');
    } else {
      parts = name.split('/');
    }
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var dir = dirname(path);
      var absolute = expand(dir, name);
      return globals.require(absolute);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    definition(module.exports, localRequire(name), module);
    var exports = cache[name] = module.exports;
    return exports;
  };

  var require = function(name) {
    var path = expand(name, '.');

    if (has(cache, path)) return cache[path];
    if (has(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has(cache, dirIndex)) return cache[dirIndex];
    if (has(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '"');
  };

  var define = function(bundle) {
    for (var key in bundle) {
      if (has(bundle, key)) {
        modules[key] = bundle[key];
      }
    }
  }

  globals.require = require;
  globals.require.define = define;
  globals.require.brunch = true;
})();

// Make it safe to do console.log() always.
(function (con) {
  var method;
  var dummy = function() {};
  var methods = ('assert,count,debug,dir,dirxml,error,exception,group,' +
     'groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,' + 
     'time,timeEnd,trace,warn').split(',');
  while (method = methods.pop()) {
    con[method] = con[method] || dummy;
  }
})(window.console = window.console || {});
;

/*!
 * jQuery JavaScript Library v1.8.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Thu Sep 20 2012 21:13:05 GMT-0400 (Eastern Daylight Time)
 */
(function( window, undefined ) {
var
  // A central reference to the root jQuery(document)
  rootjQuery,

  // The deferred used on DOM ready
  readyList,

  // Use the correct document accordingly with window argument (sandbox)
  document = window.document,
  location = window.location,
  navigator = window.navigator,

  // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,

  // Map over the $ in case of overwrite
  _$ = window.$,

  // Save a reference to some core methods
  core_push = Array.prototype.push,
  core_slice = Array.prototype.slice,
  core_indexOf = Array.prototype.indexOf,
  core_toString = Object.prototype.toString,
  core_hasOwn = Object.prototype.hasOwnProperty,
  core_trim = String.prototype.trim,

  // Define a local copy of jQuery
  jQuery = function( selector, context ) {
    // The jQuery object is actually just the init constructor 'enhanced'
    return new jQuery.fn.init( selector, context, rootjQuery );
  },

  // Used for matching numbers
  core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

  // Used for detecting and trimming whitespace
  core_rnotwhite = /\S/,
  core_rspace = /\s+/,

  // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

  // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

  // Match a standalone tag
  rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

  // JSON RegExp
  rvalidchars = /^[\],:{}\s]*$/,
  rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
  rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
  rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

  // Matches dashed string for camelizing
  rmsPrefix = /^-ms-/,
  rdashAlpha = /-([\da-z])/gi,

  // Used by jQuery.camelCase as callback to replace()
  fcamelCase = function( all, letter ) {
    return ( letter + "" ).toUpperCase();
  },

  // The ready event handler and self cleanup method
  DOMContentLoaded = function() {
    if ( document.addEventListener ) {
      document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
      jQuery.ready();
    } else if ( document.readyState === "complete" ) {
      // we're here because readyState === "complete" in oldIE
      // which is good enough for us to call the dom ready!
      document.detachEvent( "onreadystatechange", DOMContentLoaded );
      jQuery.ready();
    }
  },

  // [[Class]] -> type pairs
  class2type = {};

jQuery.fn = jQuery.prototype = {
  constructor: jQuery,
  init: function( selector, context, rootjQuery ) {
    var match, elem, ret, doc;

    // Handle $(""), $(null), $(undefined), $(false)
    if ( !selector ) {
      return this;
    }

    // Handle $(DOMElement)
    if ( selector.nodeType ) {
      this.context = this[0] = selector;
      this.length = 1;
      return this;
    }

    // Handle HTML strings
    if ( typeof selector === "string" ) {
      if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [ null, selector, null ];

      } else {
        match = rquickExpr.exec( selector );
      }

      // Match html or make sure no context is specified for #id
      if ( match && (match[1] || !context) ) {

        // HANDLE: $(html) -> $(array)
        if ( match[1] ) {
          context = context instanceof jQuery ? context[0] : context;
          doc = ( context && context.nodeType ? context.ownerDocument || context : document );

          // scripts is true for back-compat
          selector = jQuery.parseHTML( match[1], doc, true );
          if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
            this.attr.call( selector, context, true );
          }

          return jQuery.merge( this, selector );

        // HANDLE: $(#id)
        } else {
          elem = document.getElementById( match[2] );

          // Check parentNode to catch when Blackberry 4.6 returns
          // nodes that are no longer in the document #6963
          if ( elem && elem.parentNode ) {
            // Handle the case where IE and Opera return items
            // by name instead of ID
            if ( elem.id !== match[2] ) {
              return rootjQuery.find( selector );
            }

            // Otherwise, we inject the element directly into the jQuery object
            this.length = 1;
            this[0] = elem;
          }

          this.context = document;
          this.selector = selector;
          return this;
        }

      // HANDLE: $(expr, $(...))
      } else if ( !context || context.jquery ) {
        return ( context || rootjQuery ).find( selector );

      // HANDLE: $(expr, context)
      // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor( context ).find( selector );
      }

    // HANDLE: $(function)
    // Shortcut for document ready
    } else if ( jQuery.isFunction( selector ) ) {
      return rootjQuery.ready( selector );
    }

    if ( selector.selector !== undefined ) {
      this.selector = selector.selector;
      this.context = selector.context;
    }

    return jQuery.makeArray( selector, this );
  },

  // Start with an empty selector
  selector: "",

  // The current version of jQuery being used
  jquery: "1.8.2",

  // The default length of a jQuery object is 0
  length: 0,

  // The number of elements contained in the matched element set
  size: function() {
    return this.length;
  },

  toArray: function() {
    return core_slice.call( this );
  },

  // Get the Nth element in the matched element set OR
  // Get the whole matched element set as a clean array
  get: function( num ) {
    return num == null ?

      // Return a 'clean' array
      this.toArray() :

      // Return just the object
      ( num < 0 ? this[ this.length + num ] : this[ num ] );
  },

  // Take an array of elements and push it onto the stack
  // (returning the new matched element set)
  pushStack: function( elems, name, selector ) {

    // Build a new jQuery matched element set
    var ret = jQuery.merge( this.constructor(), elems );

    // Add the old object onto the stack (as a reference)
    ret.prevObject = this;

    ret.context = this.context;

    if ( name === "find" ) {
      ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
    } else if ( name ) {
      ret.selector = this.selector + "." + name + "(" + selector + ")";
    }

    // Return the newly-formed element set
    return ret;
  },

  // Execute a callback for every element in the matched set.
  // (You can seed the arguments with an array of args, but this is
  // only used internally.)
  each: function( callback, args ) {
    return jQuery.each( this, callback, args );
  },

  ready: function( fn ) {
    // Add the callback
    jQuery.ready.promise().done( fn );

    return this;
  },

  eq: function( i ) {
    i = +i;
    return i === -1 ?
      this.slice( i ) :
      this.slice( i, i + 1 );
  },

  first: function() {
    return this.eq( 0 );
  },

  last: function() {
    return this.eq( -1 );
  },

  slice: function() {
    return this.pushStack( core_slice.apply( this, arguments ),
      "slice", core_slice.call(arguments).join(",") );
  },

  map: function( callback ) {
    return this.pushStack( jQuery.map(this, function( elem, i ) {
      return callback.call( elem, i, elem );
    }));
  },

  end: function() {
    return this.prevObject || this.constructor(null);
  },

  // For internal use only.
  // Behaves like an Array's method, not like a jQuery method.
  push: core_push,
  sort: [].sort,
  splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
  var options, name, src, copy, copyIsArray, clone,
    target = arguments[0] || {},
    i = 1,
    length = arguments.length,
    deep = false;

  // Handle a deep copy situation
  if ( typeof target === "boolean" ) {
    deep = target;
    target = arguments[1] || {};
    // skip the boolean and the target
    i = 2;
  }

  // Handle case when target is a string or something (possible in deep copy)
  if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
    target = {};
  }

  // extend jQuery itself if only one argument is passed
  if ( length === i ) {
    target = this;
    --i;
  }

  for ( ; i < length; i++ ) {
    // Only deal with non-null/undefined values
    if ( (options = arguments[ i ]) != null ) {
      // Extend the base object
      for ( name in options ) {
        src = target[ name ];
        copy = options[ name ];

        // Prevent never-ending loop
        if ( target === copy ) {
          continue;
        }

        // Recurse if we're merging plain objects or arrays
        if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
          if ( copyIsArray ) {
            copyIsArray = false;
            clone = src && jQuery.isArray(src) ? src : [];

          } else {
            clone = src && jQuery.isPlainObject(src) ? src : {};
          }

          // Never move original objects, clone them
          target[ name ] = jQuery.extend( deep, clone, copy );

        // Don't bring in undefined values
        } else if ( copy !== undefined ) {
          target[ name ] = copy;
        }
      }
    }
  }

  // Return the modified object
  return target;
};

jQuery.extend({
  noConflict: function( deep ) {
    if ( window.$ === jQuery ) {
      window.$ = _$;
    }

    if ( deep && window.jQuery === jQuery ) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  },

  // Is the DOM ready to be used? Set to true once it occurs.
  isReady: false,

  // A counter to track how many items to wait for before
  // the ready event fires. See #6781
  readyWait: 1,

  // Hold (or release) the ready event
  holdReady: function( hold ) {
    if ( hold ) {
      jQuery.readyWait++;
    } else {
      jQuery.ready( true );
    }
  },

  // Handle when the DOM is ready
  ready: function( wait ) {

    // Abort if there are pending holds or we're already ready
    if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
      return;
    }

    // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
    if ( !document.body ) {
      return setTimeout( jQuery.ready, 1 );
    }

    // Remember that the DOM is ready
    jQuery.isReady = true;

    // If a normal DOM Ready event fired, decrement, and wait if need be
    if ( wait !== true && --jQuery.readyWait > 0 ) {
      return;
    }

    // If there are functions bound, to execute
    readyList.resolveWith( document, [ jQuery ] );

    // Trigger any bound ready events
    if ( jQuery.fn.trigger ) {
      jQuery( document ).trigger("ready").off("ready");
    }
  },

  // See test/unit/core.js for details concerning isFunction.
  // Since version 1.3, DOM methods and functions like alert
  // aren't supported. They return false on IE (#2968).
  isFunction: function( obj ) {
    return jQuery.type(obj) === "function";
  },

  isArray: Array.isArray || function( obj ) {
    return jQuery.type(obj) === "array";
  },

  isWindow: function( obj ) {
    return obj != null && obj == obj.window;
  },

  isNumeric: function( obj ) {
    return !isNaN( parseFloat(obj) ) && isFinite( obj );
  },

  type: function( obj ) {
    return obj == null ?
      String( obj ) :
      class2type[ core_toString.call(obj) ] || "object";
  },

  isPlainObject: function( obj ) {
    // Must be an Object.
    // Because of IE, we also have to check the presence of the constructor property.
    // Make sure that DOM nodes and window objects don't pass through, as well
    if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
      return false;
    }

    try {
      // Not own constructor property must be Object
      if ( obj.constructor &&
        !core_hasOwn.call(obj, "constructor") &&
        !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
        return false;
      }
    } catch ( e ) {
      // IE8,9 Will throw exceptions on certain host objects #9897
      return false;
    }

    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.

    var key;
    for ( key in obj ) {}

    return key === undefined || core_hasOwn.call( obj, key );
  },

  isEmptyObject: function( obj ) {
    var name;
    for ( name in obj ) {
      return false;
    }
    return true;
  },

  error: function( msg ) {
    throw new Error( msg );
  },

  // data: string of html
  // context (optional): If specified, the fragment will be created in this context, defaults to document
  // scripts (optional): If true, will include scripts passed in the html string
  parseHTML: function( data, context, scripts ) {
    var parsed;
    if ( !data || typeof data !== "string" ) {
      return null;
    }
    if ( typeof context === "boolean" ) {
      scripts = context;
      context = 0;
    }
    context = context || document;

    // Single tag
    if ( (parsed = rsingleTag.exec( data )) ) {
      return [ context.createElement( parsed[1] ) ];
    }

    parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
    return jQuery.merge( [],
      (parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
  },

  parseJSON: function( data ) {
    if ( !data || typeof data !== "string") {
      return null;
    }

    // Make sure leading/trailing whitespace is removed (IE can't handle it)
    data = jQuery.trim( data );

    // Attempt to parse using the native JSON parser first
    if ( window.JSON && window.JSON.parse ) {
      return window.JSON.parse( data );
    }

    // Make sure the incoming data is actual JSON
    // Logic borrowed from http://json.org/json2.js
    if ( rvalidchars.test( data.replace( rvalidescape, "@" )
      .replace( rvalidtokens, "]" )
      .replace( rvalidbraces, "")) ) {

      return ( new Function( "return " + data ) )();

    }
    jQuery.error( "Invalid JSON: " + data );
  },

  // Cross-browser xml parsing
  parseXML: function( data ) {
    var xml, tmp;
    if ( !data || typeof data !== "string" ) {
      return null;
    }
    try {
      if ( window.DOMParser ) { // Standard
        tmp = new DOMParser();
        xml = tmp.parseFromString( data , "text/xml" );
      } else { // IE
        xml = new ActiveXObject( "Microsoft.XMLDOM" );
        xml.async = "false";
        xml.loadXML( data );
      }
    } catch( e ) {
      xml = undefined;
    }
    if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
      jQuery.error( "Invalid XML: " + data );
    }
    return xml;
  },

  noop: function() {},

  // Evaluates a script in a global context
  // Workarounds based on findings by Jim Driscoll
  // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
  globalEval: function( data ) {
    if ( data && core_rnotwhite.test( data ) ) {
      // We use execScript on Internet Explorer
      // We use an anonymous function so that context is window
      // rather than jQuery in Firefox
      ( window.execScript || function( data ) {
        window[ "eval" ].call( window, data );
      } )( data );
    }
  },

  // Convert dashed to camelCase; used by the css and data modules
  // Microsoft forgot to hump their vendor prefix (#9572)
  camelCase: function( string ) {
    return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
  },

  nodeName: function( elem, name ) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  },

  // args is for internal usage only
  each: function( obj, callback, args ) {
    var name,
      i = 0,
      length = obj.length,
      isObj = length === undefined || jQuery.isFunction( obj );

    if ( args ) {
      if ( isObj ) {
        for ( name in obj ) {
          if ( callback.apply( obj[ name ], args ) === false ) {
            break;
          }
        }
      } else {
        for ( ; i < length; ) {
          if ( callback.apply( obj[ i++ ], args ) === false ) {
            break;
          }
        }
      }

    // A special, fast, case for the most common use of each
    } else {
      if ( isObj ) {
        for ( name in obj ) {
          if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
            break;
          }
        }
      } else {
        for ( ; i < length; ) {
          if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
            break;
          }
        }
      }
    }

    return obj;
  },

  // Use native String.trim function wherever possible
  trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
    function( text ) {
      return text == null ?
        "" :
        core_trim.call( text );
    } :

    // Otherwise use our own trimming functionality
    function( text ) {
      return text == null ?
        "" :
        ( text + "" ).replace( rtrim, "" );
    },

  // results is for internal usage only
  makeArray: function( arr, results ) {
    var type,
      ret = results || [];

    if ( arr != null ) {
      // The window, strings (and functions) also have 'length'
      // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
      type = jQuery.type( arr );

      if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
        core_push.call( ret, arr );
      } else {
        jQuery.merge( ret, arr );
      }
    }

    return ret;
  },

  inArray: function( elem, arr, i ) {
    var len;

    if ( arr ) {
      if ( core_indexOf ) {
        return core_indexOf.call( arr, elem, i );
      }

      len = arr.length;
      i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

      for ( ; i < len; i++ ) {
        // Skip accessing in sparse arrays
        if ( i in arr && arr[ i ] === elem ) {
          return i;
        }
      }
    }

    return -1;
  },

  merge: function( first, second ) {
    var l = second.length,
      i = first.length,
      j = 0;

    if ( typeof l === "number" ) {
      for ( ; j < l; j++ ) {
        first[ i++ ] = second[ j ];
      }

    } else {
      while ( second[j] !== undefined ) {
        first[ i++ ] = second[ j++ ];
      }
    }

    first.length = i;

    return first;
  },

  grep: function( elems, callback, inv ) {
    var retVal,
      ret = [],
      i = 0,
      length = elems.length;
    inv = !!inv;

    // Go through the array, only saving the items
    // that pass the validator function
    for ( ; i < length; i++ ) {
      retVal = !!callback( elems[ i ], i );
      if ( inv !== retVal ) {
        ret.push( elems[ i ] );
      }
    }

    return ret;
  },

  // arg is for internal usage only
  map: function( elems, callback, arg ) {
    var value, key,
      ret = [],
      i = 0,
      length = elems.length,
      // jquery objects are treated as arrays
      isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

    // Go through the array, translating each of the items to their
    if ( isArray ) {
      for ( ; i < length; i++ ) {
        value = callback( elems[ i ], i, arg );

        if ( value != null ) {
          ret[ ret.length ] = value;
        }
      }

    // Go through every key on the object,
    } else {
      for ( key in elems ) {
        value = callback( elems[ key ], key, arg );

        if ( value != null ) {
          ret[ ret.length ] = value;
        }
      }
    }

    // Flatten any nested arrays
    return ret.concat.apply( [], ret );
  },

  // A global GUID counter for objects
  guid: 1,

  // Bind a function to a context, optionally partially applying any
  // arguments.
  proxy: function( fn, context ) {
    var tmp, args, proxy;

    if ( typeof context === "string" ) {
      tmp = fn[ context ];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if ( !jQuery.isFunction( fn ) ) {
      return undefined;
    }

    // Simulated bind
    args = core_slice.call( arguments, 2 );
    proxy = function() {
      return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    return proxy;
  },

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
    var exec,
      bulk = key == null,
      i = 0,
      length = elems.length;

    // Sets many values
    if ( key && typeof key === "object" ) {
      for ( i in key ) {
        jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
      }
      chainable = 1;

    // Sets one value
    } else if ( value !== undefined ) {
      // Optionally, function values get executed if exec is true
      exec = pass === undefined && jQuery.isFunction( value );

      if ( bulk ) {
        // Bulk operations only iterate when executing function values
        if ( exec ) {
          exec = fn;
          fn = function( elem, key, value ) {
            return exec.call( jQuery( elem ), value );
          };

        // Otherwise they run against the entire set
        } else {
          fn.call( elems, value );
          fn = null;
        }
      }

      if ( fn ) {
        for (; i < length; i++ ) {
          fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
        }
      }

      chainable = 1;
    }

    return chainable ?
      elems :

      // Gets
      bulk ?
        fn.call( elems ) :
        length ? fn( elems[0], key ) : emptyGet;
  },

  now: function() {
    return ( new Date() ).getTime();
  }
});

jQuery.ready.promise = function( obj ) {
  if ( !readyList ) {

    readyList = jQuery.Deferred();

    // Catch cases where $(document).ready() is called after the browser event has already occurred.
    // we once tried to use readyState "interactive" here, but it caused issues like the one
    // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
    if ( document.readyState === "complete" ) {
      // Handle it asynchronously to allow scripts the opportunity to delay ready
      setTimeout( jQuery.ready, 1 );

    // Standards-based browsers support DOMContentLoaded
    } else if ( document.addEventListener ) {
      // Use the handy event callback
      document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

      // A fallback to window.onload, that will always work
      window.addEventListener( "load", jQuery.ready, false );

    // If IE event model is used
    } else {
      // Ensure firing before onload, maybe late but safe also for iframes
      document.attachEvent( "onreadystatechange", DOMContentLoaded );

      // A fallback to window.onload, that will always work
      window.attachEvent( "onload", jQuery.ready );

      // If IE and not a frame
      // continually check to see if the document is ready
      var top = false;

      try {
        top = window.frameElement == null && document.documentElement;
      } catch(e) {}

      if ( top && top.doScroll ) {
        (function doScrollCheck() {
          if ( !jQuery.isReady ) {

            try {
              // Use the trick by Diego Perini
              // http://javascript.nwbox.com/IEContentLoaded/
              top.doScroll("left");
            } catch(e) {
              return setTimeout( doScrollCheck, 50 );
            }

            // and execute any waiting functions
            jQuery.ready();
          }
        })();
      }
    }
  }
  return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
  class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
  var object = optionsCache[ options ] = {};
  jQuery.each( options.split( core_rspace ), function( _, flag ) {
    object[ flag ] = true;
  });
  return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *  options: an optional list of space-separated options that will change how
 *      the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *  once:     will ensure the callback list can only be fired once (like a Deferred)
 *
 *  memory:     will keep track of previous values and will call any callback added
 *          after the list has been fired right away with the latest "memorized"
 *          values (like a Deferred)
 *
 *  unique:     will ensure a callback can only be added once (no duplicate in the list)
 *
 *  stopOnFalse:  interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

  // Convert options from String-formatted to Object-formatted if needed
  // (we check in cache first)
  options = typeof options === "string" ?
    ( optionsCache[ options ] || createOptions( options ) ) :
    jQuery.extend( {}, options );

  var // Last fire value (for non-forgettable lists)
    memory,
    // Flag to know if list was already fired
    fired,
    // Flag to know if list is currently firing
    firing,
    // First callback to fire (used internally by add and fireWith)
    firingStart,
    // End of the loop when firing
    firingLength,
    // Index of currently firing callback (modified by remove if needed)
    firingIndex,
    // Actual callback list
    list = [],
    // Stack of fire calls for repeatable lists
    stack = !options.once && [],
    // Fire callbacks
    fire = function( data ) {
      memory = options.memory && data;
      fired = true;
      firingIndex = firingStart || 0;
      firingStart = 0;
      firingLength = list.length;
      firing = true;
      for ( ; list && firingIndex < firingLength; firingIndex++ ) {
        if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
          memory = false; // To prevent further calls using add
          break;
        }
      }
      firing = false;
      if ( list ) {
        if ( stack ) {
          if ( stack.length ) {
            fire( stack.shift() );
          }
        } else if ( memory ) {
          list = [];
        } else {
          self.disable();
        }
      }
    },
    // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function() {
        if ( list ) {
          // First, we save the current length
          var start = list.length;
          (function add( args ) {
            jQuery.each( args, function( _, arg ) {
              var type = jQuery.type( arg );
              if ( type === "function" && ( !options.unique || !self.has( arg ) ) ) {
                list.push( arg );
              } else if ( arg && arg.length && type !== "string" ) {
                // Inspect recursively
                add( arg );
              }
            });
          })( arguments );
          // Do we need to add the callbacks to the
          // current firing batch?
          if ( firing ) {
            firingLength = list.length;
          // With memory, if we're not firing then
          // we should call right away
          } else if ( memory ) {
            firingStart = start;
            fire( memory );
          }
        }
        return this;
      },
      // Remove a callback from the list
      remove: function() {
        if ( list ) {
          jQuery.each( arguments, function( _, arg ) {
            var index;
            while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
              list.splice( index, 1 );
              // Handle firing indexes
              if ( firing ) {
                if ( index <= firingLength ) {
                  firingLength--;
                }
                if ( index <= firingIndex ) {
                  firingIndex--;
                }
              }
            }
          });
        }
        return this;
      },
      // Control if a given callback is in the list
      has: function( fn ) {
        return jQuery.inArray( fn, list ) > -1;
      },
      // Remove all callbacks from the list
      empty: function() {
        list = [];
        return this;
      },
      // Have the list do nothing anymore
      disable: function() {
        list = stack = memory = undefined;
        return this;
      },
      // Is it disabled?
      disabled: function() {
        return !list;
      },
      // Lock the list in its current state
      lock: function() {
        stack = undefined;
        if ( !memory ) {
          self.disable();
        }
        return this;
      },
      // Is it locked?
      locked: function() {
        return !stack;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function( context, args ) {
        args = args || [];
        args = [ context, args.slice ? args.slice() : args ];
        if ( list && ( !fired || stack ) ) {
          if ( firing ) {
            stack.push( args );
          } else {
            fire( args );
          }
        }
        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function() {
        self.fireWith( this, arguments );
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function() {
        return !!fired;
      }
    };

  return self;
};
jQuery.extend({

  Deferred: function( func ) {
    var tuples = [
        // action, add listener, listener list, final state
        [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
        [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
        [ "notify", "progress", jQuery.Callbacks("memory") ]
      ],
      state = "pending",
      promise = {
        state: function() {
          return state;
        },
        always: function() {
          deferred.done( arguments ).fail( arguments );
          return this;
        },
        then: function( /* fnDone, fnFail, fnProgress */ ) {
          var fns = arguments;
          return jQuery.Deferred(function( newDefer ) {
            jQuery.each( tuples, function( i, tuple ) {
              var action = tuple[ 0 ],
                fn = fns[ i ];
              // deferred[ done | fail | progress ] for forwarding actions to newDefer
              deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
                function() {
                  var returned = fn.apply( this, arguments );
                  if ( returned && jQuery.isFunction( returned.promise ) ) {
                    returned.promise()
                      .done( newDefer.resolve )
                      .fail( newDefer.reject )
                      .progress( newDefer.notify );
                  } else {
                    newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                  }
                } :
                newDefer[ action ]
              );
            });
            fns = null;
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function( obj ) {
          return obj != null ? jQuery.extend( obj, promise ) : promise;
        }
      },
      deferred = {};

    // Keep pipe for back-compat
    promise.pipe = promise.then;

    // Add list-specific methods
    jQuery.each( tuples, function( i, tuple ) {
      var list = tuple[ 2 ],
        stateString = tuple[ 3 ];

      // promise[ done | fail | progress ] = list.add
      promise[ tuple[1] ] = list.add;

      // Handle state
      if ( stateString ) {
        list.add(function() {
          // state = [ resolved | rejected ]
          state = stateString;

        // [ reject_list | resolve_list ].disable; progress_list.lock
        }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
      }

      // deferred[ resolve | reject | notify ] = list.fire
      deferred[ tuple[0] ] = list.fire;
      deferred[ tuple[0] + "With" ] = list.fireWith;
    });

    // Make the deferred a promise
    promise.promise( deferred );

    // Call given func if any
    if ( func ) {
      func.call( deferred, deferred );
    }

    // All done!
    return deferred;
  },

  // Deferred helper
  when: function( subordinate /* , ..., subordinateN */ ) {
    var i = 0,
      resolveValues = core_slice.call( arguments ),
      length = resolveValues.length,

      // the count of uncompleted subordinates
      remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

      // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

      // Update function for both resolve and progress values
      updateFunc = function( i, contexts, values ) {
        return function( value ) {
          contexts[ i ] = this;
          values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
          if( values === progressValues ) {
            deferred.notifyWith( contexts, values );
          } else if ( !( --remaining ) ) {
            deferred.resolveWith( contexts, values );
          }
        };
      },

      progressValues, progressContexts, resolveContexts;

    // add listeners to Deferred subordinates; treat others as resolved
    if ( length > 1 ) {
      progressValues = new Array( length );
      progressContexts = new Array( length );
      resolveContexts = new Array( length );
      for ( ; i < length; i++ ) {
        if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
          resolveValues[ i ].promise()
            .done( updateFunc( i, resolveContexts, resolveValues ) )
            .fail( deferred.reject )
            .progress( updateFunc( i, progressContexts, progressValues ) );
        } else {
          --remaining;
        }
      }
    }

    // if we're not waiting on anything, resolve the master
    if ( !remaining ) {
      deferred.resolveWith( resolveContexts, resolveValues );
    }

    return deferred.promise();
  }
});
jQuery.support = (function() {

  var support,
    all,
    a,
    select,
    opt,
    input,
    fragment,
    eventName,
    i,
    isSupported,
    clickFn,
    div = document.createElement("div");

  // Preliminary tests
  div.setAttribute( "className", "t" );
  div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

  all = div.getElementsByTagName("*");
  a = div.getElementsByTagName("a")[ 0 ];
  a.style.cssText = "top:1px;float:left;opacity:.5";

  // Can't get basic test support
  if ( !all || !all.length ) {
    return {};
  }

  // First batch of supports tests
  select = document.createElement("select");
  opt = select.appendChild( document.createElement("option") );
  input = div.getElementsByTagName("input")[ 0 ];

  support = {
    // IE strips leading whitespace when .innerHTML is used
    leadingWhitespace: ( div.firstChild.nodeType === 3 ),

    // Make sure that tbody elements aren't automatically inserted
    // IE will insert them into empty tables
    tbody: !div.getElementsByTagName("tbody").length,

    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    htmlSerialize: !!div.getElementsByTagName("link").length,

    // Get the style information from getAttribute
    // (IE uses .cssText instead)
    style: /top/.test( a.getAttribute("style") ),

    // Make sure that URLs aren't manipulated
    // (IE normalizes it by default)
    hrefNormalized: ( a.getAttribute("href") === "/a" ),

    // Make sure that element opacity exists
    // (IE uses filter instead)
    // Use a regex to work around a WebKit issue. See #5145
    opacity: /^0.5/.test( a.style.opacity ),

    // Verify style float existence
    // (IE uses styleFloat instead of cssFloat)
    cssFloat: !!a.style.cssFloat,

    // Make sure that if no value is specified for a checkbox
    // that it defaults to "on".
    // (WebKit defaults to "" instead)
    checkOn: ( input.value === "on" ),

    // Make sure that a selected-by-default option has a working selected property.
    // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
    optSelected: opt.selected,

    // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
    getSetAttribute: div.className !== "t",

    // Tests for enctype support on a form(#6743)
    enctype: !!document.createElement("form").enctype,

    // Makes sure cloning an html5 element does not cause problems
    // Where outerHTML is undefined, this still works
    html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

    // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
    boxModel: ( document.compatMode === "CSS1Compat" ),

    // Will be defined later
    submitBubbles: true,
    changeBubbles: true,
    focusinBubbles: false,
    deleteExpando: true,
    noCloneEvent: true,
    inlineBlockNeedsLayout: false,
    shrinkWrapBlocks: false,
    reliableMarginRight: true,
    boxSizingReliable: true,
    pixelPosition: false
  };

  // Make sure checked status is properly cloned
  input.checked = true;
  support.noCloneChecked = input.cloneNode( true ).checked;

  // Make sure that the options inside disabled selects aren't marked as disabled
  // (WebKit marks them as disabled)
  select.disabled = true;
  support.optDisabled = !opt.disabled;

  // Test to see if it's possible to delete an expando from an element
  // Fails in Internet Explorer
  try {
    delete div.test;
  } catch( e ) {
    support.deleteExpando = false;
  }

  if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
    div.attachEvent( "onclick", clickFn = function() {
      // Cloning a node shouldn't copy over any
      // bound event handlers (IE does this)
      support.noCloneEvent = false;
    });
    div.cloneNode( true ).fireEvent("onclick");
    div.detachEvent( "onclick", clickFn );
  }

  // Check if a radio maintains its value
  // after being appended to the DOM
  input = document.createElement("input");
  input.value = "t";
  input.setAttribute( "type", "radio" );
  support.radioValue = input.value === "t";

  input.setAttribute( "checked", "checked" );

  // #11217 - WebKit loses check when the name is after the checked attribute
  input.setAttribute( "name", "t" );

  div.appendChild( input );
  fragment = document.createDocumentFragment();
  fragment.appendChild( div.lastChild );

  // WebKit doesn't clone checked state correctly in fragments
  support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

  // Check if a disconnected checkbox will retain its checked
  // value of true after appended to the DOM (IE6/7)
  support.appendChecked = input.checked;

  fragment.removeChild( input );
  fragment.appendChild( div );

  // Technique from Juriy Zaytsev
  // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
  // We only care about the case where non-standard event systems
  // are used, namely in IE. Short-circuiting here helps us to
  // avoid an eval call (in setAttribute) which can cause CSP
  // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
  if ( div.attachEvent ) {
    for ( i in {
      submit: true,
      change: true,
      focusin: true
    }) {
      eventName = "on" + i;
      isSupported = ( eventName in div );
      if ( !isSupported ) {
        div.setAttribute( eventName, "return;" );
        isSupported = ( typeof div[ eventName ] === "function" );
      }
      support[ i + "Bubbles" ] = isSupported;
    }
  }

  // Run tests that need a body at doc ready
  jQuery(function() {
    var container, div, tds, marginDiv,
      divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
      body = document.getElementsByTagName("body")[0];

    if ( !body ) {
      // Return for frameset docs that don't have a body
      return;
    }

    container = document.createElement("div");
    container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
    body.insertBefore( container, body.firstChild );

    // Construct the test element
    div = document.createElement("div");
    container.appendChild( div );

    // Check if table cells still have offsetWidth/Height when they are set
    // to display:none and there are still other visible table cells in a
    // table row; if so, offsetWidth/Height are not reliable for use when
    // determining if an element has been hidden directly using
    // display:none (it is still safe to use offsets if a parent element is
    // hidden; don safety goggles and see bug #4512 for more information).
    // (only IE 8 fails this test)
    div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
    tds = div.getElementsByTagName("td");
    tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
    isSupported = ( tds[ 0 ].offsetHeight === 0 );

    tds[ 0 ].style.display = "";
    tds[ 1 ].style.display = "none";

    // Check if empty table cells still have offsetWidth/Height
    // (IE <= 8 fail this test)
    support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

    // Check box-sizing and margin behavior
    div.innerHTML = "";
    div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
    support.boxSizing = ( div.offsetWidth === 4 );
    support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

    // NOTE: To any future maintainer, we've window.getComputedStyle
    // because jsdom on node.js will break without it.
    if ( window.getComputedStyle ) {
      support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
      support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

      // Check if div with explicit width and no margin-right incorrectly
      // gets computed margin-right based on width of container. For more
      // info see bug #3333
      // Fails in WebKit before Feb 2011 nightlies
      // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
      marginDiv = document.createElement("div");
      marginDiv.style.cssText = div.style.cssText = divReset;
      marginDiv.style.marginRight = marginDiv.style.width = "0";
      div.style.width = "1px";
      div.appendChild( marginDiv );
      support.reliableMarginRight =
        !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
    }

    if ( typeof div.style.zoom !== "undefined" ) {
      // Check if natively block-level elements act like inline-block
      // elements when setting their display to 'inline' and giving
      // them layout
      // (IE < 8 does this)
      div.innerHTML = "";
      div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
      support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

      // Check if elements with layout shrink-wrap their children
      // (IE 6 does this)
      div.style.display = "block";
      div.style.overflow = "visible";
      div.innerHTML = "<div></div>";
      div.firstChild.style.width = "5px";
      support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

      container.style.zoom = 1;
    }

    // Null elements to avoid leaks in IE
    body.removeChild( container );
    container = div = tds = marginDiv = null;
  });

  // Null elements to avoid leaks in IE
  fragment.removeChild( div );
  all = a = select = opt = input = fragment = div = null;

  return support;
})();
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
  rmultiDash = /([A-Z])/g;

jQuery.extend({
  cache: {},

  deletedIds: [],

  // Remove at next major release (1.9/2.0)
  uuid: 0,

  // Unique for each copy of jQuery on the page
  // Non-digits removed to match rinlinejQuery
  expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

  // The following elements throw uncatchable exceptions if you
  // attempt to add expando properties to them.
  noData: {
    "embed": true,
    // Ban all objects except for Flash (which handle expandos)
    "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
    "applet": true
  },

  hasData: function( elem ) {
    elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
    return !!elem && !isEmptyDataObject( elem );
  },

  data: function( elem, name, data, pvt /* Internal Use Only */ ) {
    if ( !jQuery.acceptData( elem ) ) {
      return;
    }

    var thisCache, ret,
      internalKey = jQuery.expando,
      getByName = typeof name === "string",

      // We have to handle DOM nodes and JS objects differently because IE6-7
      // can't GC object references properly across the DOM-JS boundary
      isNode = elem.nodeType,

      // Only DOM nodes need the global jQuery cache; JS object data is
      // attached directly to the object so GC can occur automatically
      cache = isNode ? jQuery.cache : elem,

      // Only defining an ID for JS objects if its cache already exists allows
      // the code to shortcut on the same path as a DOM node with no cache
      id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

    // Avoid doing any more work than we need to when trying to get data on an
    // object that has no data at all
    if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
      return;
    }

    if ( !id ) {
      // Only DOM nodes need a new unique ID for each element since their data
      // ends up in the global cache
      if ( isNode ) {
        elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
      } else {
        id = internalKey;
      }
    }

    if ( !cache[ id ] ) {
      cache[ id ] = {};

      // Avoids exposing jQuery metadata on plain JS objects when the object
      // is serialized using JSON.stringify
      if ( !isNode ) {
        cache[ id ].toJSON = jQuery.noop;
      }
    }

    // An object can be passed to jQuery.data instead of a key/value pair; this gets
    // shallow copied over onto the existing cache
    if ( typeof name === "object" || typeof name === "function" ) {
      if ( pvt ) {
        cache[ id ] = jQuery.extend( cache[ id ], name );
      } else {
        cache[ id ].data = jQuery.extend( cache[ id ].data, name );
      }
    }

    thisCache = cache[ id ];

    // jQuery data() is stored in a separate object inside the object's internal data
    // cache in order to avoid key collisions between internal data and user-defined
    // data.
    if ( !pvt ) {
      if ( !thisCache.data ) {
        thisCache.data = {};
      }

      thisCache = thisCache.data;
    }

    if ( data !== undefined ) {
      thisCache[ jQuery.camelCase( name ) ] = data;
    }

    // Check for both converted-to-camel and non-converted data property names
    // If a data property was specified
    if ( getByName ) {

      // First Try to find as-is property data
      ret = thisCache[ name ];

      // Test for null|undefined property data
      if ( ret == null ) {

        // Try to find the camelCased property
        ret = thisCache[ jQuery.camelCase( name ) ];
      }
    } else {
      ret = thisCache;
    }

    return ret;
  },

  removeData: function( elem, name, pvt /* Internal Use Only */ ) {
    if ( !jQuery.acceptData( elem ) ) {
      return;
    }

    var thisCache, i, l,

      isNode = elem.nodeType,

      // See jQuery.data for more information
      cache = isNode ? jQuery.cache : elem,
      id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

    // If there is already no cache entry for this object, there is no
    // purpose in continuing
    if ( !cache[ id ] ) {
      return;
    }

    if ( name ) {

      thisCache = pvt ? cache[ id ] : cache[ id ].data;

      if ( thisCache ) {

        // Support array or space separated string names for data keys
        if ( !jQuery.isArray( name ) ) {

          // try the string as a key before any manipulation
          if ( name in thisCache ) {
            name = [ name ];
          } else {

            // split the camel cased version by spaces unless a key with the spaces exists
            name = jQuery.camelCase( name );
            if ( name in thisCache ) {
              name = [ name ];
            } else {
              name = name.split(" ");
            }
          }
        }

        for ( i = 0, l = name.length; i < l; i++ ) {
          delete thisCache[ name[i] ];
        }

        // If there is no data left in the cache, we want to continue
        // and let the cache object itself get destroyed
        if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
          return;
        }
      }
    }

    // See jQuery.data for more information
    if ( !pvt ) {
      delete cache[ id ].data;

      // Don't destroy the parent cache unless the internal data object
      // had been the only thing left in it
      if ( !isEmptyDataObject( cache[ id ] ) ) {
        return;
      }
    }

    // Destroy the cache
    if ( isNode ) {
      jQuery.cleanData( [ elem ], true );

    // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
    } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
      delete cache[ id ];

    // When all else fails, null
    } else {
      cache[ id ] = null;
    }
  },

  // For internal use only.
  _data: function( elem, name, data ) {
    return jQuery.data( elem, name, data, true );
  },

  // A method for determining if a DOM node can handle the data expando
  acceptData: function( elem ) {
    var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

    // nodes accept data unless otherwise specified; rejection can be conditional
    return !noData || noData !== true && elem.getAttribute("classid") === noData;
  }
});

jQuery.fn.extend({
  data: function( key, value ) {
    var parts, part, attr, name, l,
      elem = this[0],
      i = 0,
      data = null;

    // Gets all values
    if ( key === undefined ) {
      if ( this.length ) {
        data = jQuery.data( elem );

        if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
          attr = elem.attributes;
          for ( l = attr.length; i < l; i++ ) {
            name = attr[i].name;

            if ( !name.indexOf( "data-" ) ) {
              name = jQuery.camelCase( name.substring(5) );

              dataAttr( elem, name, data[ name ] );
            }
          }
          jQuery._data( elem, "parsedAttrs", true );
        }
      }

      return data;
    }

    // Sets multiple values
    if ( typeof key === "object" ) {
      return this.each(function() {
        jQuery.data( this, key );
      });
    }

    parts = key.split( ".", 2 );
    parts[1] = parts[1] ? "." + parts[1] : "";
    part = parts[1] + "!";

    return jQuery.access( this, function( value ) {

      if ( value === undefined ) {
        data = this.triggerHandler( "getData" + part, [ parts[0] ] );

        // Try to fetch any internally stored data first
        if ( data === undefined && elem ) {
          data = jQuery.data( elem, key );
          data = dataAttr( elem, key, data );
        }

        return data === undefined && parts[1] ?
          this.data( parts[0] ) :
          data;
      }

      parts[1] = value;
      this.each(function() {
        var self = jQuery( this );

        self.triggerHandler( "setData" + part, parts );
        jQuery.data( this, key, value );
        self.triggerHandler( "changeData" + part, parts );
      });
    }, null, value, arguments.length > 1, null, false );
  },

  removeData: function( key ) {
    return this.each(function() {
      jQuery.removeData( this, key );
    });
  }
});

function dataAttr( elem, key, data ) {
  // If nothing was found internally, try to fetch any
  // data from the HTML5 data-* attribute
  if ( data === undefined && elem.nodeType === 1 ) {

    var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

    data = elem.getAttribute( name );

    if ( typeof data === "string" ) {
      try {
        data = data === "true" ? true :
        data === "false" ? false :
        data === "null" ? null :
        // Only convert to a number if it doesn't change the string
        +data + "" === data ? +data :
        rbrace.test( data ) ? jQuery.parseJSON( data ) :
          data;
      } catch( e ) {}

      // Make sure we set the data so it isn't changed later
      jQuery.data( elem, key, data );

    } else {
      data = undefined;
    }
  }

  return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
  var name;
  for ( name in obj ) {

    // if the public data object is empty, the private is still empty
    if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
      continue;
    }
    if ( name !== "toJSON" ) {
      return false;
    }
  }

  return true;
}
jQuery.extend({
  queue: function( elem, type, data ) {
    var queue;

    if ( elem ) {
      type = ( type || "fx" ) + "queue";
      queue = jQuery._data( elem, type );

      // Speed up dequeue by getting out quickly if this is just a lookup
      if ( data ) {
        if ( !queue || jQuery.isArray(data) ) {
          queue = jQuery._data( elem, type, jQuery.makeArray(data) );
        } else {
          queue.push( data );
        }
      }
      return queue || [];
    }
  },

  dequeue: function( elem, type ) {
    type = type || "fx";

    var queue = jQuery.queue( elem, type ),
      startLength = queue.length,
      fn = queue.shift(),
      hooks = jQuery._queueHooks( elem, type ),
      next = function() {
        jQuery.dequeue( elem, type );
      };

    // If the fx queue is dequeued, always remove the progress sentinel
    if ( fn === "inprogress" ) {
      fn = queue.shift();
      startLength--;
    }

    if ( fn ) {

      // Add a progress sentinel to prevent the fx queue from being
      // automatically dequeued
      if ( type === "fx" ) {
        queue.unshift( "inprogress" );
      }

      // clear up the last queue stop function
      delete hooks.stop;
      fn.call( elem, next, hooks );
    }

    if ( !startLength && hooks ) {
      hooks.empty.fire();
    }
  },

  // not intended for public consumption - generates a queueHooks object, or returns the current one
  _queueHooks: function( elem, type ) {
    var key = type + "queueHooks";
    return jQuery._data( elem, key ) || jQuery._data( elem, key, {
      empty: jQuery.Callbacks("once memory").add(function() {
        jQuery.removeData( elem, type + "queue", true );
        jQuery.removeData( elem, key, true );
      })
    });
  }
});

jQuery.fn.extend({
  queue: function( type, data ) {
    var setter = 2;

    if ( typeof type !== "string" ) {
      data = type;
      type = "fx";
      setter--;
    }

    if ( arguments.length < setter ) {
      return jQuery.queue( this[0], type );
    }

    return data === undefined ?
      this :
      this.each(function() {
        var queue = jQuery.queue( this, type, data );

        // ensure a hooks for this queue
        jQuery._queueHooks( this, type );

        if ( type === "fx" && queue[0] !== "inprogress" ) {
          jQuery.dequeue( this, type );
        }
      });
  },
  dequeue: function( type ) {
    return this.each(function() {
      jQuery.dequeue( this, type );
    });
  },
  // Based off of the plugin by Clint Helfers, with permission.
  // http://blindsignals.com/index.php/2009/07/jquery-delay/
  delay: function( time, type ) {
    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    type = type || "fx";

    return this.queue( type, function( next, hooks ) {
      var timeout = setTimeout( next, time );
      hooks.stop = function() {
        clearTimeout( timeout );
      };
    });
  },
  clearQueue: function( type ) {
    return this.queue( type || "fx", [] );
  },
  // Get a promise resolved when queues of a certain type
  // are emptied (fx is the type by default)
  promise: function( type, obj ) {
    var tmp,
      count = 1,
      defer = jQuery.Deferred(),
      elements = this,
      i = this.length,
      resolve = function() {
        if ( !( --count ) ) {
          defer.resolveWith( elements, [ elements ] );
        }
      };

    if ( typeof type !== "string" ) {
      obj = type;
      type = undefined;
    }
    type = type || "fx";

    while( i-- ) {
      tmp = jQuery._data( elements[ i ], type + "queueHooks" );
      if ( tmp && tmp.empty ) {
        count++;
        tmp.empty.add( resolve );
      }
    }
    resolve();
    return defer.promise( obj );
  }
});
var nodeHook, boolHook, fixSpecified,
  rclass = /[\t\r\n]/g,
  rreturn = /\r/g,
  rtype = /^(?:button|input)$/i,
  rfocusable = /^(?:button|input|object|select|textarea)$/i,
  rclickable = /^a(?:rea|)$/i,
  rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
  getSetAttribute = jQuery.support.getSetAttribute;

jQuery.fn.extend({
  attr: function( name, value ) {
    return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
  },

  removeAttr: function( name ) {
    return this.each(function() {
      jQuery.removeAttr( this, name );
    });
  },

  prop: function( name, value ) {
    return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
  },

  removeProp: function( name ) {
    name = jQuery.propFix[ name ] || name;
    return this.each(function() {
      // try/catch handles cases where IE balks (such as removing a property on window)
      try {
        this[ name ] = undefined;
        delete this[ name ];
      } catch( e ) {}
    });
  },

  addClass: function( value ) {
    var classNames, i, l, elem,
      setClass, c, cl;

    if ( jQuery.isFunction( value ) ) {
      return this.each(function( j ) {
        jQuery( this ).addClass( value.call(this, j, this.className) );
      });
    }

    if ( value && typeof value === "string" ) {
      classNames = value.split( core_rspace );

      for ( i = 0, l = this.length; i < l; i++ ) {
        elem = this[ i ];

        if ( elem.nodeType === 1 ) {
          if ( !elem.className && classNames.length === 1 ) {
            elem.className = value;

          } else {
            setClass = " " + elem.className + " ";

            for ( c = 0, cl = classNames.length; c < cl; c++ ) {
              if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
                setClass += classNames[ c ] + " ";
              }
            }
            elem.className = jQuery.trim( setClass );
          }
        }
      }
    }

    return this;
  },

  removeClass: function( value ) {
    var removes, className, elem, c, cl, i, l;

    if ( jQuery.isFunction( value ) ) {
      return this.each(function( j ) {
        jQuery( this ).removeClass( value.call(this, j, this.className) );
      });
    }
    if ( (value && typeof value === "string") || value === undefined ) {
      removes = ( value || "" ).split( core_rspace );

      for ( i = 0, l = this.length; i < l; i++ ) {
        elem = this[ i ];
        if ( elem.nodeType === 1 && elem.className ) {

          className = (" " + elem.className + " ").replace( rclass, " " );

          // loop over each item in the removal list
          for ( c = 0, cl = removes.length; c < cl; c++ ) {
            // Remove until there is nothing to remove,
            while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
              className = className.replace( " " + removes[ c ] + " " , " " );
            }
          }
          elem.className = value ? jQuery.trim( className ) : "";
        }
      }
    }

    return this;
  },

  toggleClass: function( value, stateVal ) {
    var type = typeof value,
      isBool = typeof stateVal === "boolean";

    if ( jQuery.isFunction( value ) ) {
      return this.each(function( i ) {
        jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
      });
    }

    return this.each(function() {
      if ( type === "string" ) {
        // toggle individual class names
        var className,
          i = 0,
          self = jQuery( this ),
          state = stateVal,
          classNames = value.split( core_rspace );

        while ( (className = classNames[ i++ ]) ) {
          // check each className given, space separated list
          state = isBool ? state : !self.hasClass( className );
          self[ state ? "addClass" : "removeClass" ]( className );
        }

      } else if ( type === "undefined" || type === "boolean" ) {
        if ( this.className ) {
          // store className if set
          jQuery._data( this, "__className__", this.className );
        }

        // toggle whole className
        this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
      }
    });
  },

  hasClass: function( selector ) {
    var className = " " + selector + " ",
      i = 0,
      l = this.length;
    for ( ; i < l; i++ ) {
      if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
        return true;
      }
    }

    return false;
  },

  val: function( value ) {
    var hooks, ret, isFunction,
      elem = this[0];

    if ( !arguments.length ) {
      if ( elem ) {
        hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

        if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
          return ret;
        }

        ret = elem.value;

        return typeof ret === "string" ?
          // handle most common string cases
          ret.replace(rreturn, "") :
          // handle cases where value is null/undef or number
          ret == null ? "" : ret;
      }

      return;
    }

    isFunction = jQuery.isFunction( value );

    return this.each(function( i ) {
      var val,
        self = jQuery(this);

      if ( this.nodeType !== 1 ) {
        return;
      }

      if ( isFunction ) {
        val = value.call( this, i, self.val() );
      } else {
        val = value;
      }

      // Treat null/undefined as ""; convert numbers to string
      if ( val == null ) {
        val = "";
      } else if ( typeof val === "number" ) {
        val += "";
      } else if ( jQuery.isArray( val ) ) {
        val = jQuery.map(val, function ( value ) {
          return value == null ? "" : value + "";
        });
      }

      hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

      // If set returns undefined, fall back to normal setting
      if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
        this.value = val;
      }
    });
  }
});

jQuery.extend({
  valHooks: {
    option: {
      get: function( elem ) {
        // attributes.value is undefined in Blackberry 4.7 but
        // uses .value. See #6932
        var val = elem.attributes.value;
        return !val || val.specified ? elem.value : elem.text;
      }
    },
    select: {
      get: function( elem ) {
        var value, i, max, option,
          index = elem.selectedIndex,
          values = [],
          options = elem.options,
          one = elem.type === "select-one";

        // Nothing was selected
        if ( index < 0 ) {
          return null;
        }

        // Loop through all the selected options
        i = one ? index : 0;
        max = one ? index + 1 : options.length;
        for ( ; i < max; i++ ) {
          option = options[ i ];

          // Don't return options that are disabled or in a disabled optgroup
          if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
              (!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

            // Get the specific value for the option
            value = jQuery( option ).val();

            // We don't need an array for one selects
            if ( one ) {
              return value;
            }

            // Multi-Selects return an array
            values.push( value );
          }
        }

        // Fixes Bug #2551 -- select.val() broken in IE after form.reset()
        if ( one && !values.length && options.length ) {
          return jQuery( options[ index ] ).val();
        }

        return values;
      },

      set: function( elem, value ) {
        var values = jQuery.makeArray( value );

        jQuery(elem).find("option").each(function() {
          this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
        });

        if ( !values.length ) {
          elem.selectedIndex = -1;
        }
        return values;
      }
    }
  },

  // Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
  attrFn: {},

  attr: function( elem, name, value, pass ) {
    var ret, hooks, notxml,
      nType = elem.nodeType;

    // don't get/set attributes on text, comment and attribute nodes
    if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
      return;
    }

    if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
      return jQuery( elem )[ name ]( value );
    }

    // Fallback to prop when attributes are not supported
    if ( typeof elem.getAttribute === "undefined" ) {
      return jQuery.prop( elem, name, value );
    }

    notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

    // All attributes are lowercase
    // Grab necessary hook if one is defined
    if ( notxml ) {
      name = name.toLowerCase();
      hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
    }

    if ( value !== undefined ) {

      if ( value === null ) {
        jQuery.removeAttr( elem, name );
        return;

      } else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
        return ret;

      } else {
        elem.setAttribute( name, value + "" );
        return value;
      }

    } else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
      return ret;

    } else {

      ret = elem.getAttribute( name );

      // Non-existent attributes return null, we normalize to undefined
      return ret === null ?
        undefined :
        ret;
    }
  },

  removeAttr: function( elem, value ) {
    var propName, attrNames, name, isBool,
      i = 0;

    if ( value && elem.nodeType === 1 ) {

      attrNames = value.split( core_rspace );

      for ( ; i < attrNames.length; i++ ) {
        name = attrNames[ i ];

        if ( name ) {
          propName = jQuery.propFix[ name ] || name;
          isBool = rboolean.test( name );

          // See #9699 for explanation of this approach (setting first, then removal)
          // Do not do this for boolean attributes (see #10870)
          if ( !isBool ) {
            jQuery.attr( elem, name, "" );
          }
          elem.removeAttribute( getSetAttribute ? name : propName );

          // Set corresponding property to false for boolean attributes
          if ( isBool && propName in elem ) {
            elem[ propName ] = false;
          }
        }
      }
    }
  },

  attrHooks: {
    type: {
      set: function( elem, value ) {
        // We can't allow the type property to be changed (since it causes problems in IE)
        if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
          jQuery.error( "type property can't be changed" );
        } else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
          // Setting the type on a radio button after the value resets the value in IE6-9
          // Reset value to it's default in case type is set after value
          // This is for element creation
          var val = elem.value;
          elem.setAttribute( "type", value );
          if ( val ) {
            elem.value = val;
          }
          return value;
        }
      }
    },
    // Use the value property for back compat
    // Use the nodeHook for button elements in IE6/7 (#1954)
    value: {
      get: function( elem, name ) {
        if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
          return nodeHook.get( elem, name );
        }
        return name in elem ?
          elem.value :
          null;
      },
      set: function( elem, value, name ) {
        if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
          return nodeHook.set( elem, value, name );
        }
        // Does not return so that setAttribute is also used
        elem.value = value;
      }
    }
  },

  propFix: {
    tabindex: "tabIndex",
    readonly: "readOnly",
    "for": "htmlFor",
    "class": "className",
    maxlength: "maxLength",
    cellspacing: "cellSpacing",
    cellpadding: "cellPadding",
    rowspan: "rowSpan",
    colspan: "colSpan",
    usemap: "useMap",
    frameborder: "frameBorder",
    contenteditable: "contentEditable"
  },

  prop: function( elem, name, value ) {
    var ret, hooks, notxml,
      nType = elem.nodeType;

    // don't get/set properties on text, comment and attribute nodes
    if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
      return;
    }

    notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

    if ( notxml ) {
      // Fix name and attach hooks
      name = jQuery.propFix[ name ] || name;
      hooks = jQuery.propHooks[ name ];
    }

    if ( value !== undefined ) {
      if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
        return ret;

      } else {
        return ( elem[ name ] = value );
      }

    } else {
      if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
        return ret;

      } else {
        return elem[ name ];
      }
    }
  },

  propHooks: {
    tabIndex: {
      get: function( elem ) {
        // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
        // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
        var attributeNode = elem.getAttributeNode("tabindex");

        return attributeNode && attributeNode.specified ?
          parseInt( attributeNode.value, 10 ) :
          rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
            0 :
            undefined;
      }
    }
  }
});

// Hook for boolean attributes
boolHook = {
  get: function( elem, name ) {
    // Align boolean attributes with corresponding properties
    // Fall back to attribute presence where some booleans are not supported
    var attrNode,
      property = jQuery.prop( elem, name );
    return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
      name.toLowerCase() :
      undefined;
  },
  set: function( elem, value, name ) {
    var propName;
    if ( value === false ) {
      // Remove boolean attributes when set to false
      jQuery.removeAttr( elem, name );
    } else {
      // value is true since we know at this point it's type boolean and not false
      // Set boolean attributes to the same name and set the DOM property
      propName = jQuery.propFix[ name ] || name;
      if ( propName in elem ) {
        // Only set the IDL specifically if it already exists on the element
        elem[ propName ] = true;
      }

      elem.setAttribute( name, name.toLowerCase() );
    }
    return name;
  }
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

  fixSpecified = {
    name: true,
    id: true,
    coords: true
  };

  // Use this for any attribute in IE6/7
  // This fixes almost every IE6/7 issue
  nodeHook = jQuery.valHooks.button = {
    get: function( elem, name ) {
      var ret;
      ret = elem.getAttributeNode( name );
      return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
        ret.value :
        undefined;
    },
    set: function( elem, value, name ) {
      // Set the existing or create a new attribute node
      var ret = elem.getAttributeNode( name );
      if ( !ret ) {
        ret = document.createAttribute( name );
        elem.setAttributeNode( ret );
      }
      return ( ret.value = value + "" );
    }
  };

  // Set width and height to auto instead of 0 on empty string( Bug #8150 )
  // This is for removals
  jQuery.each([ "width", "height" ], function( i, name ) {
    jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
      set: function( elem, value ) {
        if ( value === "" ) {
          elem.setAttribute( name, "auto" );
          return value;
        }
      }
    });
  });

  // Set contenteditable to false on removals(#10429)
  // Setting to empty string throws an error as an invalid value
  jQuery.attrHooks.contenteditable = {
    get: nodeHook.get,
    set: function( elem, value, name ) {
      if ( value === "" ) {
        value = "false";
      }
      nodeHook.set( elem, value, name );
    }
  };
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
  jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
    jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
      get: function( elem ) {
        var ret = elem.getAttribute( name, 2 );
        return ret === null ? undefined : ret;
      }
    });
  });
}

if ( !jQuery.support.style ) {
  jQuery.attrHooks.style = {
    get: function( elem ) {
      // Return undefined in the case of empty string
      // Normalize to lowercase since IE uppercases css property names
      return elem.style.cssText.toLowerCase() || undefined;
    },
    set: function( elem, value ) {
      return ( elem.style.cssText = value + "" );
    }
  };
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
  jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
    get: function( elem ) {
      var parent = elem.parentNode;

      if ( parent ) {
        parent.selectedIndex;

        // Make sure that it also works with optgroups, see #5701
        if ( parent.parentNode ) {
          parent.parentNode.selectedIndex;
        }
      }
      return null;
    }
  });
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
  jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
  jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
      get: function( elem ) {
        // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
        return elem.getAttribute("value") === null ? "on" : elem.value;
      }
    };
  });
}
jQuery.each([ "radio", "checkbox" ], function() {
  jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
    set: function( elem, value ) {
      if ( jQuery.isArray( value ) ) {
        return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
      }
    }
  });
});
var rformElems = /^(?:textarea|input|select)$/i,
  rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
  rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
  rkeyEvent = /^key/,
  rmouseEvent = /^(?:mouse|contextmenu)|click/,
  rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
  hoverHack = function( events ) {
    return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
  };

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

  add: function( elem, types, handler, data, selector ) {

    var elemData, eventHandle, events,
      t, tns, type, namespaces, handleObj,
      handleObjIn, handlers, special;

    // Don't attach events to noData or text/comment nodes (allow plain objects tho)
    if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
      return;
    }

    // Caller can pass in an object of custom data in lieu of the handler
    if ( handler.handler ) {
      handleObjIn = handler;
      handler = handleObjIn.handler;
      selector = handleObjIn.selector;
    }

    // Make sure that the handler has a unique ID, used to find/remove it later
    if ( !handler.guid ) {
      handler.guid = jQuery.guid++;
    }

    // Init the element's event structure and main handler, if this is the first
    events = elemData.events;
    if ( !events ) {
      elemData.events = events = {};
    }
    eventHandle = elemData.handle;
    if ( !eventHandle ) {
      elemData.handle = eventHandle = function( e ) {
        // Discard the second event of a jQuery.event.trigger() and
        // when an event is called after a page has unloaded
        return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
          jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
          undefined;
      };
      // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
      eventHandle.elem = elem;
    }

    // Handle multiple events separated by a space
    // jQuery(...).bind("mouseover mouseout", fn);
    types = jQuery.trim( hoverHack(types) ).split( " " );
    for ( t = 0; t < types.length; t++ ) {

      tns = rtypenamespace.exec( types[t] ) || [];
      type = tns[1];
      namespaces = ( tns[2] || "" ).split( "." ).sort();

      // If event changes its type, use the special event handlers for the changed type
      special = jQuery.event.special[ type ] || {};

      // If selector defined, determine special event api type, otherwise given type
      type = ( selector ? special.delegateType : special.bindType ) || type;

      // Update special based on newly reset type
      special = jQuery.event.special[ type ] || {};

      // handleObj is passed to all event handlers
      handleObj = jQuery.extend({
        type: type,
        origType: tns[1],
        data: data,
        handler: handler,
        guid: handler.guid,
        selector: selector,
        needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
        namespace: namespaces.join(".")
      }, handleObjIn );

      // Init the event handler queue if we're the first
      handlers = events[ type ];
      if ( !handlers ) {
        handlers = events[ type ] = [];
        handlers.delegateCount = 0;

        // Only use addEventListener/attachEvent if the special events handler returns false
        if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
          // Bind the global event handler to the element
          if ( elem.addEventListener ) {
            elem.addEventListener( type, eventHandle, false );

          } else if ( elem.attachEvent ) {
            elem.attachEvent( "on" + type, eventHandle );
          }
        }
      }

      if ( special.add ) {
        special.add.call( elem, handleObj );

        if ( !handleObj.handler.guid ) {
          handleObj.handler.guid = handler.guid;
        }
      }

      // Add to the element's handler list, delegates in front
      if ( selector ) {
        handlers.splice( handlers.delegateCount++, 0, handleObj );
      } else {
        handlers.push( handleObj );
      }

      // Keep track of which events have ever been used, for event optimization
      jQuery.event.global[ type ] = true;
    }

    // Nullify elem to prevent memory leaks in IE
    elem = null;
  },

  global: {},

  // Detach an event or set of events from an element
  remove: function( elem, types, handler, selector, mappedTypes ) {

    var t, tns, type, origType, namespaces, origCount,
      j, events, special, eventType, handleObj,
      elemData = jQuery.hasData( elem ) && jQuery._data( elem );

    if ( !elemData || !(events = elemData.events) ) {
      return;
    }

    // Once for each type.namespace in types; type may be omitted
    types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
    for ( t = 0; t < types.length; t++ ) {
      tns = rtypenamespace.exec( types[t] ) || [];
      type = origType = tns[1];
      namespaces = tns[2];

      // Unbind all events (on this namespace, if provided) for the element
      if ( !type ) {
        for ( type in events ) {
          jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
        }
        continue;
      }

      special = jQuery.event.special[ type ] || {};
      type = ( selector? special.delegateType : special.bindType ) || type;
      eventType = events[ type ] || [];
      origCount = eventType.length;
      namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

      // Remove matching events
      for ( j = 0; j < eventType.length; j++ ) {
        handleObj = eventType[ j ];

        if ( ( mappedTypes || origType === handleObj.origType ) &&
           ( !handler || handler.guid === handleObj.guid ) &&
           ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
           ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
          eventType.splice( j--, 1 );

          if ( handleObj.selector ) {
            eventType.delegateCount--;
          }
          if ( special.remove ) {
            special.remove.call( elem, handleObj );
          }
        }
      }

      // Remove generic event handler if we removed something and no more handlers exist
      // (avoids potential for endless recursion during removal of special event handlers)
      if ( eventType.length === 0 && origCount !== eventType.length ) {
        if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
          jQuery.removeEvent( elem, type, elemData.handle );
        }

        delete events[ type ];
      }
    }

    // Remove the expando if it's no longer used
    if ( jQuery.isEmptyObject( events ) ) {
      delete elemData.handle;

      // removeData also checks for emptiness and clears the expando if empty
      // so use it instead of delete
      jQuery.removeData( elem, "events", true );
    }
  },

  // Events that are safe to short-circuit if no handlers are attached.
  // Native DOM events should not be added, they may have inline handlers.
  customEvent: {
    "getData": true,
    "setData": true,
    "changeData": true
  },

  trigger: function( event, data, elem, onlyHandlers ) {
    // Don't do events on text and comment nodes
    if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
      return;
    }

    // Event object or event type
    var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
      type = event.type || event,
      namespaces = [];

    // focus/blur morphs to focusin/out; ensure we're not firing them right now
    if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
      return;
    }

    if ( type.indexOf( "!" ) >= 0 ) {
      // Exclusive events trigger only for the exact event (no namespaces)
      type = type.slice(0, -1);
      exclusive = true;
    }

    if ( type.indexOf( "." ) >= 0 ) {
      // Namespaced trigger; create a regexp to match event type in handle()
      namespaces = type.split(".");
      type = namespaces.shift();
      namespaces.sort();
    }

    if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
      // No jQuery handlers for this event type, and it can't have inline handlers
      return;
    }

    // Caller can pass in an Event, Object, or just an event type string
    event = typeof event === "object" ?
      // jQuery.Event object
      event[ jQuery.expando ] ? event :
      // Object literal
      new jQuery.Event( type, event ) :
      // Just the event type (string)
      new jQuery.Event( type );

    event.type = type;
    event.isTrigger = true;
    event.exclusive = exclusive;
    event.namespace = namespaces.join( "." );
    event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
    ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

    // Handle a global trigger
    if ( !elem ) {

      // TODO: Stop taunting the data cache; remove global events and always attach to document
      cache = jQuery.cache;
      for ( i in cache ) {
        if ( cache[ i ].events && cache[ i ].events[ type ] ) {
          jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
        }
      }
      return;
    }

    // Clean up the event in case it is being reused
    event.result = undefined;
    if ( !event.target ) {
      event.target = elem;
    }

    // Clone any incoming data and prepend the event, creating the handler arg list
    data = data != null ? jQuery.makeArray( data ) : [];
    data.unshift( event );

    // Allow special events to draw outside the lines
    special = jQuery.event.special[ type ] || {};
    if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
      return;
    }

    // Determine event propagation path in advance, per W3C events spec (#9951)
    // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
    eventPath = [[ elem, special.bindType || type ]];
    if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

      bubbleType = special.delegateType || type;
      cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
      for ( old = elem; cur; cur = cur.parentNode ) {
        eventPath.push([ cur, bubbleType ]);
        old = cur;
      }

      // Only add window if we got to document (e.g., not plain obj or detached DOM)
      if ( old === (elem.ownerDocument || document) ) {
        eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
      }
    }

    // Fire handlers on the event path
    for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

      cur = eventPath[i][0];
      event.type = eventPath[i][1];

      handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
      if ( handle ) {
        handle.apply( cur, data );
      }
      // Note that this is a bare JS function and not a jQuery handler
      handle = ontype && cur[ ontype ];
      if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
        event.preventDefault();
      }
    }
    event.type = type;

    // If nobody prevented the default action, do it now
    if ( !onlyHandlers && !event.isDefaultPrevented() ) {

      if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
        !(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

        // Call a native DOM method on the target with the same name name as the event.
        // Can't use an .isFunction() check here because IE6/7 fails that test.
        // Don't do default actions on window, that's where global variables be (#6170)
        // IE<9 dies on focus/blur to hidden element (#1486)
        if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

          // Don't re-trigger an onFOO event when we call its FOO() method
          old = elem[ ontype ];

          if ( old ) {
            elem[ ontype ] = null;
          }

          // Prevent re-triggering of the same event, since we already bubbled it above
          jQuery.event.triggered = type;
          elem[ type ]();
          jQuery.event.triggered = undefined;

          if ( old ) {
            elem[ ontype ] = old;
          }
        }
      }
    }

    return event.result;
  },

  dispatch: function( event ) {

    // Make a writable jQuery.Event from the native event object
    event = jQuery.event.fix( event || window.event );

    var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
      handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
      delegateCount = handlers.delegateCount,
      args = core_slice.call( arguments ),
      run_all = !event.exclusive && !event.namespace,
      special = jQuery.event.special[ event.type ] || {},
      handlerQueue = [];

    // Use the fix-ed jQuery.Event rather than the (read-only) native event
    args[0] = event;
    event.delegateTarget = this;

    // Call the preDispatch hook for the mapped type, and let it bail if desired
    if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
      return;
    }

    // Determine handlers that should run if there are delegated events
    // Avoid non-left-click bubbling in Firefox (#3861)
    if ( delegateCount && !(event.button && event.type === "click") ) {

      for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

        // Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
        if ( cur.disabled !== true || event.type !== "click" ) {
          selMatch = {};
          matches = [];
          for ( i = 0; i < delegateCount; i++ ) {
            handleObj = handlers[ i ];
            sel = handleObj.selector;

            if ( selMatch[ sel ] === undefined ) {
              selMatch[ sel ] = handleObj.needsContext ?
                jQuery( sel, this ).index( cur ) >= 0 :
                jQuery.find( sel, this, null, [ cur ] ).length;
            }
            if ( selMatch[ sel ] ) {
              matches.push( handleObj );
            }
          }
          if ( matches.length ) {
            handlerQueue.push({ elem: cur, matches: matches });
          }
        }
      }
    }

    // Add the remaining (directly-bound) handlers
    if ( handlers.length > delegateCount ) {
      handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
    }

    // Run delegates first; they may want to stop propagation beneath us
    for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
      matched = handlerQueue[ i ];
      event.currentTarget = matched.elem;

      for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
        handleObj = matched.matches[ j ];

        // Triggered event must either 1) be non-exclusive and have no namespace, or
        // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
        if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

          event.data = handleObj.data;
          event.handleObj = handleObj;

          ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
              .apply( matched.elem, args );

          if ( ret !== undefined ) {
            event.result = ret;
            if ( ret === false ) {
              event.preventDefault();
              event.stopPropagation();
            }
          }
        }
      }
    }

    // Call the postDispatch hook for the mapped type
    if ( special.postDispatch ) {
      special.postDispatch.call( this, event );
    }

    return event.result;
  },

  // Includes some event props shared by KeyEvent and MouseEvent
  // *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
  props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

  fixHooks: {},

  keyHooks: {
    props: "char charCode key keyCode".split(" "),
    filter: function( event, original ) {

      // Add which for key events
      if ( event.which == null ) {
        event.which = original.charCode != null ? original.charCode : original.keyCode;
      }

      return event;
    }
  },

  mouseHooks: {
    props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
    filter: function( event, original ) {
      var eventDoc, doc, body,
        button = original.button,
        fromElement = original.fromElement;

      // Calculate pageX/Y if missing and clientX/Y available
      if ( event.pageX == null && original.clientX != null ) {
        eventDoc = event.target.ownerDocument || document;
        doc = eventDoc.documentElement;
        body = eventDoc.body;

        event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
        event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
      }

      // Add relatedTarget, if necessary
      if ( !event.relatedTarget && fromElement ) {
        event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
      }

      // Add which for click: 1 === left; 2 === middle; 3 === right
      // Note: button is not normalized, so don't use it
      if ( !event.which && button !== undefined ) {
        event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
      }

      return event;
    }
  },

  fix: function( event ) {
    if ( event[ jQuery.expando ] ) {
      return event;
    }

    // Create a writable copy of the event object and normalize some properties
    var i, prop,
      originalEvent = event,
      fixHook = jQuery.event.fixHooks[ event.type ] || {},
      copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

    event = jQuery.Event( originalEvent );

    for ( i = copy.length; i; ) {
      prop = copy[ --i ];
      event[ prop ] = originalEvent[ prop ];
    }

    // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
    if ( !event.target ) {
      event.target = originalEvent.srcElement || document;
    }

    // Target should not be a text node (#504, Safari)
    if ( event.target.nodeType === 3 ) {
      event.target = event.target.parentNode;
    }

    // For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
    event.metaKey = !!event.metaKey;

    return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
  },

  special: {
    load: {
      // Prevent triggered image.load events from bubbling to window.load
      noBubble: true
    },

    focus: {
      delegateType: "focusin"
    },
    blur: {
      delegateType: "focusout"
    },

    beforeunload: {
      setup: function( data, namespaces, eventHandle ) {
        // We only want to do this special case on windows
        if ( jQuery.isWindow( this ) ) {
          this.onbeforeunload = eventHandle;
        }
      },

      teardown: function( namespaces, eventHandle ) {
        if ( this.onbeforeunload === eventHandle ) {
          this.onbeforeunload = null;
        }
      }
    }
  },

  simulate: function( type, elem, event, bubble ) {
    // Piggyback on a donor event to simulate a different one.
    // Fake originalEvent to avoid donor's stopPropagation, but if the
    // simulated event prevents default then we do the same on the donor.
    var e = jQuery.extend(
      new jQuery.Event(),
      event,
      { type: type,
        isSimulated: true,
        originalEvent: {}
      }
    );
    if ( bubble ) {
      jQuery.event.trigger( e, null, elem );
    } else {
      jQuery.event.dispatch.call( elem, e );
    }
    if ( e.isDefaultPrevented() ) {
      event.preventDefault();
    }
  }
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
  function( elem, type, handle ) {
    if ( elem.removeEventListener ) {
      elem.removeEventListener( type, handle, false );
    }
  } :
  function( elem, type, handle ) {
    var name = "on" + type;

    if ( elem.detachEvent ) {

      // #8545, #7054, preventing memory leaks for custom events in IE6-8 –
      // detachEvent needed property on element, by name of that event, to properly expose it to GC
      if ( typeof elem[ name ] === "undefined" ) {
        elem[ name ] = null;
      }

      elem.detachEvent( name, handle );
    }
  };

jQuery.Event = function( src, props ) {
  // Allow instantiation without the 'new' keyword
  if ( !(this instanceof jQuery.Event) ) {
    return new jQuery.Event( src, props );
  }

  // Event object
  if ( src && src.type ) {
    this.originalEvent = src;
    this.type = src.type;

    // Events bubbling up the document may have been marked as prevented
    // by a handler lower down the tree; reflect the correct value.
    this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
      src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

  // Event type
  } else {
    this.type = src;
  }

  // Put explicitly provided properties onto the event object
  if ( props ) {
    jQuery.extend( this, props );
  }

  // Create a timestamp if incoming event doesn't have one
  this.timeStamp = src && src.timeStamp || jQuery.now();

  // Mark it as fixed
  this[ jQuery.expando ] = true;
};

function returnFalse() {
  return false;
}
function returnTrue() {
  return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
  preventDefault: function() {
    this.isDefaultPrevented = returnTrue;

    var e = this.originalEvent;
    if ( !e ) {
      return;
    }

    // if preventDefault exists run it on the original event
    if ( e.preventDefault ) {
      e.preventDefault();

    // otherwise set the returnValue property of the original event to false (IE)
    } else {
      e.returnValue = false;
    }
  },
  stopPropagation: function() {
    this.isPropagationStopped = returnTrue;

    var e = this.originalEvent;
    if ( !e ) {
      return;
    }
    // if stopPropagation exists run it on the original event
    if ( e.stopPropagation ) {
      e.stopPropagation();
    }
    // otherwise set the cancelBubble property of the original event to true (IE)
    e.cancelBubble = true;
  },
  stopImmediatePropagation: function() {
    this.isImmediatePropagationStopped = returnTrue;
    this.stopPropagation();
  },
  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
  mouseenter: "mouseover",
  mouseleave: "mouseout"
}, function( orig, fix ) {
  jQuery.event.special[ orig ] = {
    delegateType: fix,
    bindType: fix,

    handle: function( event ) {
      var ret,
        target = this,
        related = event.relatedTarget,
        handleObj = event.handleObj,
        selector = handleObj.selector;

      // For mousenter/leave call the handler if related is outside the target.
      // NB: No relatedTarget if the mouse left/entered the browser window
      if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
        event.type = handleObj.origType;
        ret = handleObj.handler.apply( this, arguments );
        event.type = fix;
      }
      return ret;
    }
  };
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

  jQuery.event.special.submit = {
    setup: function() {
      // Only need this for delegated form submit events
      if ( jQuery.nodeName( this, "form" ) ) {
        return false;
      }

      // Lazy-add a submit handler when a descendant form may potentially be submitted
      jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
        // Node name check avoids a VML-related crash in IE (#9807)
        var elem = e.target,
          form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
        if ( form && !jQuery._data( form, "_submit_attached" ) ) {
          jQuery.event.add( form, "submit._submit", function( event ) {
            event._submit_bubble = true;
          });
          jQuery._data( form, "_submit_attached", true );
        }
      });
      // return undefined since we don't need an event listener
    },

    postDispatch: function( event ) {
      // If form was submitted by the user, bubble the event up the tree
      if ( event._submit_bubble ) {
        delete event._submit_bubble;
        if ( this.parentNode && !event.isTrigger ) {
          jQuery.event.simulate( "submit", this.parentNode, event, true );
        }
      }
    },

    teardown: function() {
      // Only need this for delegated form submit events
      if ( jQuery.nodeName( this, "form" ) ) {
        return false;
      }

      // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
      jQuery.event.remove( this, "._submit" );
    }
  };
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

  jQuery.event.special.change = {

    setup: function() {

      if ( rformElems.test( this.nodeName ) ) {
        // IE doesn't fire change on a check/radio until blur; trigger it on click
        // after a propertychange. Eat the blur-change in special.change.handle.
        // This still fires onchange a second time for check/radio after blur.
        if ( this.type === "checkbox" || this.type === "radio" ) {
          jQuery.event.add( this, "propertychange._change", function( event ) {
            if ( event.originalEvent.propertyName === "checked" ) {
              this._just_changed = true;
            }
          });
          jQuery.event.add( this, "click._change", function( event ) {
            if ( this._just_changed && !event.isTrigger ) {
              this._just_changed = false;
            }
            // Allow triggered, simulated change events (#11500)
            jQuery.event.simulate( "change", this, event, true );
          });
        }
        return false;
      }
      // Delegated event; lazy-add a change handler on descendant inputs
      jQuery.event.add( this, "beforeactivate._change", function( e ) {
        var elem = e.target;

        if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
          jQuery.event.add( elem, "change._change", function( event ) {
            if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
              jQuery.event.simulate( "change", this.parentNode, event, true );
            }
          });
          jQuery._data( elem, "_change_attached", true );
        }
      });
    },

    handle: function( event ) {
      var elem = event.target;

      // Swallow native change events from checkbox/radio, we already triggered them above
      if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
        return event.handleObj.handler.apply( this, arguments );
      }
    },

    teardown: function() {
      jQuery.event.remove( this, "._change" );

      return !rformElems.test( this.nodeName );
    }
  };
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
  jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

    // Attach a single capturing handler while someone wants focusin/focusout
    var attaches = 0,
      handler = function( event ) {
        jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
      };

    jQuery.event.special[ fix ] = {
      setup: function() {
        if ( attaches++ === 0 ) {
          document.addEventListener( orig, handler, true );
        }
      },
      teardown: function() {
        if ( --attaches === 0 ) {
          document.removeEventListener( orig, handler, true );
        }
      }
    };
  });
}

jQuery.fn.extend({

  on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
    var origFn, type;

    // Types can be a map of types/handlers
    if ( typeof types === "object" ) {
      // ( types-Object, selector, data )
      if ( typeof selector !== "string" ) { // && selector != null
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for ( type in types ) {
        this.on( type, selector, data, types[ type ], one );
      }
      return this;
    }

    if ( data == null && fn == null ) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if ( fn == null ) {
      if ( typeof selector === "string" ) {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if ( fn === false ) {
      fn = returnFalse;
    } else if ( !fn ) {
      return this;
    }

    if ( one === 1 ) {
      origFn = fn;
      fn = function( event ) {
        // Can use an empty set, since event contains the info
        jQuery().off( event );
        return origFn.apply( this, arguments );
      };
      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
    }
    return this.each( function() {
      jQuery.event.add( this, types, fn, data, selector );
    });
  },
  one: function( types, selector, data, fn ) {
    return this.on( types, selector, data, fn, 1 );
  },
  off: function( types, selector, fn ) {
    var handleObj, type;
    if ( types && types.preventDefault && types.handleObj ) {
      // ( event )  dispatched jQuery.Event
      handleObj = types.handleObj;
      jQuery( types.delegateTarget ).off(
        handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
        handleObj.selector,
        handleObj.handler
      );
      return this;
    }
    if ( typeof types === "object" ) {
      // ( types-object [, selector] )
      for ( type in types ) {
        this.off( type, selector, types[ type ] );
      }
      return this;
    }
    if ( selector === false || typeof selector === "function" ) {
      // ( types [, fn] )
      fn = selector;
      selector = undefined;
    }
    if ( fn === false ) {
      fn = returnFalse;
    }
    return this.each(function() {
      jQuery.event.remove( this, types, fn, selector );
    });
  },

  bind: function( types, data, fn ) {
    return this.on( types, null, data, fn );
  },
  unbind: function( types, fn ) {
    return this.off( types, null, fn );
  },

  live: function( types, data, fn ) {
    jQuery( this.context ).on( types, this.selector, data, fn );
    return this;
  },
  die: function( types, fn ) {
    jQuery( this.context ).off( types, this.selector || "**", fn );
    return this;
  },

  delegate: function( selector, types, data, fn ) {
    return this.on( types, selector, data, fn );
  },
  undelegate: function( selector, types, fn ) {
    // ( namespace ) or ( selector, types [, fn] )
    return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
  },

  trigger: function( type, data ) {
    return this.each(function() {
      jQuery.event.trigger( type, data, this );
    });
  },
  triggerHandler: function( type, data ) {
    if ( this[0] ) {
      return jQuery.event.trigger( type, data, this[0], true );
    }
  },

  toggle: function( fn ) {
    // Save reference to arguments for access in closure
    var args = arguments,
      guid = fn.guid || jQuery.guid++,
      i = 0,
      toggler = function( event ) {
        // Figure out which function to execute
        var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
        jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

        // Make sure that clicks stop
        event.preventDefault();

        // and execute the function
        return args[ lastToggle ].apply( this, arguments ) || false;
      };

    // link all the functions, so any of them can unbind this click handler
    toggler.guid = guid;
    while ( i < args.length ) {
      args[ i++ ].guid = guid;
    }

    return this.click( toggler );
  },

  hover: function( fnOver, fnOut ) {
    return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
  }
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
  "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
  "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

  // Handle event binding
  jQuery.fn[ name ] = function( data, fn ) {
    if ( fn == null ) {
      fn = data;
      data = null;
    }

    return arguments.length > 0 ?
      this.on( name, null, data, fn ) :
      this.trigger( name );
  };

  if ( rkeyEvent.test( name ) ) {
    jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
  }

  if ( rmouseEvent.test( name ) ) {
    jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
  }
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var cachedruns,
  assertGetIdNotName,
  Expr,
  getText,
  isXML,
  contains,
  compile,
  sortOrder,
  hasDuplicate,
  outermostContext,

  baseHasDuplicate = true,
  strundefined = "undefined",

  expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

  Token = String,
  document = window.document,
  docElem = document.documentElement,
  dirruns = 0,
  done = 0,
  pop = [].pop,
  push = [].push,
  slice = [].slice,
  // Use a stripped-down indexOf if a native one is unavailable
  indexOf = [].indexOf || function( elem ) {
    var i = 0,
      len = this.length;
    for ( ; i < len; i++ ) {
      if ( this[i] === elem ) {
        return i;
      }
    }
    return -1;
  },

  // Augment a function for special use by Sizzle
  markFunction = function( fn, value ) {
    fn[ expando ] = value == null || value;
    return fn;
  },

  createCache = function() {
    var cache = {},
      keys = [];

    return markFunction(function( key, value ) {
      // Only keep the most recent entries
      if ( keys.push( key ) > Expr.cacheLength ) {
        delete cache[ keys.shift() ];
      }

      return (cache[ key ] = value);
    }, cache );
  },

  classCache = createCache(),
  tokenCache = createCache(),
  compilerCache = createCache(),

  // Regex

  // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
  whitespace = "[\\x20\\t\\r\\n\\f]",
  // http://www.w3.org/TR/css3-syntax/#characters
  characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

  // Loosely modeled on CSS identifier characters
  // An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
  // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
  identifier = characterEncoding.replace( "w", "w#" ),

  // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
  operators = "([*^$|!~]?=)",
  attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
    "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

  // Prefer arguments not in parens/brackets,
  //   then attribute selectors and non-pseudos (denoted by :),
  //   then anything else
  // These preferences are here to reduce the number of selectors
  //   needing tokenize in the PSEUDO preFilter
  pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

  // For matchExpr.POS and matchExpr.needsContext
  pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
    "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

  // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
  rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

  rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
  rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
  rpseudo = new RegExp( pseudos ),

  // Easily-parseable/retrievable ID or TAG or CLASS selectors
  rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

  rnot = /^:not/,
  rsibling = /[\x20\t\r\n\f]*[+~]/,
  rendsWithNot = /:not\($/,

  rheader = /h\d/i,
  rinputs = /input|select|textarea|button/i,

  rbackslash = /\\(?!\\)/g,

  matchExpr = {
    "ID": new RegExp( "^#(" + characterEncoding + ")" ),
    "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
    "NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
    "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
    "ATTR": new RegExp( "^" + attributes ),
    "PSEUDO": new RegExp( "^" + pseudos ),
    "POS": new RegExp( pos, "i" ),
    "CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
      "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
      "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
    // For use in libraries implementing .is()
    "needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
  },

  // Support

  // Used for testing something on an element
  assert = function( fn ) {
    var div = document.createElement("div");

    try {
      return fn( div );
    } catch (e) {
      return false;
    } finally {
      // release memory in IE
      div = null;
    }
  },

  // Check if getElementsByTagName("*") returns only elements
  assertTagNameNoComments = assert(function( div ) {
    div.appendChild( document.createComment("") );
    return !div.getElementsByTagName("*").length;
  }),

  // Check if getAttribute returns normalized href attributes
  assertHrefNotNormalized = assert(function( div ) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
      div.firstChild.getAttribute("href") === "#";
  }),

  // Check if attributes should be retrieved by attribute nodes
  assertAttributes = assert(function( div ) {
    div.innerHTML = "<select></select>";
    var type = typeof div.lastChild.getAttribute("multiple");
    // IE8 returns a string for some attributes even when not present
    return type !== "boolean" && type !== "string";
  }),

  // Check if getElementsByClassName can be trusted
  assertUsableClassName = assert(function( div ) {
    // Opera can't find a second classname (in 9.6)
    div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
    if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
      return false;
    }

    // Safari 3.2 caches class attributes and doesn't catch changes
    div.lastChild.className = "e";
    return div.getElementsByClassName("e").length === 2;
  }),

  // Check if getElementById returns elements by name
  // Check if getElementsByName privileges form controls or returns elements by ID
  assertUsableName = assert(function( div ) {
    // Inject content
    div.id = expando + 0;
    div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
    docElem.insertBefore( div, docElem.firstChild );

    // Test
    var pass = document.getElementsByName &&
      // buggy browsers will return fewer than the correct 2
      document.getElementsByName( expando ).length === 2 +
      // buggy browsers will return more than the correct 0
      document.getElementsByName( expando + 0 ).length;
    assertGetIdNotName = !document.getElementById( expando );

    // Cleanup
    docElem.removeChild( div );

    return pass;
  });

// If slice is not available, provide a backup
try {
  slice.call( docElem.childNodes, 0 )[0].nodeType;
} catch ( e ) {
  slice = function( i ) {
    var elem,
      results = [];
    for ( ; (elem = this[i]); i++ ) {
      results.push( elem );
    }
    return results;
  };
}

function Sizzle( selector, context, results, seed ) {
  results = results || [];
  context = context || document;
  var match, elem, xml, m,
    nodeType = context.nodeType;

  if ( !selector || typeof selector !== "string" ) {
    return results;
  }

  if ( nodeType !== 1 && nodeType !== 9 ) {
    return [];
  }

  xml = isXML( context );

  if ( !xml && !seed ) {
    if ( (match = rquickExpr.exec( selector )) ) {
      // Speed-up: Sizzle("#ID")
      if ( (m = match[1]) ) {
        if ( nodeType === 9 ) {
          elem = context.getElementById( m );
          // Check parentNode to catch when Blackberry 4.6 returns
          // nodes that are no longer in the document #6963
          if ( elem && elem.parentNode ) {
            // Handle the case where IE, Opera, and Webkit return items
            // by name instead of ID
            if ( elem.id === m ) {
              results.push( elem );
              return results;
            }
          } else {
            return results;
          }
        } else {
          // Context is not a document
          if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
            contains( context, elem ) && elem.id === m ) {
            results.push( elem );
            return results;
          }
        }

      // Speed-up: Sizzle("TAG")
      } else if ( match[2] ) {
        push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
        return results;

      // Speed-up: Sizzle(".CLASS")
      } else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
        push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
        return results;
      }
    }
  }

  // All others
  return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
}

Sizzle.matches = function( expr, elements ) {
  return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
  return Sizzle( expr, null, null, [ elem ] ).length > 0;
};

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
  return function( elem ) {
    var name = elem.nodeName.toLowerCase();
    return name === "input" && elem.type === type;
  };
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
  return function( elem ) {
    var name = elem.nodeName.toLowerCase();
    return (name === "input" || name === "button") && elem.type === type;
  };
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
  return markFunction(function( argument ) {
    argument = +argument;
    return markFunction(function( seed, matches ) {
      var j,
        matchIndexes = fn( [], seed.length, argument ),
        i = matchIndexes.length;

      // Match elements found at the specified indexes
      while ( i-- ) {
        if ( seed[ (j = matchIndexes[i]) ] ) {
          seed[j] = !(matches[j] = seed[j]);
        }
      }
    });
  });
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
  var node,
    ret = "",
    i = 0,
    nodeType = elem.nodeType;

  if ( nodeType ) {
    if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
      // Use textContent for elements
      // innerText usage removed for consistency of new lines (see #11153)
      if ( typeof elem.textContent === "string" ) {
        return elem.textContent;
      } else {
        // Traverse its children
        for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
          ret += getText( elem );
        }
      }
    } else if ( nodeType === 3 || nodeType === 4 ) {
      return elem.nodeValue;
    }
    // Do not include comment or processing instruction nodes
  } else {

    // If no nodeType, this is expected to be an array
    for ( ; (node = elem[i]); i++ ) {
      // Do not traverse comment nodes
      ret += getText( node );
    }
  }
  return ret;
};

isXML = Sizzle.isXML = function( elem ) {
  // documentElement is verified for cases where it doesn't yet exist
  // (such as loading iframes in IE - #4833)
  var documentElement = elem && (elem.ownerDocument || elem).documentElement;
  return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Element contains another
contains = Sizzle.contains = docElem.contains ?
  function( a, b ) {
    var adown = a.nodeType === 9 ? a.documentElement : a,
      bup = b && b.parentNode;
    return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
  } :
  docElem.compareDocumentPosition ?
  function( a, b ) {
    return b && !!( a.compareDocumentPosition( b ) & 16 );
  } :
  function( a, b ) {
    while ( (b = b.parentNode) ) {
      if ( b === a ) {
        return true;
      }
    }
    return false;
  };

Sizzle.attr = function( elem, name ) {
  var val,
    xml = isXML( elem );

  if ( !xml ) {
    name = name.toLowerCase();
  }
  if ( (val = Expr.attrHandle[ name ]) ) {
    return val( elem );
  }
  if ( xml || assertAttributes ) {
    return elem.getAttribute( name );
  }
  val = elem.getAttributeNode( name );
  return val ?
    typeof elem[ name ] === "boolean" ?
      elem[ name ] ? name : null :
      val.specified ? val.value : null :
    null;
};

Expr = Sizzle.selectors = {

  // Can be adjusted by the user
  cacheLength: 50,

  createPseudo: markFunction,

  match: matchExpr,

  // IE6/7 return a modified href
  attrHandle: assertHrefNotNormalized ?
    {} :
    {
      "href": function( elem ) {
        return elem.getAttribute( "href", 2 );
      },
      "type": function( elem ) {
        return elem.getAttribute("type");
      }
    },

  find: {
    "ID": assertGetIdNotName ?
      function( id, context, xml ) {
        if ( typeof context.getElementById !== strundefined && !xml ) {
          var m = context.getElementById( id );
          // Check parentNode to catch when Blackberry 4.6 returns
          // nodes that are no longer in the document #6963
          return m && m.parentNode ? [m] : [];
        }
      } :
      function( id, context, xml ) {
        if ( typeof context.getElementById !== strundefined && !xml ) {
          var m = context.getElementById( id );

          return m ?
            m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
              [m] :
              undefined :
            [];
        }
      },

    "TAG": assertTagNameNoComments ?
      function( tag, context ) {
        if ( typeof context.getElementsByTagName !== strundefined ) {
          return context.getElementsByTagName( tag );
        }
      } :
      function( tag, context ) {
        var results = context.getElementsByTagName( tag );

        // Filter out possible comments
        if ( tag === "*" ) {
          var elem,
            tmp = [],
            i = 0;

          for ( ; (elem = results[i]); i++ ) {
            if ( elem.nodeType === 1 ) {
              tmp.push( elem );
            }
          }

          return tmp;
        }
        return results;
      },

    "NAME": assertUsableName && function( tag, context ) {
      if ( typeof context.getElementsByName !== strundefined ) {
        return context.getElementsByName( name );
      }
    },

    "CLASS": assertUsableClassName && function( className, context, xml ) {
      if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
        return context.getElementsByClassName( className );
      }
    }
  },

  relative: {
    ">": { dir: "parentNode", first: true },
    " ": { dir: "parentNode" },
    "+": { dir: "previousSibling", first: true },
    "~": { dir: "previousSibling" }
  },

  preFilter: {
    "ATTR": function( match ) {
      match[1] = match[1].replace( rbackslash, "" );

      // Move the given value to match[3] whether quoted or unquoted
      match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

      if ( match[2] === "~=" ) {
        match[3] = " " + match[3] + " ";
      }

      return match.slice( 0, 4 );
    },

    "CHILD": function( match ) {
      /* matches from matchExpr["CHILD"]
        1 type (only|nth|...)
        2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
        3 xn-component of xn+y argument ([+-]?\d*n|)
        4 sign of xn-component
        5 x of xn-component
        6 sign of y-component
        7 y of y-component
      */
      match[1] = match[1].toLowerCase();

      if ( match[1] === "nth" ) {
        // nth-child requires argument
        if ( !match[2] ) {
          Sizzle.error( match[0] );
        }

        // numeric x and y parameters for Expr.filter.CHILD
        // remember that false/true cast respectively to 0/1
        match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
        match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

      // other types prohibit arguments
      } else if ( match[2] ) {
        Sizzle.error( match[0] );
      }

      return match;
    },

    "PSEUDO": function( match ) {
      var unquoted, excess;
      if ( matchExpr["CHILD"].test( match[0] ) ) {
        return null;
      }

      if ( match[3] ) {
        match[2] = match[3];
      } else if ( (unquoted = match[4]) ) {
        // Only check arguments that contain a pseudo
        if ( rpseudo.test(unquoted) &&
          // Get excess from tokenize (recursively)
          (excess = tokenize( unquoted, true )) &&
          // advance to the next closing parenthesis
          (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

          // excess is a negative index
          unquoted = unquoted.slice( 0, excess );
          match[0] = match[0].slice( 0, excess );
        }
        match[2] = unquoted;
      }

      // Return only captures needed by the pseudo filter method (type and argument)
      return match.slice( 0, 3 );
    }
  },

  filter: {
    "ID": assertGetIdNotName ?
      function( id ) {
        id = id.replace( rbackslash, "" );
        return function( elem ) {
          return elem.getAttribute("id") === id;
        };
      } :
      function( id ) {
        id = id.replace( rbackslash, "" );
        return function( elem ) {
          var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
          return node && node.value === id;
        };
      },

    "TAG": function( nodeName ) {
      if ( nodeName === "*" ) {
        return function() { return true; };
      }
      nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

      return function( elem ) {
        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
      };
    },

    "CLASS": function( className ) {
      var pattern = classCache[ expando ][ className ];
      if ( !pattern ) {
        pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
      }
      return function( elem ) {
        return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
      };
    },

    "ATTR": function( name, operator, check ) {
      return function( elem, context ) {
        var result = Sizzle.attr( elem, name );

        if ( result == null ) {
          return operator === "!=";
        }
        if ( !operator ) {
          return true;
        }

        result += "";

        return operator === "=" ? result === check :
          operator === "!=" ? result !== check :
          operator === "^=" ? check && result.indexOf( check ) === 0 :
          operator === "*=" ? check && result.indexOf( check ) > -1 :
          operator === "$=" ? check && result.substr( result.length - check.length ) === check :
          operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
          operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
          false;
      };
    },

    "CHILD": function( type, argument, first, last ) {

      if ( type === "nth" ) {
        return function( elem ) {
          var node, diff,
            parent = elem.parentNode;

          if ( first === 1 && last === 0 ) {
            return true;
          }

          if ( parent ) {
            diff = 0;
            for ( node = parent.firstChild; node; node = node.nextSibling ) {
              if ( node.nodeType === 1 ) {
                diff++;
                if ( elem === node ) {
                  break;
                }
              }
            }
          }

          // Incorporate the offset (or cast to NaN), then check against cycle size
          diff -= last;
          return diff === first || ( diff % first === 0 && diff / first >= 0 );
        };
      }

      return function( elem ) {
        var node = elem;

        switch ( type ) {
          case "only":
          case "first":
            while ( (node = node.previousSibling) ) {
              if ( node.nodeType === 1 ) {
                return false;
              }
            }

            if ( type === "first" ) {
              return true;
            }

            node = elem;

            /* falls through */
          case "last":
            while ( (node = node.nextSibling) ) {
              if ( node.nodeType === 1 ) {
                return false;
              }
            }

            return true;
        }
      };
    },

    "PSEUDO": function( pseudo, argument ) {
      // pseudo-class names are case-insensitive
      // http://www.w3.org/TR/selectors/#pseudo-classes
      // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
      // Remember that setFilters inherits from pseudos
      var args,
        fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
          Sizzle.error( "unsupported pseudo: " + pseudo );

      // The user may use createPseudo to indicate that
      // arguments are needed to create the filter function
      // just as Sizzle does
      if ( fn[ expando ] ) {
        return fn( argument );
      }

      // But maintain support for old signatures
      if ( fn.length > 1 ) {
        args = [ pseudo, pseudo, "", argument ];
        return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
          markFunction(function( seed, matches ) {
            var idx,
              matched = fn( seed, argument ),
              i = matched.length;
            while ( i-- ) {
              idx = indexOf.call( seed, matched[i] );
              seed[ idx ] = !( matches[ idx ] = matched[i] );
            }
          }) :
          function( elem ) {
            return fn( elem, 0, args );
          };
      }

      return fn;
    }
  },

  pseudos: {
    "not": markFunction(function( selector ) {
      // Trim the selector passed to compile
      // to avoid treating leading and trailing
      // spaces as combinators
      var input = [],
        results = [],
        matcher = compile( selector.replace( rtrim, "$1" ) );

      return matcher[ expando ] ?
        markFunction(function( seed, matches, context, xml ) {
          var elem,
            unmatched = matcher( seed, null, xml, [] ),
            i = seed.length;

          // Match elements unmatched by `matcher`
          while ( i-- ) {
            if ( (elem = unmatched[i]) ) {
              seed[i] = !(matches[i] = elem);
            }
          }
        }) :
        function( elem, context, xml ) {
          input[0] = elem;
          matcher( input, null, xml, results );
          return !results.pop();
        };
    }),

    "has": markFunction(function( selector ) {
      return function( elem ) {
        return Sizzle( selector, elem ).length > 0;
      };
    }),

    "contains": markFunction(function( text ) {
      return function( elem ) {
        return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
      };
    }),

    "enabled": function( elem ) {
      return elem.disabled === false;
    },

    "disabled": function( elem ) {
      return elem.disabled === true;
    },

    "checked": function( elem ) {
      // In CSS3, :checked should return both checked and selected elements
      // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
      var nodeName = elem.nodeName.toLowerCase();
      return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
    },

    "selected": function( elem ) {
      // Accessing this property makes selected-by-default
      // options in Safari work properly
      if ( elem.parentNode ) {
        elem.parentNode.selectedIndex;
      }

      return elem.selected === true;
    },

    "parent": function( elem ) {
      return !Expr.pseudos["empty"]( elem );
    },

    "empty": function( elem ) {
      // http://www.w3.org/TR/selectors/#empty-pseudo
      // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
      //   not comment, processing instructions, or others
      // Thanks to Diego Perini for the nodeName shortcut
      //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
      var nodeType;
      elem = elem.firstChild;
      while ( elem ) {
        if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
          return false;
        }
        elem = elem.nextSibling;
      }
      return true;
    },

    "header": function( elem ) {
      return rheader.test( elem.nodeName );
    },

    "text": function( elem ) {
      var type, attr;
      // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
      // use getAttribute instead to test this case
      return elem.nodeName.toLowerCase() === "input" &&
        (type = elem.type) === "text" &&
        ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
    },

    // Input types
    "radio": createInputPseudo("radio"),
    "checkbox": createInputPseudo("checkbox"),
    "file": createInputPseudo("file"),
    "password": createInputPseudo("password"),
    "image": createInputPseudo("image"),

    "submit": createButtonPseudo("submit"),
    "reset": createButtonPseudo("reset"),

    "button": function( elem ) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === "button" || name === "button";
    },

    "input": function( elem ) {
      return rinputs.test( elem.nodeName );
    },

    "focus": function( elem ) {
      var doc = elem.ownerDocument;
      return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
    },

    "active": function( elem ) {
      return elem === elem.ownerDocument.activeElement;
    },

    // Positional types
    "first": createPositionalPseudo(function( matchIndexes, length, argument ) {
      return [ 0 ];
    }),

    "last": createPositionalPseudo(function( matchIndexes, length, argument ) {
      return [ length - 1 ];
    }),

    "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
      return [ argument < 0 ? argument + length : argument ];
    }),

    "even": createPositionalPseudo(function( matchIndexes, length, argument ) {
      for ( var i = 0; i < length; i += 2 ) {
        matchIndexes.push( i );
      }
      return matchIndexes;
    }),

    "odd": createPositionalPseudo(function( matchIndexes, length, argument ) {
      for ( var i = 1; i < length; i += 2 ) {
        matchIndexes.push( i );
      }
      return matchIndexes;
    }),

    "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
      for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
        matchIndexes.push( i );
      }
      return matchIndexes;
    }),

    "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
      for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
        matchIndexes.push( i );
      }
      return matchIndexes;
    })
  }
};

function siblingCheck( a, b, ret ) {
  if ( a === b ) {
    return ret;
  }

  var cur = a.nextSibling;

  while ( cur ) {
    if ( cur === b ) {
      return -1;
    }

    cur = cur.nextSibling;
  }

  return 1;
}

sortOrder = docElem.compareDocumentPosition ?
  function( a, b ) {
    if ( a === b ) {
      hasDuplicate = true;
      return 0;
    }

    return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
      a.compareDocumentPosition :
      a.compareDocumentPosition(b) & 4
    ) ? -1 : 1;
  } :
  function( a, b ) {
    // The nodes are identical, we can exit early
    if ( a === b ) {
      hasDuplicate = true;
      return 0;

    // Fallback to using sourceIndex (in IE) if it's available on both nodes
    } else if ( a.sourceIndex && b.sourceIndex ) {
      return a.sourceIndex - b.sourceIndex;
    }

    var al, bl,
      ap = [],
      bp = [],
      aup = a.parentNode,
      bup = b.parentNode,
      cur = aup;

    // If the nodes are siblings (or identical) we can do a quick check
    if ( aup === bup ) {
      return siblingCheck( a, b );

    // If no parents were found then the nodes are disconnected
    } else if ( !aup ) {
      return -1;

    } else if ( !bup ) {
      return 1;
    }

    // Otherwise they're somewhere else in the tree so we need
    // to build up a full list of the parentNodes for comparison
    while ( cur ) {
      ap.unshift( cur );
      cur = cur.parentNode;
    }

    cur = bup;

    while ( cur ) {
      bp.unshift( cur );
      cur = cur.parentNode;
    }

    al = ap.length;
    bl = bp.length;

    // Start walking down the tree looking for a discrepancy
    for ( var i = 0; i < al && i < bl; i++ ) {
      if ( ap[i] !== bp[i] ) {
        return siblingCheck( ap[i], bp[i] );
      }
    }

    // We ended someplace up the tree so do a sibling check
    return i === al ?
      siblingCheck( a, bp[i], -1 ) :
      siblingCheck( ap[i], b, 1 );
  };

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
[0, 0].sort( sortOrder );
baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
  var elem,
    i = 1;

  hasDuplicate = baseHasDuplicate;
  results.sort( sortOrder );

  if ( hasDuplicate ) {
    for ( ; (elem = results[i]); i++ ) {
      if ( elem === results[ i - 1 ] ) {
        results.splice( i--, 1 );
      }
    }
  }

  return results;
};

Sizzle.error = function( msg ) {
  throw new Error( "Syntax error, unrecognized expression: " + msg );
};

function tokenize( selector, parseOnly ) {
  var matched, match, tokens, type, soFar, groups, preFilters,
    cached = tokenCache[ expando ][ selector ];

  if ( cached ) {
    return parseOnly ? 0 : cached.slice( 0 );
  }

  soFar = selector;
  groups = [];
  preFilters = Expr.preFilter;

  while ( soFar ) {

    // Comma and first run
    if ( !matched || (match = rcomma.exec( soFar )) ) {
      if ( match ) {
        soFar = soFar.slice( match[0].length );
      }
      groups.push( tokens = [] );
    }

    matched = false;

    // Combinators
    if ( (match = rcombinators.exec( soFar )) ) {
      tokens.push( matched = new Token( match.shift() ) );
      soFar = soFar.slice( matched.length );

      // Cast descendant combinators to space
      matched.type = match[0].replace( rtrim, " " );
    }

    // Filters
    for ( type in Expr.filter ) {
      if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
        // The last two arguments here are (context, xml) for backCompat
        (match = preFilters[ type ]( match, document, true ))) ) {

        tokens.push( matched = new Token( match.shift() ) );
        soFar = soFar.slice( matched.length );
        matched.type = type;
        matched.matches = match;
      }
    }

    if ( !matched ) {
      break;
    }
  }

  // Return the length of the invalid excess
  // if we're just parsing
  // Otherwise, throw an error or return tokens
  return parseOnly ?
    soFar.length :
    soFar ?
      Sizzle.error( selector ) :
      // Cache the tokens
      tokenCache( selector, groups ).slice( 0 );
}

function addCombinator( matcher, combinator, base ) {
  var dir = combinator.dir,
    checkNonElements = base && combinator.dir === "parentNode",
    doneName = done++;

  return combinator.first ?
    // Check against closest ancestor/preceding element
    function( elem, context, xml ) {
      while ( (elem = elem[ dir ]) ) {
        if ( checkNonElements || elem.nodeType === 1  ) {
          return matcher( elem, context, xml );
        }
      }
    } :

    // Check against all ancestor/preceding elements
    function( elem, context, xml ) {
      // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
      if ( !xml ) {
        var cache,
          dirkey = dirruns + " " + doneName + " ",
          cachedkey = dirkey + cachedruns;
        while ( (elem = elem[ dir ]) ) {
          if ( checkNonElements || elem.nodeType === 1 ) {
            if ( (cache = elem[ expando ]) === cachedkey ) {
              return elem.sizset;
            } else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
              if ( elem.sizset ) {
                return elem;
              }
            } else {
              elem[ expando ] = cachedkey;
              if ( matcher( elem, context, xml ) ) {
                elem.sizset = true;
                return elem;
              }
              elem.sizset = false;
            }
          }
        }
      } else {
        while ( (elem = elem[ dir ]) ) {
          if ( checkNonElements || elem.nodeType === 1 ) {
            if ( matcher( elem, context, xml ) ) {
              return elem;
            }
          }
        }
      }
    };
}

function elementMatcher( matchers ) {
  return matchers.length > 1 ?
    function( elem, context, xml ) {
      var i = matchers.length;
      while ( i-- ) {
        if ( !matchers[i]( elem, context, xml ) ) {
          return false;
        }
      }
      return true;
    } :
    matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
  var elem,
    newUnmatched = [],
    i = 0,
    len = unmatched.length,
    mapped = map != null;

  for ( ; i < len; i++ ) {
    if ( (elem = unmatched[i]) ) {
      if ( !filter || filter( elem, context, xml ) ) {
        newUnmatched.push( elem );
        if ( mapped ) {
          map.push( i );
        }
      }
    }
  }

  return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
  if ( postFilter && !postFilter[ expando ] ) {
    postFilter = setMatcher( postFilter );
  }
  if ( postFinder && !postFinder[ expando ] ) {
    postFinder = setMatcher( postFinder, postSelector );
  }
  return markFunction(function( seed, results, context, xml ) {
    // Positional selectors apply to seed elements, so it is invalid to follow them with relative ones
    if ( seed && postFinder ) {
      return;
    }

    var i, elem, postFilterIn,
      preMap = [],
      postMap = [],
      preexisting = results.length,

      // Get initial elements from seed or context
      elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [], seed ),

      // Prefilter to get matcher input, preserving a map for seed-results synchronization
      matcherIn = preFilter && ( seed || !selector ) ?
        condense( elems, preMap, preFilter, context, xml ) :
        elems,

      matcherOut = matcher ?
        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

          // ...intermediate processing is necessary
          [] :

          // ...otherwise use results directly
          results :
        matcherIn;

    // Find primary matches
    if ( matcher ) {
      matcher( matcherIn, matcherOut, context, xml );
    }

    // Apply postFilter
    if ( postFilter ) {
      postFilterIn = condense( matcherOut, postMap );
      postFilter( postFilterIn, [], context, xml );

      // Un-match failing elements by moving them back to matcherIn
      i = postFilterIn.length;
      while ( i-- ) {
        if ( (elem = postFilterIn[i]) ) {
          matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
        }
      }
    }

    // Keep seed and results synchronized
    if ( seed ) {
      // Ignore postFinder because it can't coexist with seed
      i = preFilter && matcherOut.length;
      while ( i-- ) {
        if ( (elem = matcherOut[i]) ) {
          seed[ preMap[i] ] = !(results[ preMap[i] ] = elem);
        }
      }
    } else {
      matcherOut = condense(
        matcherOut === results ?
          matcherOut.splice( preexisting, matcherOut.length ) :
          matcherOut
      );
      if ( postFinder ) {
        postFinder( null, results, matcherOut, xml );
      } else {
        push.apply( results, matcherOut );
      }
    }
  });
}

function matcherFromTokens( tokens ) {
  var checkContext, matcher, j,
    len = tokens.length,
    leadingRelative = Expr.relative[ tokens[0].type ],
    implicitRelative = leadingRelative || Expr.relative[" "],
    i = leadingRelative ? 1 : 0,

    // The foundational matcher ensures that elements are reachable from top-level context(s)
    matchContext = addCombinator( function( elem ) {
      return elem === checkContext;
    }, implicitRelative, true ),
    matchAnyContext = addCombinator( function( elem ) {
      return indexOf.call( checkContext, elem ) > -1;
    }, implicitRelative, true ),
    matchers = [ function( elem, context, xml ) {
      return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
        (checkContext = context).nodeType ?
          matchContext( elem, context, xml ) :
          matchAnyContext( elem, context, xml ) );
    } ];

  for ( ; i < len; i++ ) {
    if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
      matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
    } else {
      // The concatenated values are (context, xml) for backCompat
      matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

      // Return special upon seeing a positional matcher
      if ( matcher[ expando ] ) {
        // Find the next relative operator (if any) for proper handling
        j = ++i;
        for ( ; j < len; j++ ) {
          if ( Expr.relative[ tokens[j].type ] ) {
            break;
          }
        }
        return setMatcher(
          i > 1 && elementMatcher( matchers ),
          i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
          matcher,
          i < j && matcherFromTokens( tokens.slice( i, j ) ),
          j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
          j < len && tokens.join("")
        );
      }
      matchers.push( matcher );
    }
  }

  return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
  var bySet = setMatchers.length > 0,
    byElement = elementMatchers.length > 0,
    superMatcher = function( seed, context, xml, results, expandContext ) {
      var elem, j, matcher,
        setMatched = [],
        matchedCount = 0,
        i = "0",
        unmatched = seed && [],
        outermost = expandContext != null,
        contextBackup = outermostContext,
        // We must always have either seed elements or context
        elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
        // Nested matchers should use non-integer dirruns
        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

      if ( outermost ) {
        outermostContext = context !== document && context;
        cachedruns = superMatcher.el;
      }

      // Add elements passing elementMatchers directly to results
      for ( ; (elem = elems[i]) != null; i++ ) {
        if ( byElement && elem ) {
          for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
            if ( matcher( elem, context, xml ) ) {
              results.push( elem );
              break;
            }
          }
          if ( outermost ) {
            dirruns = dirrunsUnique;
            cachedruns = ++superMatcher.el;
          }
        }

        // Track unmatched elements for set filters
        if ( bySet ) {
          // They will have gone through all possible matchers
          if ( (elem = !matcher && elem) ) {
            matchedCount--;
          }

          // Lengthen the array for every element, matched or not
          if ( seed ) {
            unmatched.push( elem );
          }
        }
      }

      // Apply set filters to unmatched elements
      matchedCount += i;
      if ( bySet && i !== matchedCount ) {
        for ( j = 0; (matcher = setMatchers[j]); j++ ) {
          matcher( unmatched, setMatched, context, xml );
        }

        if ( seed ) {
          // Reintegrate element matches to eliminate the need for sorting
          if ( matchedCount > 0 ) {
            while ( i-- ) {
              if ( !(unmatched[i] || setMatched[i]) ) {
                setMatched[i] = pop.call( results );
              }
            }
          }

          // Discard index placeholder values to get only actual matches
          setMatched = condense( setMatched );
        }

        // Add matches to results
        push.apply( results, setMatched );

        // Seedless set matches succeeding multiple successful matchers stipulate sorting
        if ( outermost && !seed && setMatched.length > 0 &&
          ( matchedCount + setMatchers.length ) > 1 ) {

          Sizzle.uniqueSort( results );
        }
      }

      // Override manipulation of globals by nested matchers
      if ( outermost ) {
        dirruns = dirrunsUnique;
        outermostContext = contextBackup;
      }

      return unmatched;
    };

  superMatcher.el = 0;
  return bySet ?
    markFunction( superMatcher ) :
    superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
  var i,
    setMatchers = [],
    elementMatchers = [],
    cached = compilerCache[ expando ][ selector ];

  if ( !cached ) {
    // Generate a function of recursive functions that can be used to check each element
    if ( !group ) {
      group = tokenize( selector );
    }
    i = group.length;
    while ( i-- ) {
      cached = matcherFromTokens( group[i] );
      if ( cached[ expando ] ) {
        setMatchers.push( cached );
      } else {
        elementMatchers.push( cached );
      }
    }

    // Cache the compiled function
    cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
  }
  return cached;
};

function multipleContexts( selector, contexts, results, seed ) {
  var i = 0,
    len = contexts.length;
  for ( ; i < len; i++ ) {
    Sizzle( selector, contexts[i], results, seed );
  }
  return results;
}

function select( selector, context, results, seed, xml ) {
  var i, tokens, token, type, find,
    match = tokenize( selector ),
    j = match.length;

  if ( !seed ) {
    // Try to minimize operations if there is only one group
    if ( match.length === 1 ) {

      // Take a shortcut and set the context if the root selector is an ID
      tokens = match[0] = match[0].slice( 0 );
      if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
          context.nodeType === 9 && !xml &&
          Expr.relative[ tokens[1].type ] ) {

        context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
        if ( !context ) {
          return results;
        }

        selector = selector.slice( tokens.shift().length );
      }

      // Fetch a seed set for right-to-left matching
      for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
        token = tokens[i];

        // Abort if we hit a combinator
        if ( Expr.relative[ (type = token.type) ] ) {
          break;
        }
        if ( (find = Expr.find[ type ]) ) {
          // Search, expanding context for leading sibling combinators
          if ( (seed = find(
            token.matches[0].replace( rbackslash, "" ),
            rsibling.test( tokens[0].type ) && context.parentNode || context,
            xml
          )) ) {

            // If seed is empty or no tokens remain, we can return early
            tokens.splice( i, 1 );
            selector = seed.length && tokens.join("");
            if ( !selector ) {
              push.apply( results, slice.call( seed, 0 ) );
              return results;
            }

            break;
          }
        }
      }
    }
  }

  // Compile and execute a filtering function
  // Provide `match` to avoid retokenization if we modified the selector above
  compile( selector, match )(
    seed,
    context,
    xml,
    results,
    rsibling.test( selector )
  );
  return results;
}

if ( document.querySelectorAll ) {
  (function() {
    var disconnectedMatch,
      oldSelect = select,
      rescape = /'|\\/g,
      rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

      // qSa(:focus) reports false when true (Chrome 21),
      // A support test would require too much code (would include document ready)
      rbuggyQSA = [":focus"],

      // matchesSelector(:focus) reports false when true (Chrome 21),
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
      // A support test would require too much code (would include document ready)
      // just skip matchesSelector for :active
      rbuggyMatches = [ ":active", ":focus" ],
      matches = docElem.matchesSelector ||
        docElem.mozMatchesSelector ||
        docElem.webkitMatchesSelector ||
        docElem.oMatchesSelector ||
        docElem.msMatchesSelector;

    // Build QSA regex
    // Regex strategy adopted from Diego Perini
    assert(function( div ) {
      // Select is set to empty string on purpose
      // This is to test IE's treatment of not explictly
      // setting a boolean content attribute,
      // since its presence should be enough
      // http://bugs.jquery.com/ticket/12359
      div.innerHTML = "<select><option selected=''></option></select>";

      // IE8 - Some boolean attributes are not treated correctly
      if ( !div.querySelectorAll("[selected]").length ) {
        rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
      }

      // Webkit/Opera - :checked should return selected option elements
      // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
      // IE8 throws error here (do not put tests after this one)
      if ( !div.querySelectorAll(":checked").length ) {
        rbuggyQSA.push(":checked");
      }
    });

    assert(function( div ) {

      // Opera 10-12/IE9 - ^= $= *= and empty values
      // Should not select anything
      div.innerHTML = "<p test=''></p>";
      if ( div.querySelectorAll("[test^='']").length ) {
        rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
      }

      // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
      // IE8 throws error here (do not put tests after this one)
      div.innerHTML = "<input type='hidden'/>";
      if ( !div.querySelectorAll(":enabled").length ) {
        rbuggyQSA.push(":enabled", ":disabled");
      }
    });

    // rbuggyQSA always contains :focus, so no need for a length check
    rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

    select = function( selector, context, results, seed, xml ) {
      // Only use querySelectorAll when not filtering,
      // when this is not xml,
      // and when no QSA bugs apply
      if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
        var groups, i,
          old = true,
          nid = expando,
          newContext = context,
          newSelector = context.nodeType === 9 && selector;

        // qSA works strangely on Element-rooted queries
        // We can work around this by specifying an extra ID on the root
        // and working up from there (Thanks to Andrew Dupont for the technique)
        // IE 8 doesn't work on object elements
        if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
          groups = tokenize( selector );

          if ( (old = context.getAttribute("id")) ) {
            nid = old.replace( rescape, "\\$&" );
          } else {
            context.setAttribute( "id", nid );
          }
          nid = "[id='" + nid + "'] ";

          i = groups.length;
          while ( i-- ) {
            groups[i] = nid + groups[i].join("");
          }
          newContext = rsibling.test( selector ) && context.parentNode || context;
          newSelector = groups.join(",");
        }

        if ( newSelector ) {
          try {
            push.apply( results, slice.call( newContext.querySelectorAll(
              newSelector
            ), 0 ) );
            return results;
          } catch(qsaError) {
          } finally {
            if ( !old ) {
              context.removeAttribute("id");
            }
          }
        }
      }

      return oldSelect( selector, context, results, seed, xml );
    };

    if ( matches ) {
      assert(function( div ) {
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node (IE 9)
        disconnectedMatch = matches.call( div, "div" );

        // This should fail with an exception
        // Gecko does not error, returns false instead
        try {
          matches.call( div, "[test!='']:sizzle" );
          rbuggyMatches.push( "!=", pseudos );
        } catch ( e ) {}
      });

      // rbuggyMatches always contains :active and :focus, so no need for a length check
      rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

      Sizzle.matchesSelector = function( elem, expr ) {
        // Make sure that attribute selectors are quoted
        expr = expr.replace( rattributeQuotes, "='$1']" );

        // rbuggyMatches always contains :active, so no need for an existence check
        if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
          try {
            var ret = matches.call( elem, expr );

            // IE 9's matchesSelector returns false on disconnected nodes
            if ( ret || disconnectedMatch ||
                // As well, disconnected nodes are said to be in a document
                // fragment in IE 9
                elem.document && elem.document.nodeType !== 11 ) {
              return ret;
            }
          } catch(e) {}
        }

        return Sizzle( expr, null, null, [ elem ] ).length > 0;
      };
    }
  })();
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
  rparentsprev = /^(?:parents|prev(?:Until|All))/,
  isSimple = /^.[^:#\[\.,]*$/,
  rneedsContext = jQuery.expr.match.needsContext,
  // methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };

jQuery.fn.extend({
  find: function( selector ) {
    var i, l, length, n, r, ret,
      self = this;

    if ( typeof selector !== "string" ) {
      return jQuery( selector ).filter(function() {
        for ( i = 0, l = self.length; i < l; i++ ) {
          if ( jQuery.contains( self[ i ], this ) ) {
            return true;
          }
        }
      });
    }

    ret = this.pushStack( "", "find", selector );

    for ( i = 0, l = this.length; i < l; i++ ) {
      length = ret.length;
      jQuery.find( selector, this[i], ret );

      if ( i > 0 ) {
        // Make sure that the results are unique
        for ( n = length; n < ret.length; n++ ) {
          for ( r = 0; r < length; r++ ) {
            if ( ret[r] === ret[n] ) {
              ret.splice(n--, 1);
              break;
            }
          }
        }
      }
    }

    return ret;
  },

  has: function( target ) {
    var i,
      targets = jQuery( target, this ),
      len = targets.length;

    return this.filter(function() {
      for ( i = 0; i < len; i++ ) {
        if ( jQuery.contains( this, targets[i] ) ) {
          return true;
        }
      }
    });
  },

  not: function( selector ) {
    return this.pushStack( winnow(this, selector, false), "not", selector);
  },

  filter: function( selector ) {
    return this.pushStack( winnow(this, selector, true), "filter", selector );
  },

  is: function( selector ) {
    return !!selector && (
      typeof selector === "string" ?
        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        rneedsContext.test( selector ) ?
          jQuery( selector, this.context ).index( this[0] ) >= 0 :
          jQuery.filter( selector, this ).length > 0 :
        this.filter( selector ).length > 0 );
  },

  closest: function( selectors, context ) {
    var cur,
      i = 0,
      l = this.length,
      ret = [],
      pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
        jQuery( selectors, context || this.context ) :
        0;

    for ( ; i < l; i++ ) {
      cur = this[i];

      while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
        if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
          ret.push( cur );
          break;
        }
        cur = cur.parentNode;
      }
    }

    ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

    return this.pushStack( ret, "closest", selectors );
  },

  // Determine the position of an element within
  // the matched set of elements
  index: function( elem ) {

    // No argument, return index in parent
    if ( !elem ) {
      return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
    }

    // index in selector
    if ( typeof elem === "string" ) {
      return jQuery.inArray( this[0], jQuery( elem ) );
    }

    // Locate the position of the desired element
    return jQuery.inArray(
      // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem, this );
  },

  add: function( selector, context ) {
    var set = typeof selector === "string" ?
        jQuery( selector, context ) :
        jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
      all = jQuery.merge( this.get(), set );

    return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
      all :
      jQuery.unique( all ) );
  },

  addBack: function( selector ) {
    return this.add( selector == null ?
      this.prevObject : this.prevObject.filter(selector)
    );
  }
});

jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
  return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

function sibling( cur, dir ) {
  do {
    cur = cur[ dir ];
  } while ( cur && cur.nodeType !== 1 );

  return cur;
}

jQuery.each({
  parent: function( elem ) {
    var parent = elem.parentNode;
    return parent && parent.nodeType !== 11 ? parent : null;
  },
  parents: function( elem ) {
    return jQuery.dir( elem, "parentNode" );
  },
  parentsUntil: function( elem, i, until ) {
    return jQuery.dir( elem, "parentNode", until );
  },
  next: function( elem ) {
    return sibling( elem, "nextSibling" );
  },
  prev: function( elem ) {
    return sibling( elem, "previousSibling" );
  },
  nextAll: function( elem ) {
    return jQuery.dir( elem, "nextSibling" );
  },
  prevAll: function( elem ) {
    return jQuery.dir( elem, "previousSibling" );
  },
  nextUntil: function( elem, i, until ) {
    return jQuery.dir( elem, "nextSibling", until );
  },
  prevUntil: function( elem, i, until ) {
    return jQuery.dir( elem, "previousSibling", until );
  },
  siblings: function( elem ) {
    return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
  },
  children: function( elem ) {
    return jQuery.sibling( elem.firstChild );
  },
  contents: function( elem ) {
    return jQuery.nodeName( elem, "iframe" ) ?
      elem.contentDocument || elem.contentWindow.document :
      jQuery.merge( [], elem.childNodes );
  }
}, function( name, fn ) {
  jQuery.fn[ name ] = function( until, selector ) {
    var ret = jQuery.map( this, fn, until );

    if ( !runtil.test( name ) ) {
      selector = until;
    }

    if ( selector && typeof selector === "string" ) {
      ret = jQuery.filter( selector, ret );
    }

    ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

    if ( this.length > 1 && rparentsprev.test( name ) ) {
      ret = ret.reverse();
    }

    return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
  };
});

jQuery.extend({
  filter: function( expr, elems, not ) {
    if ( not ) {
      expr = ":not(" + expr + ")";
    }

    return elems.length === 1 ?
      jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
      jQuery.find.matches(expr, elems);
  },

  dir: function( elem, dir, until ) {
    var matched = [],
      cur = elem[ dir ];

    while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
      if ( cur.nodeType === 1 ) {
        matched.push( cur );
      }
      cur = cur[dir];
    }
    return matched;
  },

  sibling: function( n, elem ) {
    var r = [];

    for ( ; n; n = n.nextSibling ) {
      if ( n.nodeType === 1 && n !== elem ) {
        r.push( n );
      }
    }

    return r;
  }
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

  // Can't pass null or undefined to indexOf in Firefox 4
  // Set to 0 to skip string check
  qualifier = qualifier || 0;

  if ( jQuery.isFunction( qualifier ) ) {
    return jQuery.grep(elements, function( elem, i ) {
      var retVal = !!qualifier.call( elem, i, elem );
      return retVal === keep;
    });

  } else if ( qualifier.nodeType ) {
    return jQuery.grep(elements, function( elem, i ) {
      return ( elem === qualifier ) === keep;
    });

  } else if ( typeof qualifier === "string" ) {
    var filtered = jQuery.grep(elements, function( elem ) {
      return elem.nodeType === 1;
    });

    if ( isSimple.test( qualifier ) ) {
      return jQuery.filter(qualifier, filtered, !keep);
    } else {
      qualifier = jQuery.filter( qualifier, filtered );
    }
  }

  return jQuery.grep(elements, function( elem, i ) {
    return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
  });
}
function createSafeFragment( document ) {
  var list = nodeNames.split( "|" ),
  safeFrag = document.createDocumentFragment();

  if ( safeFrag.createElement ) {
    while ( list.length ) {
      safeFrag.createElement(
        list.pop()
      );
    }
  }
  return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
    "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
  rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
  rleadingWhitespace = /^\s+/,
  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
  rtagName = /<([\w:]+)/,
  rtbody = /<tbody/i,
  rhtml = /<|&#?\w+;/,
  rnoInnerhtml = /<(?:script|style|link)/i,
  rnocache = /<(?:script|object|embed|option|style)/i,
  rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
  rcheckableType = /^(?:checkbox|radio)$/,
  // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
  rscriptType = /\/(java|ecma)script/i,
  rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
  wrapMap = {
    option: [ 1, "<select multiple='multiple'>", "</select>" ],
    legend: [ 1, "<fieldset>", "</fieldset>" ],
    thead: [ 1, "<table>", "</table>" ],
    tr: [ 2, "<table><tbody>", "</tbody></table>" ],
    td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
    col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
    area: [ 1, "<map>", "</map>" ],
    _default: [ 0, "", "" ]
  },
  safeFragment = createSafeFragment( document ),
  fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
if ( !jQuery.support.htmlSerialize ) {
  wrapMap._default = [ 1, "X<div>", "</div>" ];
}

jQuery.fn.extend({
  text: function( value ) {
    return jQuery.access( this, function( value ) {
      return value === undefined ?
        jQuery.text( this ) :
        this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
    }, null, value, arguments.length );
  },

  wrapAll: function( html ) {
    if ( jQuery.isFunction( html ) ) {
      return this.each(function(i) {
        jQuery(this).wrapAll( html.call(this, i) );
      });
    }

    if ( this[0] ) {
      // The elements to wrap the target around
      var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

      if ( this[0].parentNode ) {
        wrap.insertBefore( this[0] );
      }

      wrap.map(function() {
        var elem = this;

        while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
          elem = elem.firstChild;
        }

        return elem;
      }).append( this );
    }

    return this;
  },

  wrapInner: function( html ) {
    if ( jQuery.isFunction( html ) ) {
      return this.each(function(i) {
        jQuery(this).wrapInner( html.call(this, i) );
      });
    }

    return this.each(function() {
      var self = jQuery( this ),
        contents = self.contents();

      if ( contents.length ) {
        contents.wrapAll( html );

      } else {
        self.append( html );
      }
    });
  },

  wrap: function( html ) {
    var isFunction = jQuery.isFunction( html );

    return this.each(function(i) {
      jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
    });
  },

  unwrap: function() {
    return this.parent().each(function() {
      if ( !jQuery.nodeName( this, "body" ) ) {
        jQuery( this ).replaceWith( this.childNodes );
      }
    }).end();
  },

  append: function() {
    return this.domManip(arguments, true, function( elem ) {
      if ( this.nodeType === 1 || this.nodeType === 11 ) {
        this.appendChild( elem );
      }
    });
  },

  prepend: function() {
    return this.domManip(arguments, true, function( elem ) {
      if ( this.nodeType === 1 || this.nodeType === 11 ) {
        this.insertBefore( elem, this.firstChild );
      }
    });
  },

  before: function() {
    if ( !isDisconnected( this[0] ) ) {
      return this.domManip(arguments, false, function( elem ) {
        this.parentNode.insertBefore( elem, this );
      });
    }

    if ( arguments.length ) {
      var set = jQuery.clean( arguments );
      return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
    }
  },

  after: function() {
    if ( !isDisconnected( this[0] ) ) {
      return this.domManip(arguments, false, function( elem ) {
        this.parentNode.insertBefore( elem, this.nextSibling );
      });
    }

    if ( arguments.length ) {
      var set = jQuery.clean( arguments );
      return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
    }
  },

  // keepData is for internal use only--do not document
  remove: function( selector, keepData ) {
    var elem,
      i = 0;

    for ( ; (elem = this[i]) != null; i++ ) {
      if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
        if ( !keepData && elem.nodeType === 1 ) {
          jQuery.cleanData( elem.getElementsByTagName("*") );
          jQuery.cleanData( [ elem ] );
        }

        if ( elem.parentNode ) {
          elem.parentNode.removeChild( elem );
        }
      }
    }

    return this;
  },

  empty: function() {
    var elem,
      i = 0;

    for ( ; (elem = this[i]) != null; i++ ) {
      // Remove element nodes and prevent memory leaks
      if ( elem.nodeType === 1 ) {
        jQuery.cleanData( elem.getElementsByTagName("*") );
      }

      // Remove any remaining nodes
      while ( elem.firstChild ) {
        elem.removeChild( elem.firstChild );
      }
    }

    return this;
  },

  clone: function( dataAndEvents, deepDataAndEvents ) {
    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

    return this.map( function () {
      return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
    });
  },

  html: function( value ) {
    return jQuery.access( this, function( value ) {
      var elem = this[0] || {},
        i = 0,
        l = this.length;

      if ( value === undefined ) {
        return elem.nodeType === 1 ?
          elem.innerHTML.replace( rinlinejQuery, "" ) :
          undefined;
      }

      // See if we can take a shortcut and just use innerHTML
      if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
        ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
        ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
        !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

        value = value.replace( rxhtmlTag, "<$1></$2>" );

        try {
          for (; i < l; i++ ) {
            // Remove element nodes and prevent memory leaks
            elem = this[i] || {};
            if ( elem.nodeType === 1 ) {
              jQuery.cleanData( elem.getElementsByTagName( "*" ) );
              elem.innerHTML = value;
            }
          }

          elem = 0;

        // If using innerHTML throws an exception, use the fallback method
        } catch(e) {}
      }

      if ( elem ) {
        this.empty().append( value );
      }
    }, null, value, arguments.length );
  },

  replaceWith: function( value ) {
    if ( !isDisconnected( this[0] ) ) {
      // Make sure that the elements are removed from the DOM before they are inserted
      // this can help fix replacing a parent with child elements
      if ( jQuery.isFunction( value ) ) {
        return this.each(function(i) {
          var self = jQuery(this), old = self.html();
          self.replaceWith( value.call( this, i, old ) );
        });
      }

      if ( typeof value !== "string" ) {
        value = jQuery( value ).detach();
      }

      return this.each(function() {
        var next = this.nextSibling,
          parent = this.parentNode;

        jQuery( this ).remove();

        if ( next ) {
          jQuery(next).before( value );
        } else {
          jQuery(parent).append( value );
        }
      });
    }

    return this.length ?
      this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
      this;
  },

  detach: function( selector ) {
    return this.remove( selector, true );
  },

  domManip: function( args, table, callback ) {

    // Flatten any nested arrays
    args = [].concat.apply( [], args );

    var results, first, fragment, iNoClone,
      i = 0,
      value = args[0],
      scripts = [],
      l = this.length;

    // We can't cloneNode fragments that contain checked, in WebKit
    if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
      return this.each(function() {
        jQuery(this).domManip( args, table, callback );
      });
    }

    if ( jQuery.isFunction(value) ) {
      return this.each(function(i) {
        var self = jQuery(this);
        args[0] = value.call( this, i, table ? self.html() : undefined );
        self.domManip( args, table, callback );
      });
    }

    if ( this[0] ) {
      results = jQuery.buildFragment( args, this, scripts );
      fragment = results.fragment;
      first = fragment.firstChild;

      if ( fragment.childNodes.length === 1 ) {
        fragment = first;
      }

      if ( first ) {
        table = table && jQuery.nodeName( first, "tr" );

        // Use the original fragment for the last item instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).
        // Fragments from the fragment cache must always be cloned and never used in place.
        for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
          callback.call(
            table && jQuery.nodeName( this[i], "table" ) ?
              findOrAppend( this[i], "tbody" ) :
              this[i],
            i === iNoClone ?
              fragment :
              jQuery.clone( fragment, true, true )
          );
        }
      }

      // Fix #11809: Avoid leaking memory
      fragment = first = null;

      if ( scripts.length ) {
        jQuery.each( scripts, function( i, elem ) {
          if ( elem.src ) {
            if ( jQuery.ajax ) {
              jQuery.ajax({
                url: elem.src,
                type: "GET",
                dataType: "script",
                async: false,
                global: false,
                "throws": true
              });
            } else {
              jQuery.error("no ajax");
            }
          } else {
            jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
          }

          if ( elem.parentNode ) {
            elem.parentNode.removeChild( elem );
          }
        });
      }
    }

    return this;
  }
});

function findOrAppend( elem, tag ) {
  return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

function cloneCopyEvent( src, dest ) {

  if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
    return;
  }

  var type, i, l,
    oldData = jQuery._data( src ),
    curData = jQuery._data( dest, oldData ),
    events = oldData.events;

  if ( events ) {
    delete curData.handle;
    curData.events = {};

    for ( type in events ) {
      for ( i = 0, l = events[ type ].length; i < l; i++ ) {
        jQuery.event.add( dest, type, events[ type ][ i ] );
      }
    }
  }

  // make the cloned public data object a copy from the original
  if ( curData.data ) {
    curData.data = jQuery.extend( {}, curData.data );
  }
}

function cloneFixAttributes( src, dest ) {
  var nodeName;

  // We do not need to do anything for non-Elements
  if ( dest.nodeType !== 1 ) {
    return;
  }

  // clearAttributes removes the attributes, which we don't want,
  // but also removes the attachEvent events, which we *do* want
  if ( dest.clearAttributes ) {
    dest.clearAttributes();
  }

  // mergeAttributes, in contrast, only merges back on the
  // original attributes, not the events
  if ( dest.mergeAttributes ) {
    dest.mergeAttributes( src );
  }

  nodeName = dest.nodeName.toLowerCase();

  if ( nodeName === "object" ) {
    // IE6-10 improperly clones children of object elements using classid.
    // IE10 throws NoModificationAllowedError if parent is null, #12132.
    if ( dest.parentNode ) {
      dest.outerHTML = src.outerHTML;
    }

    // This path appears unavoidable for IE9. When cloning an object
    // element in IE9, the outerHTML strategy above is not sufficient.
    // If the src has innerHTML and the destination does not,
    // copy the src.innerHTML into the dest.innerHTML. #10324
    if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
      dest.innerHTML = src.innerHTML;
    }

  } else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
    // IE6-8 fails to persist the checked state of a cloned checkbox
    // or radio button. Worse, IE6-7 fail to give the cloned element
    // a checked appearance if the defaultChecked value isn't also set

    dest.defaultChecked = dest.checked = src.checked;

    // IE6-7 get confused and end up setting the value of a cloned
    // checkbox/radio button to an empty string instead of "on"
    if ( dest.value !== src.value ) {
      dest.value = src.value;
    }

  // IE6-8 fails to return the selected option to the default selected
  // state when cloning options
  } else if ( nodeName === "option" ) {
    dest.selected = src.defaultSelected;

  // IE6-8 fails to set the defaultValue to the correct value when
  // cloning other types of input fields
  } else if ( nodeName === "input" || nodeName === "textarea" ) {
    dest.defaultValue = src.defaultValue;

  // IE blanks contents when cloning scripts
  } else if ( nodeName === "script" && dest.text !== src.text ) {
    dest.text = src.text;
  }

  // Event data gets referenced instead of copied if the expando
  // gets copied too
  dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, context, scripts ) {
  var fragment, cacheable, cachehit,
    first = args[ 0 ];

  // Set context from what may come in as undefined or a jQuery collection or a node
  // Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
  // also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
  context = context || document;
  context = !context.nodeType && context[0] || context;
  context = context.ownerDocument || context;

  // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
  // Cloning options loses the selected state, so don't cache them
  // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
  // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
  // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
  if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
    first.charAt(0) === "<" && !rnocache.test( first ) &&
    (jQuery.support.checkClone || !rchecked.test( first )) &&
    (jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

    // Mark cacheable and look for a hit
    cacheable = true;
    fragment = jQuery.fragments[ first ];
    cachehit = fragment !== undefined;
  }

  if ( !fragment ) {
    fragment = context.createDocumentFragment();
    jQuery.clean( args, context, fragment, scripts );

    // Update the cache, but only store false
    // unless this is a second parsing of the same content
    if ( cacheable ) {
      jQuery.fragments[ first ] = cachehit && fragment;
    }
  }

  return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
  appendTo: "append",
  prependTo: "prepend",
  insertBefore: "before",
  insertAfter: "after",
  replaceAll: "replaceWith"
}, function( name, original ) {
  jQuery.fn[ name ] = function( selector ) {
    var elems,
      i = 0,
      ret = [],
      insert = jQuery( selector ),
      l = insert.length,
      parent = this.length === 1 && this[0].parentNode;

    if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
      insert[ original ]( this[0] );
      return this;
    } else {
      for ( ; i < l; i++ ) {
        elems = ( i > 0 ? this.clone(true) : this ).get();
        jQuery( insert[i] )[ original ]( elems );
        ret = ret.concat( elems );
      }

      return this.pushStack( ret, name, insert.selector );
    }
  };
});

function getAll( elem ) {
  if ( typeof elem.getElementsByTagName !== "undefined" ) {
    return elem.getElementsByTagName( "*" );

  } else if ( typeof elem.querySelectorAll !== "undefined" ) {
    return elem.querySelectorAll( "*" );

  } else {
    return [];
  }
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
  if ( rcheckableType.test( elem.type ) ) {
    elem.defaultChecked = elem.checked;
  }
}

jQuery.extend({
  clone: function( elem, dataAndEvents, deepDataAndEvents ) {
    var srcElements,
      destElements,
      i,
      clone;

    if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
      clone = elem.cloneNode( true );

    // IE<=8 does not properly clone detached, unknown element nodes
    } else {
      fragmentDiv.innerHTML = elem.outerHTML;
      fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
    }

    if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
        (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
      // IE copies events bound via attachEvent when using cloneNode.
      // Calling detachEvent on the clone will also remove the events
      // from the original. In order to get around this, we use some
      // proprietary methods to clear the events. Thanks to MooTools
      // guys for this hotness.

      cloneFixAttributes( elem, clone );

      // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
      srcElements = getAll( elem );
      destElements = getAll( clone );

      // Weird iteration because IE will replace the length property
      // with an element if you are cloning the body and one of the
      // elements on the page has a name or id of "length"
      for ( i = 0; srcElements[i]; ++i ) {
        // Ensure that the destination node is not null; Fixes #9587
        if ( destElements[i] ) {
          cloneFixAttributes( srcElements[i], destElements[i] );
        }
      }
    }

    // Copy the events from the original to the clone
    if ( dataAndEvents ) {
      cloneCopyEvent( elem, clone );

      if ( deepDataAndEvents ) {
        srcElements = getAll( elem );
        destElements = getAll( clone );

        for ( i = 0; srcElements[i]; ++i ) {
          cloneCopyEvent( srcElements[i], destElements[i] );
        }
      }
    }

    srcElements = destElements = null;

    // Return the cloned set
    return clone;
  },

  clean: function( elems, context, fragment, scripts ) {
    var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
      safe = context === document && safeFragment,
      ret = [];

    // Ensure that context is a document
    if ( !context || typeof context.createDocumentFragment === "undefined" ) {
      context = document;
    }

    // Use the already-created safe fragment if context permits
    for ( i = 0; (elem = elems[i]) != null; i++ ) {
      if ( typeof elem === "number" ) {
        elem += "";
      }

      if ( !elem ) {
        continue;
      }

      // Convert html string into DOM nodes
      if ( typeof elem === "string" ) {
        if ( !rhtml.test( elem ) ) {
          elem = context.createTextNode( elem );
        } else {
          // Ensure a safe container in which to render the html
          safe = safe || createSafeFragment( context );
          div = context.createElement("div");
          safe.appendChild( div );

          // Fix "XHTML"-style tags in all browsers
          elem = elem.replace(rxhtmlTag, "<$1></$2>");

          // Go to html and back, then peel off extra wrappers
          tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
          wrap = wrapMap[ tag ] || wrapMap._default;
          depth = wrap[0];
          div.innerHTML = wrap[1] + elem + wrap[2];

          // Move to the right depth
          while ( depth-- ) {
            div = div.lastChild;
          }

          // Remove IE's autoinserted <tbody> from table fragments
          if ( !jQuery.support.tbody ) {

            // String was a <table>, *may* have spurious <tbody>
            hasBody = rtbody.test(elem);
              tbody = tag === "table" && !hasBody ?
                div.firstChild && div.firstChild.childNodes :

                // String was a bare <thead> or <tfoot>
                wrap[1] === "<table>" && !hasBody ?
                  div.childNodes :
                  [];

            for ( j = tbody.length - 1; j >= 0 ; --j ) {
              if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
                tbody[ j ].parentNode.removeChild( tbody[ j ] );
              }
            }
          }

          // IE completely kills leading whitespace when innerHTML is used
          if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
            div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
          }

          elem = div.childNodes;

          // Take out of fragment container (we need a fresh div each time)
          div.parentNode.removeChild( div );
        }
      }

      if ( elem.nodeType ) {
        ret.push( elem );
      } else {
        jQuery.merge( ret, elem );
      }
    }

    // Fix #11356: Clear elements from safeFragment
    if ( div ) {
      elem = div = safe = null;
    }

    // Reset defaultChecked for any radios and checkboxes
    // about to be appended to the DOM in IE 6/7 (#8060)
    if ( !jQuery.support.appendChecked ) {
      for ( i = 0; (elem = ret[i]) != null; i++ ) {
        if ( jQuery.nodeName( elem, "input" ) ) {
          fixDefaultChecked( elem );
        } else if ( typeof elem.getElementsByTagName !== "undefined" ) {
          jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
        }
      }
    }

    // Append elements to a provided document fragment
    if ( fragment ) {
      // Special handling of each script element
      handleScript = function( elem ) {
        // Check if we consider it executable
        if ( !elem.type || rscriptType.test( elem.type ) ) {
          // Detach the script and store it in the scripts array (if provided) or the fragment
          // Return truthy to indicate that it has been handled
          return scripts ?
            scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
            fragment.appendChild( elem );
        }
      };

      for ( i = 0; (elem = ret[i]) != null; i++ ) {
        // Check if we're done after handling an executable script
        if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
          // Append to fragment and handle embedded scripts
          fragment.appendChild( elem );
          if ( typeof elem.getElementsByTagName !== "undefined" ) {
            // handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
            jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

            // Splice the scripts into ret after their former ancestor and advance our index beyond them
            ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
            i += jsTags.length;
          }
        }
      }
    }

    return ret;
  },

  cleanData: function( elems, /* internal */ acceptData ) {
    var data, id, elem, type,
      i = 0,
      internalKey = jQuery.expando,
      cache = jQuery.cache,
      deleteExpando = jQuery.support.deleteExpando,
      special = jQuery.event.special;

    for ( ; (elem = elems[i]) != null; i++ ) {

      if ( acceptData || jQuery.acceptData( elem ) ) {

        id = elem[ internalKey ];
        data = id && cache[ id ];

        if ( data ) {
          if ( data.events ) {
            for ( type in data.events ) {
              if ( special[ type ] ) {
                jQuery.event.remove( elem, type );

              // This is a shortcut to avoid jQuery.event.remove's overhead
              } else {
                jQuery.removeEvent( elem, type, data.handle );
              }
            }
          }

          // Remove cache only if it was not already removed by jQuery.event.remove
          if ( cache[ id ] ) {

            delete cache[ id ];

            // IE does not allow us to delete expando properties from nodes,
            // nor does it have a removeAttribute function on Document nodes;
            // we must handle all of these cases
            if ( deleteExpando ) {
              delete elem[ internalKey ];

            } else if ( elem.removeAttribute ) {
              elem.removeAttribute( internalKey );

            } else {
              elem[ internalKey ] = null;
            }

            jQuery.deletedIds.push( id );
          }
        }
      }
    }
  }
});
// Limit scope pollution from any deprecated API
(function() {

var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
jQuery.uaMatch = function( ua ) {
  ua = ua.toLowerCase();

  var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
    /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
    /(msie) ([\w.]+)/.exec( ua ) ||
    ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
    [];

  return {
    browser: match[ 1 ] || "",
    version: match[ 2 ] || "0"
  };
};

matched = jQuery.uaMatch( navigator.userAgent );
browser = {};

if ( matched.browser ) {
  browser[ matched.browser ] = true;
  browser.version = matched.version;
}

// Chrome is Webkit, but Webkit is also Safari.
if ( browser.chrome ) {
  browser.webkit = true;
} else if ( browser.webkit ) {
  browser.safari = true;
}

jQuery.browser = browser;

jQuery.sub = function() {
  function jQuerySub( selector, context ) {
    return new jQuerySub.fn.init( selector, context );
  }
  jQuery.extend( true, jQuerySub, this );
  jQuerySub.superclass = this;
  jQuerySub.fn = jQuerySub.prototype = this();
  jQuerySub.fn.constructor = jQuerySub;
  jQuerySub.sub = this.sub;
  jQuerySub.fn.init = function init( selector, context ) {
    if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
      context = jQuerySub( context );
    }

    return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
  };
  jQuerySub.fn.init.prototype = jQuerySub.fn;
  var rootjQuerySub = jQuerySub(document);
  return jQuerySub;
};

})();
var curCSS, iframe, iframeDoc,
  ralpha = /alpha\([^)]*\)/i,
  ropacity = /opacity=([^)]*)/,
  rposition = /^(top|right|bottom|left)$/,
  // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
  // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
  rmargin = /^margin/,
  rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
  rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
  rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
  elemdisplay = {},

  cssShow = { position: "absolute", visibility: "hidden", display: "block" },
  cssNormalTransform = {
    letterSpacing: 0,
    fontWeight: 400
  },

  cssExpand = [ "Top", "Right", "Bottom", "Left" ],
  cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

  eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

  // shortcut for names that are not vendor prefixed
  if ( name in style ) {
    return name;
  }

  // check for vendor prefixed names
  var capName = name.charAt(0).toUpperCase() + name.slice(1),
    origName = name,
    i = cssPrefixes.length;

  while ( i-- ) {
    name = cssPrefixes[ i ] + capName;
    if ( name in style ) {
      return name;
    }
  }

  return origName;
}

function isHidden( elem, el ) {
  elem = el || elem;
  return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
  var elem, display,
    values = [],
    index = 0,
    length = elements.length;

  for ( ; index < length; index++ ) {
    elem = elements[ index ];
    if ( !elem.style ) {
      continue;
    }
    values[ index ] = jQuery._data( elem, "olddisplay" );
    if ( show ) {
      // Reset the inline display of this element to learn if it is
      // being hidden by cascaded rules or not
      if ( !values[ index ] && elem.style.display === "none" ) {
        elem.style.display = "";
      }

      // Set elements which have been overridden with display: none
      // in a stylesheet to whatever the default browser style is
      // for such an element
      if ( elem.style.display === "" && isHidden( elem ) ) {
        values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
      }
    } else {
      display = curCSS( elem, "display" );

      if ( !values[ index ] && display !== "none" ) {
        jQuery._data( elem, "olddisplay", display );
      }
    }
  }

  // Set the display of most of the elements in a second loop
  // to avoid the constant reflow
  for ( index = 0; index < length; index++ ) {
    elem = elements[ index ];
    if ( !elem.style ) {
      continue;
    }
    if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
      elem.style.display = show ? values[ index ] || "" : "none";
    }
  }

  return elements;
}

jQuery.fn.extend({
  css: function( name, value ) {
    return jQuery.access( this, function( elem, name, value ) {
      return value !== undefined ?
        jQuery.style( elem, name, value ) :
        jQuery.css( elem, name );
    }, name, value, arguments.length > 1 );
  },
  show: function() {
    return showHide( this, true );
  },
  hide: function() {
    return showHide( this );
  },
  toggle: function( state, fn2 ) {
    var bool = typeof state === "boolean";

    if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
      return eventsToggle.apply( this, arguments );
    }

    return this.each(function() {
      if ( bool ? state : isHidden( this ) ) {
        jQuery( this ).show();
      } else {
        jQuery( this ).hide();
      }
    });
  }
});

jQuery.extend({
  // Add in style property hooks for overriding the default
  // behavior of getting and setting a style property
  cssHooks: {
    opacity: {
      get: function( elem, computed ) {
        if ( computed ) {
          // We should always get a number back from opacity
          var ret = curCSS( elem, "opacity" );
          return ret === "" ? "1" : ret;

        }
      }
    }
  },

  // Exclude the following css properties to add px
  cssNumber: {
    "fillOpacity": true,
    "fontWeight": true,
    "lineHeight": true,
    "opacity": true,
    "orphans": true,
    "widows": true,
    "zIndex": true,
    "zoom": true
  },

  // Add in properties whose names you wish to fix before
  // setting or getting the value
  cssProps: {
    // normalize float css property
    "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
  },

  // Get and set the style property on a DOM Node
  style: function( elem, name, value, extra ) {
    // Don't set styles on text and comment nodes
    if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
      return;
    }

    // Make sure that we're working with the right name
    var ret, type, hooks,
      origName = jQuery.camelCase( name ),
      style = elem.style;

    name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

    // gets hook for the prefixed version
    // followed by the unprefixed version
    hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

    // Check if we're setting a value
    if ( value !== undefined ) {
      type = typeof value;

      // convert relative number strings (+= or -=) to relative numbers. #7345
      if ( type === "string" && (ret = rrelNum.exec( value )) ) {
        value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
        // Fixes bug #9237
        type = "number";
      }

      // Make sure that NaN and null values aren't set. See: #7116
      if ( value == null || type === "number" && isNaN( value ) ) {
        return;
      }

      // If a number was passed in, add 'px' to the (except for certain CSS properties)
      if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
        value += "px";
      }

      // If a hook was provided, use that value, otherwise just set the specified value
      if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
        // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
        // Fixes bug #5509
        try {
          style[ name ] = value;
        } catch(e) {}
      }

    } else {
      // If a hook was provided get the non-computed value from there
      if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
        return ret;
      }

      // Otherwise just get the value from the style object
      return style[ name ];
    }
  },

  css: function( elem, name, numeric, extra ) {
    var val, num, hooks,
      origName = jQuery.camelCase( name );

    // Make sure that we're working with the right name
    name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

    // gets hook for the prefixed version
    // followed by the unprefixed version
    hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

    // If a hook was provided get the computed value from there
    if ( hooks && "get" in hooks ) {
      val = hooks.get( elem, true, extra );
    }

    // Otherwise, if a way to get the computed value exists, use that
    if ( val === undefined ) {
      val = curCSS( elem, name );
    }

    //convert "normal" to computed value
    if ( val === "normal" && name in cssNormalTransform ) {
      val = cssNormalTransform[ name ];
    }

    // Return, converting to number if forced or a qualifier was provided and val looks numeric
    if ( numeric || extra !== undefined ) {
      num = parseFloat( val );
      return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
    }
    return val;
  },

  // A method for quickly swapping in/out CSS properties to get correct calculations
  swap: function( elem, options, callback ) {
    var ret, name,
      old = {};

    // Remember the old values, and insert the new ones
    for ( name in options ) {
      old[ name ] = elem.style[ name ];
      elem.style[ name ] = options[ name ];
    }

    ret = callback.call( elem );

    // Revert the old values
    for ( name in options ) {
      elem.style[ name ] = old[ name ];
    }

    return ret;
  }
});

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
  curCSS = function( elem, name ) {
    var ret, width, minWidth, maxWidth,
      computed = window.getComputedStyle( elem, null ),
      style = elem.style;

    if ( computed ) {

      ret = computed[ name ];
      if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
        ret = jQuery.style( elem, name );
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
      // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret;
  };
} else if ( document.documentElement.currentStyle ) {
  curCSS = function( elem, name ) {
    var left, rsLeft,
      ret = elem.currentStyle && elem.currentStyle[ name ],
      style = elem.style;

    // Avoid setting ret to empty string here
    // so we don't default to auto
    if ( ret == null && style && style[ name ] ) {
      ret = style[ name ];
    }

    // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // but not position css attributes, as those are proportional to the parent element instead
    // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
    if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

      // Remember the original values
      left = style.left;
      rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

      // Put in the new values to get a computed value out
      if ( rsLeft ) {
        elem.runtimeStyle.left = elem.currentStyle.left;
      }
      style.left = name === "fontSize" ? "1em" : ret;
      ret = style.pixelLeft + "px";

      // Revert the changed values
      style.left = left;
      if ( rsLeft ) {
        elem.runtimeStyle.left = rsLeft;
      }
    }

    return ret === "" ? "auto" : ret;
  };
}

function setPositiveNumber( elem, value, subtract ) {
  var matches = rnumsplit.exec( value );
  return matches ?
      Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
      value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
  var i = extra === ( isBorderBox ? "border" : "content" ) ?
    // If we already have the right measurement, avoid augmentation
    4 :
    // Otherwise initialize for horizontal or vertical properties
    name === "width" ? 1 : 0,

    val = 0;

  for ( ; i < 4; i += 2 ) {
    // both box models exclude margin, so add it if we want it
    if ( extra === "margin" ) {
      // we use jQuery.css instead of curCSS here
      // because of the reliableMarginRight CSS hook!
      val += jQuery.css( elem, extra + cssExpand[ i ], true );
    }

    // From this point on we use curCSS for maximum performance (relevant in animations)
    if ( isBorderBox ) {
      // border-box includes padding, so remove it if we want content
      if ( extra === "content" ) {
        val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
      }

      // at this point, extra isn't border nor margin, so remove border
      if ( extra !== "margin" ) {
        val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
      }
    } else {
      // at this point, extra isn't content, so add padding
      val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

      // at this point, extra isn't content nor padding, so add border
      if ( extra !== "padding" ) {
        val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
      }
    }
  }

  return val;
}

function getWidthOrHeight( elem, name, extra ) {

  // Start with offset property, which is equivalent to the border-box value
  var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
    valueIsBorderBox = true,
    isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

  // some non-html elements return undefined for offsetWidth, so check for null/undefined
  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
  if ( val <= 0 || val == null ) {
    // Fall back to computed then uncomputed css if necessary
    val = curCSS( elem, name );
    if ( val < 0 || val == null ) {
      val = elem.style[ name ];
    }

    // Computed unit is not pixels. Stop here and return.
    if ( rnumnonpx.test(val) ) {
      return val;
    }

    // we need the check for style in case a browser which returns unreliable values
    // for getComputedStyle silently falls back to the reliable elem.style
    valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

    // Normalize "", auto, and prepare for extra
    val = parseFloat( val ) || 0;
  }

  // use the active box-sizing model to add/subtract irrelevant styles
  return ( val +
    augmentWidthOrHeight(
      elem,
      name,
      extra || ( isBorderBox ? "border" : "content" ),
      valueIsBorderBox
    )
  ) + "px";
}


// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
  if ( elemdisplay[ nodeName ] ) {
    return elemdisplay[ nodeName ];
  }

  var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
    display = elem.css("display");
  elem.remove();

  // If the simple way fails,
  // get element's real default display by attaching it to a temp iframe
  if ( display === "none" || display === "" ) {
    // Use the already-created iframe if possible
    iframe = document.body.appendChild(
      iframe || jQuery.extend( document.createElement("iframe"), {
        frameBorder: 0,
        width: 0,
        height: 0
      })
    );

    // Create a cacheable copy of the iframe document on first call.
    // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
    // document to it; WebKit & Firefox won't allow reusing the iframe document.
    if ( !iframeDoc || !iframe.createElement ) {
      iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
      iframeDoc.write("<!doctype html><html><body>");
      iframeDoc.close();
    }

    elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

    display = curCSS( elem, "display" );
    document.body.removeChild( iframe );
  }

  // Store the correct default display
  elemdisplay[ nodeName ] = display;

  return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
  jQuery.cssHooks[ name ] = {
    get: function( elem, computed, extra ) {
      if ( computed ) {
        // certain elements can have dimension info if we invisibly show them
        // however, it must have a current display style that would benefit from this
        if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
          return jQuery.swap( elem, cssShow, function() {
            return getWidthOrHeight( elem, name, extra );
          });
        } else {
          return getWidthOrHeight( elem, name, extra );
        }
      }
    },

    set: function( elem, value, extra ) {
      return setPositiveNumber( elem, value, extra ?
        augmentWidthOrHeight(
          elem,
          name,
          extra,
          jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
        ) : 0
      );
    }
  };
});

if ( !jQuery.support.opacity ) {
  jQuery.cssHooks.opacity = {
    get: function( elem, computed ) {
      // IE uses filters for opacity
      return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
        ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
        computed ? "1" : "";
    },

    set: function( elem, value ) {
      var style = elem.style,
        currentStyle = elem.currentStyle,
        opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
        filter = currentStyle && currentStyle.filter || style.filter || "";

      // IE has trouble with opacity if it does not have layout
      // Force it by setting the zoom level
      style.zoom = 1;

      // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
      if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
        style.removeAttribute ) {

        // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
        // if "filter:" is present at all, clearType is disabled, we want to avoid this
        // style.removeAttribute is IE Only, but so apparently is this code path...
        style.removeAttribute( "filter" );

        // if there there is no filter style applied in a css rule, we are done
        if ( currentStyle && !currentStyle.filter ) {
          return;
        }
      }

      // otherwise, set new filter values
      style.filter = ralpha.test( filter ) ?
        filter.replace( ralpha, opacity ) :
        filter + " " + opacity;
    }
  };
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
  if ( !jQuery.support.reliableMarginRight ) {
    jQuery.cssHooks.marginRight = {
      get: function( elem, computed ) {
        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
        // Work around by temporarily setting element display to inline-block
        return jQuery.swap( elem, { "display": "inline-block" }, function() {
          if ( computed ) {
            return curCSS( elem, "marginRight" );
          }
        });
      }
    };
  }

  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // getComputedStyle returns percent when specified for top/left/bottom/right
  // rather than make the css module depend on the offset module, we just check for it here
  if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
    jQuery.each( [ "top", "left" ], function( i, prop ) {
      jQuery.cssHooks[ prop ] = {
        get: function( elem, computed ) {
          if ( computed ) {
            var ret = curCSS( elem, prop );
            // if curCSS returns percentage, fallback to offset
            return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
          }
        }
      };
    });
  }

});

if ( jQuery.expr && jQuery.expr.filters ) {
  jQuery.expr.filters.hidden = function( elem ) {
    return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
  };

  jQuery.expr.filters.visible = function( elem ) {
    return !jQuery.expr.filters.hidden( elem );
  };
}

// These hooks are used by animate to expand properties
jQuery.each({
  margin: "",
  padding: "",
  border: "Width"
}, function( prefix, suffix ) {
  jQuery.cssHooks[ prefix + suffix ] = {
    expand: function( value ) {
      var i,

        // assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [ value ],
        expanded = {};

      for ( i = 0; i < 4; i++ ) {
        expanded[ prefix + cssExpand[ i ] + suffix ] =
          parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
      }

      return expanded;
    }
  };

  if ( !rmargin.test( prefix ) ) {
    jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
  }
});
var r20 = /%20/g,
  rbracket = /\[\]$/,
  rCRLF = /\r?\n/g,
  rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
  rselectTextarea = /^(?:select|textarea)/i;

jQuery.fn.extend({
  serialize: function() {
    return jQuery.param( this.serializeArray() );
  },
  serializeArray: function() {
    return this.map(function(){
      return this.elements ? jQuery.makeArray( this.elements ) : this;
    })
    .filter(function(){
      return this.name && !this.disabled &&
        ( this.checked || rselectTextarea.test( this.nodeName ) ||
          rinput.test( this.type ) );
    })
    .map(function( i, elem ){
      var val = jQuery( this ).val();

      return val == null ?
        null :
        jQuery.isArray( val ) ?
          jQuery.map( val, function( val, i ){
            return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
          }) :
          { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
    }).get();
  }
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
  var prefix,
    s = [],
    add = function( key, value ) {
      // If value is a function, invoke it and return its value
      value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
      s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
    };

  // Set traditional to true for jQuery <= 1.3.2 behavior.
  if ( traditional === undefined ) {
    traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
  }

  // If an array was passed in, assume that it is an array of form elements.
  if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
    // Serialize the form elements
    jQuery.each( a, function() {
      add( this.name, this.value );
    });

  } else {
    // If traditional, encode the "old" way (the way 1.3.2 or older
    // did it), otherwise encode params recursively.
    for ( prefix in a ) {
      buildParams( prefix, a[ prefix ], traditional, add );
    }
  }

  // Return the resulting serialization
  return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
  var name;

  if ( jQuery.isArray( obj ) ) {
    // Serialize array item.
    jQuery.each( obj, function( i, v ) {
      if ( traditional || rbracket.test( prefix ) ) {
        // Treat each array item as a scalar.
        add( prefix, v );

      } else {
        // If array item is non-scalar (array or object), encode its
        // numeric index to resolve deserialization ambiguity issues.
        // Note that rack (as of 1.0.0) can't currently deserialize
        // nested arrays properly, and attempting to do so may cause
        // a server error. Possible fixes are to modify rack's
        // deserialization algorithm or to provide an option or flag
        // to force array serialization to be shallow.
        buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
      }
    });

  } else if ( !traditional && jQuery.type( obj ) === "object" ) {
    // Serialize object item.
    for ( name in obj ) {
      buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
    }

  } else {
    // Serialize scalar item.
    add( prefix, obj );
  }
}
var
  // Document location
  ajaxLocParts,
  ajaxLocation,

  rhash = /#.*$/,
  rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
  // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
  rnoContent = /^(?:GET|HEAD)$/,
  rprotocol = /^\/\//,
  rquery = /\?/,
  rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
  rts = /([?&])_=[^&]*/,
  rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

  // Keep a copy of the old load method
  _load = jQuery.fn.load,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},

  // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
  ajaxLocation = location.href;
} catch( e ) {
  // Use the href attribute of an A element
  // since IE will modify it given document.location
  ajaxLocation = document.createElement( "a" );
  ajaxLocation.href = "";
  ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

  // dataTypeExpression is optional and defaults to "*"
  return function( dataTypeExpression, func ) {

    if ( typeof dataTypeExpression !== "string" ) {
      func = dataTypeExpression;
      dataTypeExpression = "*";
    }

    var dataType, list, placeBefore,
      dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
      i = 0,
      length = dataTypes.length;

    if ( jQuery.isFunction( func ) ) {
      // For each dataType in the dataTypeExpression
      for ( ; i < length; i++ ) {
        dataType = dataTypes[ i ];
        // We control if we're asked to add before
        // any existing element
        placeBefore = /^\+/.test( dataType );
        if ( placeBefore ) {
          dataType = dataType.substr( 1 ) || "*";
        }
        list = structure[ dataType ] = structure[ dataType ] || [];
        // then we add to the structure accordingly
        list[ placeBefore ? "unshift" : "push" ]( func );
      }
    }
  };
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
    dataType /* internal */, inspected /* internal */ ) {

  dataType = dataType || options.dataTypes[ 0 ];
  inspected = inspected || {};

  inspected[ dataType ] = true;

  var selection,
    list = structure[ dataType ],
    i = 0,
    length = list ? list.length : 0,
    executeOnly = ( structure === prefilters );

  for ( ; i < length && ( executeOnly || !selection ); i++ ) {
    selection = list[ i ]( options, originalOptions, jqXHR );
    // If we got redirected to another dataType
    // we try there if executing only and not done already
    if ( typeof selection === "string" ) {
      if ( !executeOnly || inspected[ selection ] ) {
        selection = undefined;
      } else {
        options.dataTypes.unshift( selection );
        selection = inspectPrefiltersOrTransports(
            structure, options, originalOptions, jqXHR, selection, inspected );
      }
    }
  }
  // If we're only executing or nothing was selected
  // we try the catchall dataType if not done already
  if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
    selection = inspectPrefiltersOrTransports(
        structure, options, originalOptions, jqXHR, "*", inspected );
  }
  // unnecessary when only executing (prefilters)
  // but it'll be ignored by the caller in that case
  return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
  var key, deep,
    flatOptions = jQuery.ajaxSettings.flatOptions || {};
  for ( key in src ) {
    if ( src[ key ] !== undefined ) {
      ( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
    }
  }
  if ( deep ) {
    jQuery.extend( true, target, deep );
  }
}

jQuery.fn.load = function( url, params, callback ) {
  if ( typeof url !== "string" && _load ) {
    return _load.apply( this, arguments );
  }

  // Don't do a request if no elements are being requested
  if ( !this.length ) {
    return this;
  }

  var selector, type, response,
    self = this,
    off = url.indexOf(" ");

  if ( off >= 0 ) {
    selector = url.slice( off, url.length );
    url = url.slice( 0, off );
  }

  // If it's a function
  if ( jQuery.isFunction( params ) ) {

    // We assume that it's the callback
    callback = params;
    params = undefined;

  // Otherwise, build a param string
  } else if ( params && typeof params === "object" ) {
    type = "POST";
  }

  // Request the remote document
  jQuery.ajax({
    url: url,

    // if "type" variable is undefined, then "GET" method will be used
    type: type,
    dataType: "html",
    data: params,
    complete: function( jqXHR, status ) {
      if ( callback ) {
        self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
      }
    }
  }).done(function( responseText ) {

    // Save response for use in complete callback
    response = arguments;

    // See if a selector was specified
    self.html( selector ?

      // Create a dummy div to hold the results
      jQuery("<div>")

        // inject the contents of the document in, removing the scripts
        // to avoid any 'Permission Denied' errors in IE
        .append( responseText.replace( rscript, "" ) )

        // Locate the specified elements
        .find( selector ) :

      // If not, just inject the full result
      responseText );

  });

  return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
  jQuery.fn[ o ] = function( f ){
    return this.on( o, f );
  };
});

jQuery.each( [ "get", "post" ], function( i, method ) {
  jQuery[ method ] = function( url, data, callback, type ) {
    // shift arguments if data argument was omitted
    if ( jQuery.isFunction( data ) ) {
      type = type || callback;
      callback = data;
      data = undefined;
    }

    return jQuery.ajax({
      type: method,
      url: url,
      data: data,
      success: callback,
      dataType: type
    });
  };
});

jQuery.extend({

  getScript: function( url, callback ) {
    return jQuery.get( url, undefined, callback, "script" );
  },

  getJSON: function( url, data, callback ) {
    return jQuery.get( url, data, callback, "json" );
  },

  // Creates a full fledged settings object into target
  // with both ajaxSettings and settings fields.
  // If target is omitted, writes into ajaxSettings.
  ajaxSetup: function( target, settings ) {
    if ( settings ) {
      // Building a settings object
      ajaxExtend( target, jQuery.ajaxSettings );
    } else {
      // Extending ajaxSettings
      settings = target;
      target = jQuery.ajaxSettings;
    }
    ajaxExtend( target, settings );
    return target;
  },

  ajaxSettings: {
    url: ajaxLocation,
    isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
    global: true,
    type: "GET",
    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
    processData: true,
    async: true,
    /*
    timeout: 0,
    data: null,
    dataType: null,
    username: null,
    password: null,
    cache: null,
    throws: false,
    traditional: false,
    headers: {},
    */

    accepts: {
      xml: "application/xml, text/xml",
      html: "text/html",
      text: "text/plain",
      json: "application/json, text/javascript",
      "*": allTypes
    },

    contents: {
      xml: /xml/,
      html: /html/,
      json: /json/
    },

    responseFields: {
      xml: "responseXML",
      text: "responseText"
    },

    // List of data converters
    // 1) key format is "source_type destination_type" (a single space in-between)
    // 2) the catchall symbol "*" can be used for source_type
    converters: {

      // Convert anything to text
      "* text": window.String,

      // Text to html (true = no transformation)
      "text html": true,

      // Evaluate text as a json expression
      "text json": jQuery.parseJSON,

      // Parse text as xml
      "text xml": jQuery.parseXML
    },

    // For options that shouldn't be deep extended:
    // you can add your own custom options here if
    // and when you create one that shouldn't be
    // deep extended (see ajaxExtend)
    flatOptions: {
      context: true,
      url: true
    }
  },

  ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
  ajaxTransport: addToPrefiltersOrTransports( transports ),

  // Main method
  ajax: function( url, options ) {

    // If url is an object, simulate pre-1.5 signature
    if ( typeof url === "object" ) {
      options = url;
      url = undefined;
    }

    // Force options to be an object
    options = options || {};

    var // ifModified key
      ifModifiedKey,
      // Response headers
      responseHeadersString,
      responseHeaders,
      // transport
      transport,
      // timeout handle
      timeoutTimer,
      // Cross-domain detection vars
      parts,
      // To know if global events are to be dispatched
      fireGlobals,
      // Loop variable
      i,
      // Create the final options object
      s = jQuery.ajaxSetup( {}, options ),
      // Callbacks context
      callbackContext = s.context || s,
      // Context for global events
      // It's the callbackContext if one was provided in the options
      // and if it's a DOM node or a jQuery collection
      globalEventContext = callbackContext !== s &&
        ( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
            jQuery( callbackContext ) : jQuery.event,
      // Deferreds
      deferred = jQuery.Deferred(),
      completeDeferred = jQuery.Callbacks( "once memory" ),
      // Status-dependent callbacks
      statusCode = s.statusCode || {},
      // Headers (they are sent all at once)
      requestHeaders = {},
      requestHeadersNames = {},
      // The jqXHR state
      state = 0,
      // Default abort message
      strAbort = "canceled",
      // Fake xhr
      jqXHR = {

        readyState: 0,

        // Caches the header
        setRequestHeader: function( name, value ) {
          if ( !state ) {
            var lname = name.toLowerCase();
            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
            requestHeaders[ name ] = value;
          }
          return this;
        },

        // Raw string
        getAllResponseHeaders: function() {
          return state === 2 ? responseHeadersString : null;
        },

        // Builds headers hashtable if needed
        getResponseHeader: function( key ) {
          var match;
          if ( state === 2 ) {
            if ( !responseHeaders ) {
              responseHeaders = {};
              while( ( match = rheaders.exec( responseHeadersString ) ) ) {
                responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
              }
            }
            match = responseHeaders[ key.toLowerCase() ];
          }
          return match === undefined ? null : match;
        },

        // Overrides response content-type header
        overrideMimeType: function( type ) {
          if ( !state ) {
            s.mimeType = type;
          }
          return this;
        },

        // Cancel the request
        abort: function( statusText ) {
          statusText = statusText || strAbort;
          if ( transport ) {
            transport.abort( statusText );
          }
          done( 0, statusText );
          return this;
        }
      };

    // Callback for when everything is done
    // It is defined here because jslint complains if it is declared
    // at the end of the function (which would be more logical and readable)
    function done( status, nativeStatusText, responses, headers ) {
      var isSuccess, success, error, response, modified,
        statusText = nativeStatusText;

      // Called once
      if ( state === 2 ) {
        return;
      }

      // State is "done" now
      state = 2;

      // Clear timeout if it exists
      if ( timeoutTimer ) {
        clearTimeout( timeoutTimer );
      }

      // Dereference transport for early garbage collection
      // (no matter how long the jqXHR object will be used)
      transport = undefined;

      // Cache response headers
      responseHeadersString = headers || "";

      // Set readyState
      jqXHR.readyState = status > 0 ? 4 : 0;

      // Get response data
      if ( responses ) {
        response = ajaxHandleResponses( s, jqXHR, responses );
      }

      // If successful, handle type chaining
      if ( status >= 200 && status < 300 || status === 304 ) {

        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if ( s.ifModified ) {

          modified = jqXHR.getResponseHeader("Last-Modified");
          if ( modified ) {
            jQuery.lastModified[ ifModifiedKey ] = modified;
          }
          modified = jqXHR.getResponseHeader("Etag");
          if ( modified ) {
            jQuery.etag[ ifModifiedKey ] = modified;
          }
        }

        // If not modified
        if ( status === 304 ) {

          statusText = "notmodified";
          isSuccess = true;

        // If we have data
        } else {

          isSuccess = ajaxConvert( s, response );
          statusText = isSuccess.state;
          success = isSuccess.data;
          error = isSuccess.error;
          isSuccess = !error;
        }
      } else {
        // We extract error from statusText
        // then normalize statusText and status for non-aborts
        error = statusText;
        if ( !statusText || status ) {
          statusText = "error";
          if ( status < 0 ) {
            status = 0;
          }
        }
      }

      // Set data for the fake xhr object
      jqXHR.status = status;
      jqXHR.statusText = ( nativeStatusText || statusText ) + "";

      // Success/Error
      if ( isSuccess ) {
        deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
      } else {
        deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
      }

      // Status-dependent callbacks
      jqXHR.statusCode( statusCode );
      statusCode = undefined;

      if ( fireGlobals ) {
        globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
            [ jqXHR, s, isSuccess ? success : error ] );
      }

      // Complete
      completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

      if ( fireGlobals ) {
        globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
        // Handle the global AJAX counter
        if ( !( --jQuery.active ) ) {
          jQuery.event.trigger( "ajaxStop" );
        }
      }
    }

    // Attach deferreds
    deferred.promise( jqXHR );
    jqXHR.success = jqXHR.done;
    jqXHR.error = jqXHR.fail;
    jqXHR.complete = completeDeferred.add;

    // Status-dependent callbacks
    jqXHR.statusCode = function( map ) {
      if ( map ) {
        var tmp;
        if ( state < 2 ) {
          for ( tmp in map ) {
            statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
          }
        } else {
          tmp = map[ jqXHR.status ];
          jqXHR.always( tmp );
        }
      }
      return this;
    };

    // Remove hash character (#7531: and string promotion)
    // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
    // We also use the url parameter if available
    s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

    // Extract dataTypes list
    s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

    // A cross-domain request is in order when we have a protocol:host:port mismatch
    if ( s.crossDomain == null ) {
      parts = rurl.exec( s.url.toLowerCase() ) || false;
      s.crossDomain = parts && ( parts.join(":") + ( parts[ 3 ] ? "" : parts[ 1 ] === "http:" ? 80 : 443 ) ) !==
        ( ajaxLocParts.join(":") + ( ajaxLocParts[ 3 ] ? "" : ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) );
    }

    // Convert data if not already a string
    if ( s.data && s.processData && typeof s.data !== "string" ) {
      s.data = jQuery.param( s.data, s.traditional );
    }

    // Apply prefilters
    inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

    // If request was aborted inside a prefilter, stop there
    if ( state === 2 ) {
      return jqXHR;
    }

    // We can fire global events as of now if asked to
    fireGlobals = s.global;

    // Uppercase the type
    s.type = s.type.toUpperCase();

    // Determine if request has content
    s.hasContent = !rnoContent.test( s.type );

    // Watch for a new set of requests
    if ( fireGlobals && jQuery.active++ === 0 ) {
      jQuery.event.trigger( "ajaxStart" );
    }

    // More options handling for requests with no content
    if ( !s.hasContent ) {

      // If data is available, append data to url
      if ( s.data ) {
        s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
        // #9682: remove data so that it's not used in an eventual retry
        delete s.data;
      }

      // Get ifModifiedKey before adding the anti-cache parameter
      ifModifiedKey = s.url;

      // Add anti-cache in url if needed
      if ( s.cache === false ) {

        var ts = jQuery.now(),
          // try replacing _= if it is there
          ret = s.url.replace( rts, "$1_=" + ts );

        // if nothing was replaced, add timestamp to the end
        s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
      }
    }

    // Set the correct header, if data is being sent
    if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
      jqXHR.setRequestHeader( "Content-Type", s.contentType );
    }

    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
    if ( s.ifModified ) {
      ifModifiedKey = ifModifiedKey || s.url;
      if ( jQuery.lastModified[ ifModifiedKey ] ) {
        jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
      }
      if ( jQuery.etag[ ifModifiedKey ] ) {
        jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
      }
    }

    // Set the Accepts header for the server, depending on the dataType
    jqXHR.setRequestHeader(
      "Accept",
      s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
        s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
        s.accepts[ "*" ]
    );

    // Check for headers option
    for ( i in s.headers ) {
      jqXHR.setRequestHeader( i, s.headers[ i ] );
    }

    // Allow custom headers/mimetypes and early abort
    if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
        // Abort if not done already and return
        return jqXHR.abort();

    }

    // aborting is no longer a cancellation
    strAbort = "abort";

    // Install callbacks on deferreds
    for ( i in { success: 1, error: 1, complete: 1 } ) {
      jqXHR[ i ]( s[ i ] );
    }

    // Get transport
    transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

    // If no transport, we auto-abort
    if ( !transport ) {
      done( -1, "No Transport" );
    } else {
      jqXHR.readyState = 1;
      // Send global event
      if ( fireGlobals ) {
        globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
      }
      // Timeout
      if ( s.async && s.timeout > 0 ) {
        timeoutTimer = setTimeout( function(){
          jqXHR.abort( "timeout" );
        }, s.timeout );
      }

      try {
        state = 1;
        transport.send( requestHeaders, done );
      } catch (e) {
        // Propagate exception as error if not done
        if ( state < 2 ) {
          done( -1, e );
        // Simply rethrow otherwise
        } else {
          throw e;
        }
      }
    }

    return jqXHR;
  },

  // Counter for holding the number of active queries
  active: 0,

  // Last-Modified header cache for next request
  lastModified: {},
  etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

  var ct, type, finalDataType, firstDataType,
    contents = s.contents,
    dataTypes = s.dataTypes,
    responseFields = s.responseFields;

  // Fill responseXXX fields
  for ( type in responseFields ) {
    if ( type in responses ) {
      jqXHR[ responseFields[type] ] = responses[ type ];
    }
  }

  // Remove auto dataType and get content-type in the process
  while( dataTypes[ 0 ] === "*" ) {
    dataTypes.shift();
    if ( ct === undefined ) {
      ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
    }
  }

  // Check if we're dealing with a known content-type
  if ( ct ) {
    for ( type in contents ) {
      if ( contents[ type ] && contents[ type ].test( ct ) ) {
        dataTypes.unshift( type );
        break;
      }
    }
  }

  // Check to see if we have a response for the expected dataType
  if ( dataTypes[ 0 ] in responses ) {
    finalDataType = dataTypes[ 0 ];
  } else {
    // Try convertible dataTypes
    for ( type in responses ) {
      if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
        finalDataType = type;
        break;
      }
      if ( !firstDataType ) {
        firstDataType = type;
      }
    }
    // Or just use first one
    finalDataType = finalDataType || firstDataType;
  }

  // If we found a dataType
  // We add the dataType to the list if needed
  // and return the corresponding response
  if ( finalDataType ) {
    if ( finalDataType !== dataTypes[ 0 ] ) {
      dataTypes.unshift( finalDataType );
    }
    return responses[ finalDataType ];
  }
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

  var conv, conv2, current, tmp,
    // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(),
    prev = dataTypes[ 0 ],
    converters = {},
    i = 0;

  // Apply the dataFilter if provided
  if ( s.dataFilter ) {
    response = s.dataFilter( response, s.dataType );
  }

  // Create converters map with lowercased keys
  if ( dataTypes[ 1 ] ) {
    for ( conv in s.converters ) {
      converters[ conv.toLowerCase() ] = s.converters[ conv ];
    }
  }

  // Convert to each sequential dataType, tolerating list modification
  for ( ; (current = dataTypes[++i]); ) {

    // There's only work to do if current dataType is non-auto
    if ( current !== "*" ) {

      // Convert response if prev dataType is non-auto and differs from current
      if ( prev !== "*" && prev !== current ) {

        // Seek a direct converter
        conv = converters[ prev + " " + current ] || converters[ "* " + current ];

        // If none found, seek a pair
        if ( !conv ) {
          for ( conv2 in converters ) {

            // If conv2 outputs current
            tmp = conv2.split(" ");
            if ( tmp[ 1 ] === current ) {

              // If prev can be converted to accepted input
              conv = converters[ prev + " " + tmp[ 0 ] ] ||
                converters[ "* " + tmp[ 0 ] ];
              if ( conv ) {
                // Condense equivalence converters
                if ( conv === true ) {
                  conv = converters[ conv2 ];

                // Otherwise, insert the intermediate dataType
                } else if ( converters[ conv2 ] !== true ) {
                  current = tmp[ 0 ];
                  dataTypes.splice( i--, 0, current );
                }

                break;
              }
            }
          }
        }

        // Apply converter (if not an equivalence)
        if ( conv !== true ) {

          // Unless errors are allowed to bubble, catch and return them
          if ( conv && s["throws"] ) {
            response = conv( response );
          } else {
            try {
              response = conv( response );
            } catch ( e ) {
              return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
            }
          }
        }
      }

      // Update prev for next iteration
      prev = current;
    }
  }

  return { state: "success", data: response };
}
var oldCallbacks = [],
  rquestion = /\?/,
  rjsonp = /(=)\?(?=&|$)|\?\?/,
  nonce = jQuery.now();

// Default jsonp settings
jQuery.ajaxSetup({
  jsonp: "callback",
  jsonpCallback: function() {
    var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
    this[ callback ] = true;
    return callback;
  }
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

  var callbackName, overwritten, responseContainer,
    data = s.data,
    url = s.url,
    hasCallback = s.jsonp !== false,
    replaceInUrl = hasCallback && rjsonp.test( url ),
    replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
      !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
      rjsonp.test( data );

  // Handle iff the expected data type is "jsonp" or we have a parameter to set
  if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

    // Get callback name, remembering preexisting value associated with it
    callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
      s.jsonpCallback() :
      s.jsonpCallback;
    overwritten = window[ callbackName ];

    // Insert callback into url or form data
    if ( replaceInUrl ) {
      s.url = url.replace( rjsonp, "$1" + callbackName );
    } else if ( replaceInData ) {
      s.data = data.replace( rjsonp, "$1" + callbackName );
    } else if ( hasCallback ) {
      s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
    }

    // Use data converter to retrieve json after script execution
    s.converters["script json"] = function() {
      if ( !responseContainer ) {
        jQuery.error( callbackName + " was not called" );
      }
      return responseContainer[ 0 ];
    };

    // force json dataType
    s.dataTypes[ 0 ] = "json";

    // Install callback
    window[ callbackName ] = function() {
      responseContainer = arguments;
    };

    // Clean-up function (fires after converters)
    jqXHR.always(function() {
      // Restore preexisting value
      window[ callbackName ] = overwritten;

      // Save back as free
      if ( s[ callbackName ] ) {
        // make sure that re-using the options doesn't screw things around
        s.jsonpCallback = originalSettings.jsonpCallback;

        // save the callback name for future use
        oldCallbacks.push( callbackName );
      }

      // Call if it was a function and we have a response
      if ( responseContainer && jQuery.isFunction( overwritten ) ) {
        overwritten( responseContainer[ 0 ] );
      }

      responseContainer = overwritten = undefined;
    });

    // Delegate to script
    return "script";
  }
});
// Install script dataType
jQuery.ajaxSetup({
  accepts: {
    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
  },
  contents: {
    script: /javascript|ecmascript/
  },
  converters: {
    "text script": function( text ) {
      jQuery.globalEval( text );
      return text;
    }
  }
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
  if ( s.cache === undefined ) {
    s.cache = false;
  }
  if ( s.crossDomain ) {
    s.type = "GET";
    s.global = false;
  }
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

  // This transport only deals with cross domain requests
  if ( s.crossDomain ) {

    var script,
      head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

    return {

      send: function( _, callback ) {

        script = document.createElement( "script" );

        script.async = "async";

        if ( s.scriptCharset ) {
          script.charset = s.scriptCharset;
        }

        script.src = s.url;

        // Attach handlers for all browsers
        script.onload = script.onreadystatechange = function( _, isAbort ) {

          if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

            // Handle memory leak in IE
            script.onload = script.onreadystatechange = null;

            // Remove the script
            if ( head && script.parentNode ) {
              head.removeChild( script );
            }

            // Dereference the script
            script = undefined;

            // Callback if not abort
            if ( !isAbort ) {
              callback( 200, "success" );
            }
          }
        };
        // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
        // This arises when a base node is used (#2709 and #4378).
        head.insertBefore( script, head.firstChild );
      },

      abort: function() {
        if ( script ) {
          script.onload( 0, 1 );
        }
      }
    };
  }
});
var xhrCallbacks,
  // #5280: Internet Explorer will keep connections alive if we don't abort on unload
  xhrOnUnloadAbort = window.ActiveXObject ? function() {
    // Abort all pending requests
    for ( var key in xhrCallbacks ) {
      xhrCallbacks[ key ]( 0, 1 );
    }
  } : false,
  xhrId = 0;

// Functions to create xhrs
function createStandardXHR() {
  try {
    return new window.XMLHttpRequest();
  } catch( e ) {}
}

function createActiveXHR() {
  try {
    return new window.ActiveXObject( "Microsoft.XMLHTTP" );
  } catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
  /* Microsoft failed to properly
   * implement the XMLHttpRequest in IE7 (can't request local files),
   * so we use the ActiveXObject when it is available
   * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
   * we need a fallback.
   */
  function() {
    return !this.isLocal && createStandardXHR() || createActiveXHR();
  } :
  // For all other browsers, use the standard XMLHttpRequest object
  createStandardXHR;

// Determine support properties
(function( xhr ) {
  jQuery.extend( jQuery.support, {
    ajax: !!xhr,
    cors: !!xhr && ( "withCredentials" in xhr )
  });
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

  jQuery.ajaxTransport(function( s ) {
    // Cross domain only allowed if supported through XMLHttpRequest
    if ( !s.crossDomain || jQuery.support.cors ) {

      var callback;

      return {
        send: function( headers, complete ) {

          // Get a new xhr
          var handle, i,
            xhr = s.xhr();

          // Open the socket
          // Passing null username, generates a login popup on Opera (#2865)
          if ( s.username ) {
            xhr.open( s.type, s.url, s.async, s.username, s.password );
          } else {
            xhr.open( s.type, s.url, s.async );
          }

          // Apply custom fields if provided
          if ( s.xhrFields ) {
            for ( i in s.xhrFields ) {
              xhr[ i ] = s.xhrFields[ i ];
            }
          }

          // Override mime type if needed
          if ( s.mimeType && xhr.overrideMimeType ) {
            xhr.overrideMimeType( s.mimeType );
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if ( !s.crossDomain && !headers["X-Requested-With"] ) {
            headers[ "X-Requested-With" ] = "XMLHttpRequest";
          }

          // Need an extra try/catch for cross domain requests in Firefox 3
          try {
            for ( i in headers ) {
              xhr.setRequestHeader( i, headers[ i ] );
            }
          } catch( _ ) {}

          // Do send the request
          // This may raise an exception which is actually
          // handled in jQuery.ajax (so no try/catch here)
          xhr.send( ( s.hasContent && s.data ) || null );

          // Listener
          callback = function( _, isAbort ) {

            var status,
              statusText,
              responseHeaders,
              responses,
              xml;

            // Firefox throws exceptions when accessing properties
            // of an xhr when a network error occurred
            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
            try {

              // Was never called and is aborted or complete
              if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

                // Only called once
                callback = undefined;

                // Do not keep as active anymore
                if ( handle ) {
                  xhr.onreadystatechange = jQuery.noop;
                  if ( xhrOnUnloadAbort ) {
                    delete xhrCallbacks[ handle ];
                  }
                }

                // If it's an abort
                if ( isAbort ) {
                  // Abort it manually if needed
                  if ( xhr.readyState !== 4 ) {
                    xhr.abort();
                  }
                } else {
                  status = xhr.status;
                  responseHeaders = xhr.getAllResponseHeaders();
                  responses = {};
                  xml = xhr.responseXML;

                  // Construct response list
                  if ( xml && xml.documentElement /* #4958 */ ) {
                    responses.xml = xml;
                  }

                  // When requesting binary data, IE6-9 will throw an exception
                  // on any attempt to access responseText (#11426)
                  try {
                    responses.text = xhr.responseText;
                  } catch( _ ) {
                  }

                  // Firefox throws an exception when accessing
                  // statusText for faulty cross-domain requests
                  try {
                    statusText = xhr.statusText;
                  } catch( e ) {
                    // We normalize with Webkit giving an empty statusText
                    statusText = "";
                  }

                  // Filter status for non standard behaviors

                  // If the request is local and we have data: assume a success
                  // (success with no data won't get notified, that's the best we
                  // can do given current implementations)
                  if ( !status && s.isLocal && !s.crossDomain ) {
                    status = responses.text ? 200 : 404;
                  // IE - #1450: sometimes returns 1223 when it should be 204
                  } else if ( status === 1223 ) {
                    status = 204;
                  }
                }
              }
            } catch( firefoxAccessException ) {
              if ( !isAbort ) {
                complete( -1, firefoxAccessException );
              }
            }

            // Call complete if needed
            if ( responses ) {
              complete( status, statusText, responses, responseHeaders );
            }
          };

          if ( !s.async ) {
            // if we're in sync mode we fire the callback
            callback();
          } else if ( xhr.readyState === 4 ) {
            // (IE6 & IE7) if it's in cache and has been
            // retrieved directly we need to fire the callback
            setTimeout( callback, 0 );
          } else {
            handle = ++xhrId;
            if ( xhrOnUnloadAbort ) {
              // Create the active xhrs callbacks list if needed
              // and attach the unload handler
              if ( !xhrCallbacks ) {
                xhrCallbacks = {};
                jQuery( window ).unload( xhrOnUnloadAbort );
              }
              // Add to list of active xhrs callbacks
              xhrCallbacks[ handle ] = callback;
            }
            xhr.onreadystatechange = callback;
          }
        },

        abort: function() {
          if ( callback ) {
            callback(0,1);
          }
        }
      };
    }
  });
}
var fxNow, timerId,
  rfxtypes = /^(?:toggle|show|hide)$/,
  rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
  rrun = /queueHooks$/,
  animationPrefilters = [ defaultPrefilter ],
  tweeners = {
    "*": [function( prop, value ) {
      var end, unit,
        tween = this.createTween( prop, value ),
        parts = rfxnum.exec( value ),
        target = tween.cur(),
        start = +target || 0,
        scale = 1,
        maxIterations = 20;

      if ( parts ) {
        end = +parts[2];
        unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

        // We need to compute starting value
        if ( unit !== "px" && start ) {
          // Iteratively approximate from a nonzero starting point
          // Prefer the current property, because this process will be trivial if it uses the same units
          // Fallback to end or a simple constant
          start = jQuery.css( tween.elem, prop, true ) || end || 1;

          do {
            // If previous iteration zeroed out, double until we get *something*
            // Use a string for doubling factor so we don't accidentally see scale as unchanged below
            scale = scale || ".5";

            // Adjust and apply
            start = start / scale;
            jQuery.style( tween.elem, prop, start + unit );

          // Update scale, tolerating zero or NaN from tween.cur()
          // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
          } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
        }

        tween.unit = unit;
        tween.start = start;
        // If a +=/-= token was provided, we're doing a relative animation
        tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
      }
      return tween;
    }]
  };

// Animations created synchronously will run synchronously
function createFxNow() {
  setTimeout(function() {
    fxNow = undefined;
  }, 0 );
  return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
  jQuery.each( props, function( prop, value ) {
    var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
      index = 0,
      length = collection.length;
    for ( ; index < length; index++ ) {
      if ( collection[ index ].call( animation, prop, value ) ) {

        // we're done with this property
        return;
      }
    }
  });
}

function Animation( elem, properties, options ) {
  var result,
    index = 0,
    tweenerIndex = 0,
    length = animationPrefilters.length,
    deferred = jQuery.Deferred().always( function() {
      // don't match elem in the :animated selector
      delete tick.elem;
    }),
    tick = function() {
      var currentTime = fxNow || createFxNow(),
        remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
        percent = 1 - ( remaining / animation.duration || 0 ),
        index = 0,
        length = animation.tweens.length;

      for ( ; index < length ; index++ ) {
        animation.tweens[ index ].run( percent );
      }

      deferred.notifyWith( elem, [ animation, percent, remaining ]);

      if ( percent < 1 && length ) {
        return remaining;
      } else {
        deferred.resolveWith( elem, [ animation ] );
        return false;
      }
    },
    animation = deferred.promise({
      elem: elem,
      props: jQuery.extend( {}, properties ),
      opts: jQuery.extend( true, { specialEasing: {} }, options ),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function( prop, end, easing ) {
        var tween = jQuery.Tween( elem, animation.opts, prop, end,
            animation.opts.specialEasing[ prop ] || animation.opts.easing );
        animation.tweens.push( tween );
        return tween;
      },
      stop: function( gotoEnd ) {
        var index = 0,
          // if we are going to the end, we want to run all the tweens
          // otherwise we skip this part
          length = gotoEnd ? animation.tweens.length : 0;

        for ( ; index < length ; index++ ) {
          animation.tweens[ index ].run( 1 );
        }

        // resolve when we played the last frame
        // otherwise, reject
        if ( gotoEnd ) {
          deferred.resolveWith( elem, [ animation, gotoEnd ] );
        } else {
          deferred.rejectWith( elem, [ animation, gotoEnd ] );
        }
        return this;
      }
    }),
    props = animation.props;

  propFilter( props, animation.opts.specialEasing );

  for ( ; index < length ; index++ ) {
    result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
    if ( result ) {
      return result;
    }
  }

  createTweens( animation, props );

  if ( jQuery.isFunction( animation.opts.start ) ) {
    animation.opts.start.call( elem, animation );
  }

  jQuery.fx.timer(
    jQuery.extend( tick, {
      anim: animation,
      queue: animation.opts.queue,
      elem: elem
    })
  );

  // attach callbacks from options
  return animation.progress( animation.opts.progress )
    .done( animation.opts.done, animation.opts.complete )
    .fail( animation.opts.fail )
    .always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
  var index, name, easing, value, hooks;

  // camelCase, specialEasing and expand cssHook pass
  for ( index in props ) {
    name = jQuery.camelCase( index );
    easing = specialEasing[ name ];
    value = props[ index ];
    if ( jQuery.isArray( value ) ) {
      easing = value[ 1 ];
      value = props[ index ] = value[ 0 ];
    }

    if ( index !== name ) {
      props[ name ] = value;
      delete props[ index ];
    }

    hooks = jQuery.cssHooks[ name ];
    if ( hooks && "expand" in hooks ) {
      value = hooks.expand( value );
      delete props[ name ];

      // not quite $.extend, this wont overwrite keys already present.
      // also - reusing 'index' from above because we have the correct "name"
      for ( index in value ) {
        if ( !( index in props ) ) {
          props[ index ] = value[ index ];
          specialEasing[ index ] = easing;
        }
      }
    } else {
      specialEasing[ name ] = easing;
    }
  }
}

jQuery.Animation = jQuery.extend( Animation, {

  tweener: function( props, callback ) {
    if ( jQuery.isFunction( props ) ) {
      callback = props;
      props = [ "*" ];
    } else {
      props = props.split(" ");
    }

    var prop,
      index = 0,
      length = props.length;

    for ( ; index < length ; index++ ) {
      prop = props[ index ];
      tweeners[ prop ] = tweeners[ prop ] || [];
      tweeners[ prop ].unshift( callback );
    }
  },

  prefilter: function( callback, prepend ) {
    if ( prepend ) {
      animationPrefilters.unshift( callback );
    } else {
      animationPrefilters.push( callback );
    }
  }
});

function defaultPrefilter( elem, props, opts ) {
  var index, prop, value, length, dataShow, tween, hooks, oldfire,
    anim = this,
    style = elem.style,
    orig = {},
    handled = [],
    hidden = elem.nodeType && isHidden( elem );

  // handle queue: false promises
  if ( !opts.queue ) {
    hooks = jQuery._queueHooks( elem, "fx" );
    if ( hooks.unqueued == null ) {
      hooks.unqueued = 0;
      oldfire = hooks.empty.fire;
      hooks.empty.fire = function() {
        if ( !hooks.unqueued ) {
          oldfire();
        }
      };
    }
    hooks.unqueued++;

    anim.always(function() {
      // doing this makes sure that the complete handler will be called
      // before this completes
      anim.always(function() {
        hooks.unqueued--;
        if ( !jQuery.queue( elem, "fx" ).length ) {
          hooks.empty.fire();
        }
      });
    });
  }

  // height/width overflow pass
  if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
    // Make sure that nothing sneaks out
    // Record all 3 overflow attributes because IE does not
    // change the overflow attribute when overflowX and
    // overflowY are set to the same value
    opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

    // Set display property to inline-block for height/width
    // animations on inline elements that are having width/height animated
    if ( jQuery.css( elem, "display" ) === "inline" &&
        jQuery.css( elem, "float" ) === "none" ) {

      // inline-level elements accept inline-block;
      // block-level elements need to be inline with layout
      if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
        style.display = "inline-block";

      } else {
        style.zoom = 1;
      }
    }
  }

  if ( opts.overflow ) {
    style.overflow = "hidden";
    if ( !jQuery.support.shrinkWrapBlocks ) {
      anim.done(function() {
        style.overflow = opts.overflow[ 0 ];
        style.overflowX = opts.overflow[ 1 ];
        style.overflowY = opts.overflow[ 2 ];
      });
    }
  }


  // show/hide pass
  for ( index in props ) {
    value = props[ index ];
    if ( rfxtypes.exec( value ) ) {
      delete props[ index ];
      if ( value === ( hidden ? "hide" : "show" ) ) {
        continue;
      }
      handled.push( index );
    }
  }

  length = handled.length;
  if ( length ) {
    dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
    if ( hidden ) {
      jQuery( elem ).show();
    } else {
      anim.done(function() {
        jQuery( elem ).hide();
      });
    }
    anim.done(function() {
      var prop;
      jQuery.removeData( elem, "fxshow", true );
      for ( prop in orig ) {
        jQuery.style( elem, prop, orig[ prop ] );
      }
    });
    for ( index = 0 ; index < length ; index++ ) {
      prop = handled[ index ];
      tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
      orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

      if ( !( prop in dataShow ) ) {
        dataShow[ prop ] = tween.start;
        if ( hidden ) {
          tween.end = tween.start;
          tween.start = prop === "width" || prop === "height" ? 1 : 0;
        }
      }
    }
  }
}

function Tween( elem, options, prop, end, easing ) {
  return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
  constructor: Tween,
  init: function( elem, options, prop, end, easing, unit ) {
    this.elem = elem;
    this.prop = prop;
    this.easing = easing || "swing";
    this.options = options;
    this.start = this.now = this.cur();
    this.end = end;
    this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
  },
  cur: function() {
    var hooks = Tween.propHooks[ this.prop ];

    return hooks && hooks.get ?
      hooks.get( this ) :
      Tween.propHooks._default.get( this );
  },
  run: function( percent ) {
    var eased,
      hooks = Tween.propHooks[ this.prop ];

    if ( this.options.duration ) {
      this.pos = eased = jQuery.easing[ this.easing ](
        percent, this.options.duration * percent, 0, 1, this.options.duration
      );
    } else {
      this.pos = eased = percent;
    }
    this.now = ( this.end - this.start ) * eased + this.start;

    if ( this.options.step ) {
      this.options.step.call( this.elem, this.now, this );
    }

    if ( hooks && hooks.set ) {
      hooks.set( this );
    } else {
      Tween.propHooks._default.set( this );
    }
    return this;
  }
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
  _default: {
    get: function( tween ) {
      var result;

      if ( tween.elem[ tween.prop ] != null &&
        (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
        return tween.elem[ tween.prop ];
      }

      // passing any value as a 4th parameter to .css will automatically
      // attempt a parseFloat and fallback to a string if the parse fails
      // so, simple values such as "10px" are parsed to Float.
      // complex values such as "rotate(1rad)" are returned as is.
      result = jQuery.css( tween.elem, tween.prop, false, "" );
      // Empty strings, null, undefined and "auto" are converted to 0.
      return !result || result === "auto" ? 0 : result;
    },
    set: function( tween ) {
      // use step hook for back compat - use cssHook if its there - use .style if its
      // available and use plain properties where available
      if ( jQuery.fx.step[ tween.prop ] ) {
        jQuery.fx.step[ tween.prop ]( tween );
      } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
        jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
      } else {
        tween.elem[ tween.prop ] = tween.now;
      }
    }
  }
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
  set: function( tween ) {
    if ( tween.elem.nodeType && tween.elem.parentNode ) {
      tween.elem[ tween.prop ] = tween.now;
    }
  }
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
  var cssFn = jQuery.fn[ name ];
  jQuery.fn[ name ] = function( speed, easing, callback ) {
    return speed == null || typeof speed === "boolean" ||
      // special check for .toggle( handler, handler, ... )
      ( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
      cssFn.apply( this, arguments ) :
      this.animate( genFx( name, true ), speed, easing, callback );
  };
});

jQuery.fn.extend({
  fadeTo: function( speed, to, easing, callback ) {

    // show any hidden elements after setting opacity to 0
    return this.filter( isHidden ).css( "opacity", 0 ).show()

      // animate to the value specified
      .end().animate({ opacity: to }, speed, easing, callback );
  },
  animate: function( prop, speed, easing, callback ) {
    var empty = jQuery.isEmptyObject( prop ),
      optall = jQuery.speed( speed, easing, callback ),
      doAnimation = function() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation( this, jQuery.extend( {}, prop ), optall );

        // Empty animations resolve immediately
        if ( empty ) {
          anim.stop( true );
        }
      };

    return empty || optall.queue === false ?
      this.each( doAnimation ) :
      this.queue( optall.queue, doAnimation );
  },
  stop: function( type, clearQueue, gotoEnd ) {
    var stopQueue = function( hooks ) {
      var stop = hooks.stop;
      delete hooks.stop;
      stop( gotoEnd );
    };

    if ( typeof type !== "string" ) {
      gotoEnd = clearQueue;
      clearQueue = type;
      type = undefined;
    }
    if ( clearQueue && type !== false ) {
      this.queue( type || "fx", [] );
    }

    return this.each(function() {
      var dequeue = true,
        index = type != null && type + "queueHooks",
        timers = jQuery.timers,
        data = jQuery._data( this );

      if ( index ) {
        if ( data[ index ] && data[ index ].stop ) {
          stopQueue( data[ index ] );
        }
      } else {
        for ( index in data ) {
          if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
            stopQueue( data[ index ] );
          }
        }
      }

      for ( index = timers.length; index--; ) {
        if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
          timers[ index ].anim.stop( gotoEnd );
          dequeue = false;
          timers.splice( index, 1 );
        }
      }

      // start the next in the queue if the last step wasn't forced
      // timers currently will call their complete callbacks, which will dequeue
      // but only if they were gotoEnd
      if ( dequeue || !gotoEnd ) {
        jQuery.dequeue( this, type );
      }
    });
  }
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
  var which,
    attrs = { height: type },
    i = 0;

  // if we include width, step value is 1 to do all cssExpand values,
  // if we don't include width, step value is 2 to skip over Left and Right
  includeWidth = includeWidth? 1 : 0;
  for( ; i < 4 ; i += 2 - includeWidth ) {
    which = cssExpand[ i ];
    attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
  }

  if ( includeWidth ) {
    attrs.opacity = attrs.width = type;
  }

  return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
  slideDown: genFx("show"),
  slideUp: genFx("hide"),
  slideToggle: genFx("toggle"),
  fadeIn: { opacity: "show" },
  fadeOut: { opacity: "hide" },
  fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
  jQuery.fn[ name ] = function( speed, easing, callback ) {
    return this.animate( props, speed, easing, callback );
  };
});

jQuery.speed = function( speed, easing, fn ) {
  var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
    complete: fn || !fn && easing ||
      jQuery.isFunction( speed ) && speed,
    duration: speed,
    easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
  };

  opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
    opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

  // normalize opt.queue - true/undefined/null -> "fx"
  if ( opt.queue == null || opt.queue === true ) {
    opt.queue = "fx";
  }

  // Queueing
  opt.old = opt.complete;

  opt.complete = function() {
    if ( jQuery.isFunction( opt.old ) ) {
      opt.old.call( this );
    }

    if ( opt.queue ) {
      jQuery.dequeue( this, opt.queue );
    }
  };

  return opt;
};

jQuery.easing = {
  linear: function( p ) {
    return p;
  },
  swing: function( p ) {
    return 0.5 - Math.cos( p*Math.PI ) / 2;
  }
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
  var timer,
    timers = jQuery.timers,
    i = 0;

  for ( ; i < timers.length; i++ ) {
    timer = timers[ i ];
    // Checks the timer has not already been removed
    if ( !timer() && timers[ i ] === timer ) {
      timers.splice( i--, 1 );
    }
  }

  if ( !timers.length ) {
    jQuery.fx.stop();
  }
};

jQuery.fx.timer = function( timer ) {
  if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
    timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
  }
};

jQuery.fx.interval = 13;

jQuery.fx.stop = function() {
  clearInterval( timerId );
  timerId = null;
};

jQuery.fx.speeds = {
  slow: 600,
  fast: 200,
  // Default speed
  _default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
  jQuery.expr.filters.animated = function( elem ) {
    return jQuery.grep(jQuery.timers, function( fn ) {
      return elem === fn.elem;
    }).length;
  };
}
var rroot = /^(?:body|html)$/i;

jQuery.fn.offset = function( options ) {
  if ( arguments.length ) {
    return options === undefined ?
      this :
      this.each(function( i ) {
        jQuery.offset.setOffset( this, options, i );
      });
  }

  var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
    box = { top: 0, left: 0 },
    elem = this[ 0 ],
    doc = elem && elem.ownerDocument;

  if ( !doc ) {
    return;
  }

  if ( (body = doc.body) === elem ) {
    return jQuery.offset.bodyOffset( elem );
  }

  docElem = doc.documentElement;

  // Make sure it's not a disconnected DOM node
  if ( !jQuery.contains( docElem, elem ) ) {
    return box;
  }

  // If we don't have gBCR, just use 0,0 rather than error
  // BlackBerry 5, iOS 3 (original iPhone)
  if ( typeof elem.getBoundingClientRect !== "undefined" ) {
    box = elem.getBoundingClientRect();
  }
  win = getWindow( doc );
  clientTop  = docElem.clientTop  || body.clientTop  || 0;
  clientLeft = docElem.clientLeft || body.clientLeft || 0;
  scrollTop  = win.pageYOffset || docElem.scrollTop;
  scrollLeft = win.pageXOffset || docElem.scrollLeft;
  return {
    top: box.top  + scrollTop  - clientTop,
    left: box.left + scrollLeft - clientLeft
  };
};

jQuery.offset = {

  bodyOffset: function( body ) {
    var top = body.offsetTop,
      left = body.offsetLeft;

    if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
      top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
      left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
    }

    return { top: top, left: left };
  },

  setOffset: function( elem, options, i ) {
    var position = jQuery.css( elem, "position" );

    // set position first, in-case top/left are set even on static elem
    if ( position === "static" ) {
      elem.style.position = "relative";
    }

    var curElem = jQuery( elem ),
      curOffset = curElem.offset(),
      curCSSTop = jQuery.css( elem, "top" ),
      curCSSLeft = jQuery.css( elem, "left" ),
      calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
      props = {}, curPosition = {}, curTop, curLeft;

    // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
    if ( calculatePosition ) {
      curPosition = curElem.position();
      curTop = curPosition.top;
      curLeft = curPosition.left;
    } else {
      curTop = parseFloat( curCSSTop ) || 0;
      curLeft = parseFloat( curCSSLeft ) || 0;
    }

    if ( jQuery.isFunction( options ) ) {
      options = options.call( elem, i, curOffset );
    }

    if ( options.top != null ) {
      props.top = ( options.top - curOffset.top ) + curTop;
    }
    if ( options.left != null ) {
      props.left = ( options.left - curOffset.left ) + curLeft;
    }

    if ( "using" in options ) {
      options.using.call( elem, props );
    } else {
      curElem.css( props );
    }
  }
};


jQuery.fn.extend({

  position: function() {
    if ( !this[0] ) {
      return;
    }

    var elem = this[0],

    // Get *real* offsetParent
    offsetParent = this.offsetParent(),

    // Get correct offsets
    offset       = this.offset(),
    parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

    // Subtract element margins
    // note: when an element has margin: auto the offsetLeft and marginLeft
    // are the same in Safari causing offset.left to incorrectly be 0
    offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
    offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

    // Add offsetParent borders
    parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
    parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

    // Subtract the two offsets
    return {
      top:  offset.top  - parentOffset.top,
      left: offset.left - parentOffset.left
    };
  },

  offsetParent: function() {
    return this.map(function() {
      var offsetParent = this.offsetParent || document.body;
      while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || document.body;
    });
  }
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
  var top = /Y/.test( prop );

  jQuery.fn[ method ] = function( val ) {
    return jQuery.access( this, function( elem, method, val ) {
      var win = getWindow( elem );

      if ( val === undefined ) {
        return win ? (prop in win) ? win[ prop ] :
          win.document.documentElement[ method ] :
          elem[ method ];
      }

      if ( win ) {
        win.scrollTo(
          !top ? val : jQuery( win ).scrollLeft(),
           top ? val : jQuery( win ).scrollTop()
        );

      } else {
        elem[ method ] = val;
      }
    }, method, val, arguments.length, null );
  };
});

function getWindow( elem ) {
  return jQuery.isWindow( elem ) ?
    elem :
    elem.nodeType === 9 ?
      elem.defaultView || elem.parentWindow :
      false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
  jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
    // margin is only for outerHeight, outerWidth
    jQuery.fn[ funcName ] = function( margin, value ) {
      var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
        extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

      return jQuery.access( this, function( elem, type, value ) {
        var doc;

        if ( jQuery.isWindow( elem ) ) {
          // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
          // isn't a whole lot we can do. See pull request at this URL for discussion:
          // https://github.com/jquery/jquery/pull/764
          return elem.document.documentElement[ "client" + name ];
        }

        // Get document width or height
        if ( elem.nodeType === 9 ) {
          doc = elem.documentElement;

          // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
          // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
          return Math.max(
            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
            elem.body[ "offset" + name ], doc[ "offset" + name ],
            doc[ "client" + name ]
          );
        }

        return value === undefined ?
          // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css( elem, type, value, extra ) :

          // Set width or height on the element
          jQuery.style( elem, type, value, extra );
      }, type, chainable ? margin : undefined, chainable, null );
    };
  });
});
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
  define( "jquery", [], function () { return jQuery; } );
}

})( window );
;

//     Underscore.js 1.4.0
//     http://underscorejs.org
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.4.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return arguments.length > 2 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    var found = false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // with specific `key:value` pairs.
  _.where = function(obj, attrs) {
    if (_.isEmpty(attrs)) return [];
    return _.filter(obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (obj.length === +obj.length) return slice.call(obj);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, fromIndex) {
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item, fromIndex);
    var i = (fromIndex != null ? fromIndex : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more, result;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) {
          result = func.apply(context, args);
        }
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        throttling = true;
        result = func.apply(context, args);
      }
      whenDone();
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return _.isNumber(obj) && isFinite(obj);
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + (0 | Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });
      source +=
        escape ? "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" :
        interpolate ? "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" :
        evaluate ? "';\n" + evaluate + "\n__p+='" : '';
      index = offset + match.length;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);
;

//     Backbone.js 0.9.2

//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(){

  // Initial Setup
  // -------------

  // Save a reference to the global object (`window` in the browser, `global`
  // on the server).
  var root = this;

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to slice/splice.
  var slice = Array.prototype.slice;
  var splice = Array.prototype.splice;

  // The top-level namespace. All public Backbone classes and modules will
  // be attached to this. Exported for both CommonJS and the browser.
  var Backbone;
  if (typeof exports !== 'undefined') {
    Backbone = exports;
  } else {
    Backbone = root.Backbone = {};
  }

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '0.9.2';

  // Require Underscore, if we're on the server, and it's not already present.
  var _ = root._;
  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');

  // For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.
  var $ = root.jQuery || root.Zepto || root.ender;

  // Set the JavaScript library that will be used for DOM manipulation and
  // Ajax calls (a.k.a. the `$` variable). By default Backbone will use: jQuery,
  // Zepto, or Ender; but the `setDomLibrary()` method lets you inject an
  // alternate JavaScript library (or a mock library for testing your views
  // outside of a browser).
  Backbone.setDomLibrary = function(lib) {
    $ = lib;
  };

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // -----------------

  // Regular expression used to split event strings
  var eventSplitter = /\s+/;

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback functions
  // to an event; trigger`-ing an event fires all callbacks in succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind one or more space separated events, `events`, to a `callback`
    // function. Passing `"all"` will bind the callback to all events fired.
    on: function(events, callback, context) {

      var calls, event, node, tail, list;
      if (!callback) return this;
      events = events.split(eventSplitter);
      calls = this._callbacks || (this._callbacks = {});

      // Create an immutable callback list, allowing traversal during
      // modification.  The tail is an empty object that will always be used
      // as the next node.
      while (event = events.shift()) {
        list = calls[event];
        node = list ? list.tail : {};
        node.next = tail = {};
        node.context = context;
        node.callback = callback;
        calls[event] = {tail: tail, next: list ? list.next : node};
      }

      return this;
    },

    // Remove one or many callbacks. If `context` is null, removes all callbacks
    // with that function. If `callback` is null, removes all callbacks for the
    // event. If `events` is null, removes all bound callbacks for all events.
    off: function(events, callback, context) {
      var event, calls, node, tail, cb, ctx;

      // No events, or removing *all* events.
      if (!(calls = this._callbacks)) return;
      if (!(events || callback || context)) {
        delete this._callbacks;
        return this;
      }

      // Loop through the listed events and contexts, splicing them out of the
      // linked list of callbacks if appropriate.
      events = events ? events.split(eventSplitter) : _.keys(calls);
      while (event = events.shift()) {
        node = calls[event];
        delete calls[event];
        if (!node || !(callback || context)) continue;
        // Create a new list, omitting the indicated callbacks.
        tail = node.tail;
        while ((node = node.next) !== tail) {
          cb = node.callback;
          ctx = node.context;
          if ((callback && cb !== callback) || (context && ctx !== context)) {
            this.on(event, cb, ctx);
          }
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(events) {
      var event, node, calls, tail, args, all, rest;
      if (!(calls = this._callbacks)) return this;
      all = calls.all;
      events = events.split(eventSplitter);
      rest = slice.call(arguments, 1);

      // For each event, walk through the linked list of callbacks twice,
      // first to trigger the event, then to trigger any `"all"` callbacks.
      while (event = events.shift()) {
        if (node = calls[event]) {
          tail = node.tail;
          while ((node = node.next) !== tail) {
            node.callback.apply(node.context || this, rest);
          }
        }
        if (node = all) {
          tail = node.tail;
          args = [event].concat(rest);
          while ((node = node.next) !== tail) {
            node.callback.apply(node.context || this, args);
          }
        }
      }

      return this;
    }

  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Backbone.Model
  // --------------

  // Create a new model, with defined attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var defaults;
    attributes || (attributes = {});
    if (options && options.parse) attributes = this.parse(attributes);
    if (defaults = getValue(this, 'defaults')) {
      attributes = _.extend({}, defaults, attributes);
    }
    if (options && options.collection) this.collection = options.collection;
    this.attributes = {};
    this._escapedAttributes = {};
    this.cid = _.uniqueId('c');
    this.changed = {};
    this._silent = {};
    this._pending = {};
    this.set(attributes, {silent: true});
    // Reset change tracking.
    this.changed = {};
    this._silent = {};
    this._pending = {};
    this._previousAttributes = _.clone(this.attributes);
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // A hash of attributes that have silently changed since the last time
    // `change` was called.  Will become pending attributes on the next call.
    _silent: null,

    // A hash of attributes that have changed since the last `'change'` event
    // began.
    _pending: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      var html;
      if (html = this._escapedAttributes[attr]) return html;
      var val = this.get(attr);
      return this._escapedAttributes[attr] = _.escape(val == null ? '' : '' + val);
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"` unless
    // you choose to silence it.
    set: function(key, value, options) {
      var attrs, attr, val;

      // Handle both
      if (_.isObject(key) || key == null) {
        attrs = key;
        options = value;
      } else {
        attrs = {};
        attrs[key] = value;
      }

      // Extract attributes and options.
      options || (options = {});
      if (!attrs) return this;
      if (attrs instanceof Model) attrs = attrs.attributes;
      if (options.unset) for (attr in attrs) attrs[attr] = void 0;

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      var changes = options.changes = {};
      var now = this.attributes;
      var escaped = this._escapedAttributes;
      var prev = this._previousAttributes || {};

      // For each `set` attribute...
      for (attr in attrs) {
        val = attrs[attr];

        // If the new and current value differ, record the change.
        if (!_.isEqual(now[attr], val) || (options.unset && _.has(now, attr))) {
          delete escaped[attr];
          (options.silent ? this._silent : changes)[attr] = true;
        }

        // Update or delete the current value.
        options.unset ? delete now[attr] : now[attr] = val;

        // If the new and previous value differ, record the change.  If not,
        // then remove changes for this attribute.
        if (!_.isEqual(prev[attr], val) || (_.has(now, attr) != _.has(prev, attr))) {
          this.changed[attr] = val;
          if (!options.silent) this._pending[attr] = true;
        } else {
          delete this.changed[attr];
          delete this._pending[attr];
        }
      }

      // Fire the `"change"` events.
      if (!options.silent) this.change(options);
      return this;
    },

    // Remove an attribute from the model, firing `"change"` unless you choose
    // to silence it. `unset` is a noop if the attribute doesn't exist.
    unset: function(attr, options) {
      (options || (options = {})).unset = true;
      return this.set(attr, null, options);
    },

    // Clear all attributes on the model, firing `"change"` unless you choose
    // to silence it.
    clear: function(options) {
      (options || (options = {})).unset = true;
      return this.set(_.clone(this.attributes), options);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overriden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      options.success = function(resp, status, xhr) {
        if (!model.set(model.parse(resp, xhr), options)) return false;
        if (success) success(model, resp);
      };
      options.error = Backbone.wrapError(options.error, model, options);
      return (this.sync || Backbone.sync).call(this, 'read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, value, options) {
      var attrs, current;

      // Handle both `("key", value)` and `({key: value})` -style calls.
      if (_.isObject(key) || key == null) {
        attrs = key;
        options = value;
      } else {
        attrs = {};
        attrs[key] = value;
      }
      options = options ? _.clone(options) : {};

      // If we're "wait"-ing to set changed attributes, validate early.
      if (options.wait) {
        if (!this._validate(attrs, options)) return false;
        current = _.clone(this.attributes);
      }

      // Regular saves `set` attributes before persisting to the server.
      var silentOptions = _.extend({}, options, {silent: true});
      if (attrs && !this.set(attrs, options.wait ? silentOptions : options)) {
        return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      options.success = function(resp, status, xhr) {
        var serverAttrs = model.parse(resp, xhr);
        if (options.wait) {
          delete options.wait;
          serverAttrs = _.extend(attrs || {}, serverAttrs);
        }
        if (!model.set(serverAttrs, options)) return false;
        if (success) {
          success(model, resp);
        } else {
          model.trigger('sync', model, resp, options);
        }
      };

      // Finish configuring and sending the Ajax request.
      options.error = Backbone.wrapError(options.error, model, options);
      var method = this.isNew() ? 'create' : 'update';
      var xhr = (this.sync || Backbone.sync).call(this, method, this, options);
      if (options.wait) this.set(current, silentOptions);
      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var triggerDestroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      if (this.isNew()) {
        triggerDestroy();
        return false;
      }

      options.success = function(resp) {
        if (options.wait) triggerDestroy();
        if (success) {
          success(model, resp);
        } else {
          model.trigger('sync', model, resp, options);
        }
      };

      options.error = Backbone.wrapError(options.error, model, options);
      var xhr = (this.sync || Backbone.sync).call(this, 'delete', this, options);
      if (!options.wait) triggerDestroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();
      if (this.isNew()) return base;
      return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, xhr) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return this.id == null;
    },

    // Call this method to manually fire a `"change"` event for this model and
    // a `"change:attribute"` event for each changed attribute.
    // Calling this will cause all objects observing the model to update.
    change: function(options) {
      options || (options = {});
      var changing = this._changing;
      this._changing = true;

      // Silent changes become pending changes.
      for (var attr in this._silent) this._pending[attr] = true;

      // Silent changes are triggered.
      var changes = _.extend({}, options.changes, this._silent);
      this._silent = {};
      for (var attr in changes) {
        this.trigger('change:' + attr, this, this.get(attr), options);
      }
      if (changing) return this;

      // Continue firing `"change"` events while there are pending changes.
      while (!_.isEmpty(this._pending)) {
        this._pending = {};
        this.trigger('change', this, options);
        // Pending and silent changes still remain.
        for (var attr in this.changed) {
          if (this._pending[attr] || this._silent[attr]) continue;
          delete this.changed[attr];
        }
        this._previousAttributes = _.clone(this.attributes);
      }

      this._changing = false;
      return this;
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (!arguments.length) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false, old = this._previousAttributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (!arguments.length || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Check if the model is currently in a valid state. It's only possible to
    // get into an *invalid* state if you're using silent changes.
    isValid: function() {
      return !this.validate(this.attributes);
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. If a specific `error` callback has
    // been passed, call that instead of firing the general `"error"` event.
    _validate: function(attrs, options) {
      if (options.silent || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validate(attrs, options);
      if (!error) return true;
      if (options && options.error) {
        options.error(this, error, options);
      } else {
        this.trigger('error', this, error, options);
      }
      return false;
    }

  });

  // Backbone.Collection
  // -------------------

  // Provides a standard collection class for our sets of models, ordered
  // or unordered. If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, {silent: true, parse: options.parse});
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Add a model, or list of models to the set. Pass **silent** to avoid
    // firing the `add` event for every new model.
    add: function(models, options) {
      var i, index, length, model, cid, id, cids = {}, ids = {}, dups = [];
      options || (options = {});
      models = _.isArray(models) ? models.slice() : [models];

      // Begin by turning bare objects into model references, and preventing
      // invalid models or duplicate models from being added.
      for (i = 0, length = models.length; i < length; i++) {
        if (!(model = models[i] = this._prepareModel(models[i], options))) {
          throw new Error("Can't add an invalid model to a collection");
        }
        cid = model.cid;
        id = model.id;
        if (cids[cid] || this._byCid[cid] || ((id != null) && (ids[id] || this._byId[id]))) {
          dups.push(i);
          continue;
        }
        cids[cid] = ids[id] = model;
      }

      // Remove duplicates.
      i = dups.length;
      while (i--) {
        models.splice(dups[i], 1);
      }

      // Listen to added models' events, and index models for lookup by
      // `id` and by `cid`.
      for (i = 0, length = models.length; i < length; i++) {
        (model = models[i]).on('all', this._onModelEvent, this);
        this._byCid[model.cid] = model;
        if (model.id != null) this._byId[model.id] = model;
      }

      // Insert models into the collection, re-sorting if needed, and triggering
      // `add` events unless silenced.
      this.length += length;
      index = options.at != null ? options.at : this.models.length;
      splice.apply(this.models, [index, 0].concat(models));
      if (this.comparator) this.sort({silent: true});
      if (options.silent) return this;
      for (i = 0, length = this.models.length; i < length; i++) {
        if (!cids[(model = this.models[i]).cid]) continue;
        options.index = i;
        model.trigger('add', model, this, options);
      }
      return this;
    },

    // Remove a model, or a list of models from the set. Pass silent to avoid
    // firing the `remove` event for every model removed.
    remove: function(models, options) {
      var i, l, index, model;
      options || (options = {});
      models = _.isArray(models) ? models.slice() : [models];
      for (i = 0, l = models.length; i < l; i++) {
        model = this.getByCid(models[i]) || this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byCid[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return this;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, options);
      return model;
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({at: 0}, options));
      return model;
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Get a model from the set by id.
    get: function(id) {
      if (id == null) return void 0;
      return this._byId[id.id != null ? id.id : id];
    },

    // Get a model from the set by client id.
    getByCid: function(cid) {
      return cid && this._byCid[cid.cid || cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of `filter`.
    where: function(attrs) {
      if (_.isEmpty(attrs)) return [];
      return this.filter(function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      options || (options = {});
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      var boundComparator = _.bind(this.comparator, this);
      if (this.comparator.length == 1) {
        this.models = this.sortBy(boundComparator);
      } else {
        this.models.sort(boundComparator);
      }
      if (!options.silent) this.trigger('reset', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.map(this.models, function(model){ return model.get(attr); });
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any `add` or `remove` events. Fires `reset` when finished.
    reset: function(models, options) {
      models  || (models = []);
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i]);
      }
      this._reset();
      this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return this;
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `add: true` is passed, appends the
    // models to the collection instead of resetting.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === undefined) options.parse = true;
      var collection = this;
      var success = options.success;
      options.success = function(resp, status, xhr) {
        collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);
        if (success) success(collection, resp);
      };
      options.error = Backbone.wrapError(options.error, collection, options);
      return (this.sync || Backbone.sync).call(this, 'read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      var coll = this;
      options = options ? _.clone(options) : {};
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!options.wait) coll.add(model, options);
      var success = options.success;
      options.success = function(nextModel, resp, xhr) {
        if (options.wait) coll.add(nextModel, options);
        if (success) {
          success(nextModel, resp);
        } else {
          nextModel.trigger('sync', model, resp, options);
        }
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, xhr) {
      return resp;
    },

    // Proxy to _'s chain. Can't be proxied the same way the rest of the
    // underscore methods are proxied because it relies on the underscore
    // constructor.
    chain: function () {
      return _(this.models).chain();
    },

    // Reset all internal state. Called when the collection is reset.
    _reset: function(options) {
      this.length = 0;
      this.models = [];
      this._byId  = {};
      this._byCid = {};
    },

    // Prepare a model or hash of attributes to be added to this collection.
    _prepareModel: function(model, options) {
      options || (options = {});
      if (!(model instanceof Model)) {
        var attrs = model;
        options.collection = this;
        model = new this.model(attrs, options);
        if (!model._validate(model.attributes, options)) model = false;
      } else if (!model.collection) {
        model.collection = this;
      }
      return model;
    },

    // Internal method to remove a model's ties to a collection.
    _removeReference: function(model) {
      if (this == model.collection) {
        delete model.collection;
      }
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event == 'add' || event == 'remove') && collection != this) return;
      if (event == 'destroy') {
        this.remove(model, options);
      }
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',
    'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',
    'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',
    'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',
    'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      return _[method].apply(_, [this.models].concat(_.toArray(arguments)));
    };
  });

  // Backbone.Router
  // -------------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var namedParam    = /:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[-[\]{}()+?.,\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      Backbone.history || (Backbone.history = new History);
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (!callback) callback = this[name];
      Backbone.history.route(route, _.bind(function(fragment) {
        var args = this._extractParameters(route, fragment);
        callback && callback.apply(this, args);
        this.trigger.apply(this, ['route:' + name].concat(args));
        Backbone.history.trigger('route', this, name, args);
      }, this));
      return this;
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      var routes = [];
      for (var route in this.routes) {
        routes.unshift([route, this.routes[route]]);
      }
      for (var i = 0, l = routes.length; i < l; i++) {
        this.route(routes[i][0], routes[i][1], this[routes[i][1]]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(namedParam, '([^\/]+)')
                   .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted parameters.
    _extractParameters: function(route, fragment) {
      return route.exec(fragment).slice(1);
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on URL fragments. If the
  // browser does not support `onhashchange`, falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');
  };

  // Cached regex for cleaning leading hashes and slashes .
  var routeStripper = /^[#\/]/;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(windowOverride) {
      var loc = windowOverride ? windowOverride.location : window.location;
      var match = loc.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || forcePushState) {
          fragment = window.location.pathname;
          var search = window.location.search;
          if (search) fragment += search;
        } else {
          fragment = this.getHash();
        }
      }
      if (!fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({}, {root: '/'}, this.options, options);
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && window.history && window.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      if (oldIE) {
        this.iframe = $('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        $(window).bind('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        $(window).bind('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = window.location;
      var atRoot  = loc.pathname == this.options.root;

      // If we've started off with a route from a `pushState`-enabled browser,
      // but we're currently in a browser that doesn't support it...
      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
        this.fragment = this.getFragment(null, true);
        window.location.replace(this.options.root + '#' + this.fragment);
        // Return immediately as browser will do redirect to new url
        return true;

      // Or if we've started out with a hash-based route, but we're currently
      // in a browser where it could be `pushState`-based instead...
      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, '');
        window.history.replaceState({}, document.title, loc.protocol + '//' + loc.host + this.options.root + this.fragment);
      }

      if (!this.options.silent) {
        return this.loadUrl();
      }
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      $(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));
      if (current == this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl() || this.loadUrl(this.getHash());
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      var matched = _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
      return matched;
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: options};
      var frag = (fragment || '').replace(routeStripper, '');
      if (this.fragment == frag) return;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        if (frag.indexOf(this.options.root) != 0) frag = this.options.root + frag;
        this.fragment = frag;
        window.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, frag);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this.fragment = frag;
        this._updateHash(window.location, frag, options.replace);
        if (this.iframe && (frag != this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a history entry on hash-tag change.
          // When replace is true, we don't want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, frag, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        window.location.assign(this.options.root + fragment);
      }
      if (options.trigger) this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        location.replace(location.toString().replace(/(javascript:|#).*$/, '') + '#' + fragment);
      } else {
        location.hash = fragment;
      }
    }
  });

  // Backbone.View
  // -------------

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be prefered to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view from the DOM. Note that the view isn't present in the
    // DOM by default, so calling this method may be a no-op.
    remove: function() {
      this.$el.remove();
      return this;
    },

    // For small amounts of DOM Elements, where a full-blown template isn't
    // needed, use **make** to manufacture elements, one at a time.
    //
    //     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));
    //
    make: function(tagName, attributes, content) {
      var el = document.createElement(tagName);
      if (attributes) $(el).attr(attributes);
      if (content) $(el).html(content);
      return el;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = (element instanceof $) ? element : $(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save'
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = getValue(this, 'events')))) return;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) throw new Error('Method "' + events[key] + '" does not exist');
        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.bind(eventName, method);
        } else {
          this.$el.delegate(selector, eventName, method);
        }
      }
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.unbind('.delegateEvents' + this.cid);
    },

    // Performs the initial configuration of a View with a set of options.
    // Keys with special meaning *(model, collection, id, className)*, are
    // attached directly to the view.
    _configure: function(options) {
      if (this.options) options = _.extend({}, this.options, options);
      for (var i = 0, l = viewOptions.length; i < l; i++) {
        var attr = viewOptions[i];
        if (options[attr]) this[attr] = options[attr];
      }
      this.options = options;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = getValue(this, 'attributes') || {};
        if (this.id) attrs.id = this.id;
        if (this.className) attrs['class'] = this.className;
        this.setElement(this.make(this.tagName, attrs), false);
      } else {
        this.setElement(this.el, false);
      }
    }

  });

  // The self-propagating extend function that Backbone classes use.
  var extend = function (protoProps, classProps) {
    var child = inherits(this, protoProps, classProps);
    child.extend = this.extend;
    return child;
  };

  // Set up inheritance for the model, collection, and view.
  Model.extend = Collection.extend = Router.extend = View.extend = extend;

  // Backbone.sync
  // -------------

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    options || (options = {});

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = getValue(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (!options.data && model && (method == 'create' || method == 'update')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(model.toJSON());
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (Backbone.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (Backbone.emulateHTTP) {
      if (type === 'PUT' || type === 'DELETE') {
        if (Backbone.emulateJSON) params.data._method = type;
        params.type = 'POST';
        params.beforeSend = function(xhr) {
          xhr.setRequestHeader('X-HTTP-Method-Override', type);
        };
      }
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !Backbone.emulateJSON) {
      params.processData = false;
    }

    // Make the request, allowing the user to override any Ajax options.
    return $.ajax(_.extend(params, options));
  };

  // Wrap an optional error callback with a fallback error event.
  Backbone.wrapError = function(onError, originalModel, options) {
    return function(model, resp) {
      resp = model === originalModel ? resp : model;
      if (onError) {
        onError(originalModel, resp, options);
      } else {
        originalModel.trigger('error', originalModel, resp, options);
      }
    };
  };

  // Helpers
  // -------

  // Shared empty constructor function to aid in prototype-chain creation.
  var ctor = function(){};

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var inherits = function(parent, protoProps, staticProps) {
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && protoProps.hasOwnProperty('constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ parent.apply(this, arguments); };
    }

    // Inherit class (static) properties from parent.
    _.extend(child, parent);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Add static properties to the constructor function, if supplied.
    if (staticProps) _.extend(child, staticProps);

    // Correctly set child's `prototype.constructor`.
    child.prototype.constructor = child;

    // Set a convenience property in case the parent's prototype is needed later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Helper function to get a value from a Backbone object as a property
  // or as a function.
  var getValue = function(object, prop) {
    if (!(object && object[prop])) return null;
    return _.isFunction(object[prop]) ? object[prop]() : object[prop];
  };

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

}).call(this);;

// lib/handlebars/base.js
var Handlebars = {};

Handlebars.VERSION = "1.0.beta.6";

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

var toString = Object.prototype.toString, functionType = "[object Function]";

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;


  var ret = "";
  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      for(var i=0, j=context.length; i<j; i++) {
        ret = ret + fn(context[i]);
      }
    } else {
      ret = inverse(this);
    }
    return ret;
  } else {
    return fn(context);
  }
});

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var ret = "";

  if(context && context.length > 0) {
    for(var i=0, j=context.length; i<j; i++) {
      ret = ret + fn(context[i]);
    }
  } else {
    ret = inverse(this);
  }
  return ret;
});

Handlebars.registerHelper('if', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if(!context || Handlebars.Utils.isEmpty(context)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  options.fn = inverse;
  options.inverse = fn;

  return Handlebars.helpers['if'].call(this, context, options);
});

Handlebars.registerHelper('with', function(context, options) {
  return options.fn(context);
});

Handlebars.registerHelper('log', function(context) {
  Handlebars.log(context);
});
;
// lib/handlebars/utils.js
Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  for (var p in tmp) {
    if (tmp.hasOwnProperty(p)) { this[p] = tmp[p]; }
  }

  this.message = tmp.message;
};
Handlebars.Exception.prototype = new Error;

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /&(?!\w+;)|[<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;";
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (typeof value === "undefined") {
        return true;
      } else if (value === null) {
        return true;
      } else if (value === false) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/runtime.js
Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          return Handlebars.VM.program(fn, data);
        } else if(programWrapper) {
          return programWrapper;
        } else {
          programWrapper = this.programs[i] = Handlebars.VM.program(fn);
          return programWrapper;
        }
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop
    };

    return function(context, options) {
      options = options || {};
      return templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);
    };
  },

  programWithDepth: function(fn, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 2);

    return function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
  },
  program: function(fn, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial);
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;
;

/*
Chaplin 1.0.0-pre.

Chaplin may be freely distributed under the MIT license.
For all details and documentation:
http://github.com/chaplinjs/chaplin
*/

'use strict';

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

require.define({
  'jquery': function(require, exports, module) {
    return module.exports = $;
  },
  'underscore': function(require, exports, module) {
    return module.exports = _;
  },
  'backbone': function(require, exports, module) {
    return module.exports = Backbone;
  }
});

require.define({
  'chaplin/application': function(exports, require, module) {
    var Application, Backbone, Dispatcher, Layout, Router, mediator;
    Backbone = require('backbone');
    mediator = require('chaplin/mediator');
    Dispatcher = require('chaplin/dispatcher');
    Layout = require('chaplin/views/layout');
    Router = require('chaplin/lib/router');
    return module.exports = Application = (function() {

      function Application() {}

      Application.extend = Backbone.Model.extend;

      Application.prototype.title = '';

      Application.prototype.dispatcher = null;

      Application.prototype.layout = null;

      Application.prototype.router = null;

      Application.prototype.initialize = function() {};

      Application.prototype.initDispatcher = function(options) {
        return this.dispatcher = new Dispatcher(options);
      };

      Application.prototype.initLayout = function(options) {
        var _ref;
        if (options == null) {
          options = {};
        }
        if ((_ref = options.title) == null) {
          options.title = this.title;
        }
        return this.layout = new Layout(options);
      };

      Application.prototype.initRouter = function(routes, options) {
        this.router = new Router(options);
        if (typeof routes === "function") {
          routes(this.router.match);
        }
        return this.router.startHistory();
      };

      Application.prototype.disposed = false;

      Application.prototype.dispose = function() {
        var prop, properties, _i, _len;
        if (this.disposed) {
          return;
        }
        properties = ['dispatcher', 'layout', 'router'];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          if (!(this[prop] != null)) {
            continue;
          }
          this[prop].dispose();
          delete this[prop];
        }
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Application;

    })();
  }
});

require.define({
  'chaplin/mediator': function(exports, require, module) {
    var Backbone, mediator, support, utils, _;
    _ = require('underscore');
    Backbone = require('backbone');
    support = require('chaplin/lib/support');
    utils = require('chaplin/lib/utils');
    mediator = {};
    mediator.subscribe = Backbone.Events.on;
    mediator.unsubscribe = Backbone.Events.off;
    mediator.publish = Backbone.Events.trigger;
    mediator.on = mediator.subscribe;
    mediator._callbacks = null;
    utils.readonly(mediator, 'subscribe', 'unsubscribe', 'publish', 'on');
    mediator.seal = function() {
      if (support.propertyDescriptors && Object.seal) {
        return Object.seal(mediator);
      }
    };
    utils.readonly(mediator, 'seal');
    return module.exports = mediator;
  }
});

require.define({
  'chaplin/dispatcher': function(exports, require, module) {
    var Backbone, Dispatcher, EventBroker, utils, _;
    _ = require('underscore');
    Backbone = require('backbone');
    utils = require('chaplin/lib/utils');
    EventBroker = require('chaplin/lib/event_broker');
    return module.exports = Dispatcher = (function() {

      Dispatcher.extend = Backbone.Model.extend;

      _(Dispatcher.prototype).extend(EventBroker);

      Dispatcher.prototype.previousControllerName = null;

      Dispatcher.prototype.currentControllerName = null;

      Dispatcher.prototype.currentController = null;

      Dispatcher.prototype.currentAction = null;

      Dispatcher.prototype.currentParams = null;

      Dispatcher.prototype.url = null;

      function Dispatcher() {
        this.initialize.apply(this, arguments);
      }

      Dispatcher.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        this.settings = _(options).defaults({
          controllerPath: 'controllers/',
          controllerSuffix: '_controller'
        });
        this.subscribeEvent('matchRoute', this.matchRoute);
        return this.subscribeEvent('!startupController', this.startupController);
      };

      Dispatcher.prototype.matchRoute = function(route, params) {
        return this.startupController(route.controller, route.action, params);
      };

      Dispatcher.prototype.startupController = function(controllerName, action, params) {
        var handler, isSameController;
        if (action == null) {
          action = 'index';
        }
        if (params == null) {
          params = {};
        }
        if (params.changeURL !== false) {
          params.changeURL = true;
        }
        if (params.forceStartup !== true) {
          params.forceStartup = false;
        }
        isSameController = !params.forceStartup && this.currentControllerName === controllerName && this.currentAction === action && (!this.currentParams || _(params).isEqual(this.currentParams));
        if (isSameController) {
          return;
        }
        handler = _(this.controllerLoaded).bind(this, controllerName, action, params);
        return this.loadController(controllerName, handler);
      };

      Dispatcher.prototype.loadController = function(controllerName, handler) {
        var controllerFileName, path;
        controllerFileName = utils.underscorize(controllerName) + this.settings.controllerSuffix;
        path = this.settings.controllerPath + controllerFileName;
        if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
          return require([path], handler);
        } else {
          return handler(require(path));
        }
      };

      Dispatcher.prototype.controllerLoaded = function(controllerName, action, params, ControllerConstructor) {
        var controller, currentController, currentControllerName;
        currentControllerName = this.currentControllerName || null;
        currentController = this.currentController || null;
        if (currentController) {
          this.publishEvent('beforeControllerDispose', currentController);
          currentController.dispose(params, controllerName);
        }
        controller = new ControllerConstructor(params, currentControllerName);
        controller[action](params, currentControllerName);
        if (controller.redirected) {
          return;
        }
        this.previousControllerName = currentControllerName;
        this.currentControllerName = controllerName;
        this.currentController = controller;
        this.currentAction = action;
        this.currentParams = params;
        this.adjustURL(controller, params);
        return this.publishEvent('startupController', {
          previousControllerName: this.previousControllerName,
          controller: this.currentController,
          controllerName: this.currentControllerName,
          params: this.currentParams
        });
      };

      Dispatcher.prototype.adjustURL = function(controller, params) {
        var url;
        if (params.path || params.path === '') {
          url = params.path;
        } else if (typeof controller.historyURL === 'function') {
          url = controller.historyURL(params);
        } else if (typeof controller.historyURL === 'string') {
          url = controller.historyURL;
        } else {
          throw new Error('Dispatcher#adjustURL: controller for ' + ("" + this.currentControllerName + " does not provide a historyURL"));
        }
        if (params.changeURL) {
          this.publishEvent('!router:changeURL', url);
        }
        return this.url = url;
      };

      Dispatcher.prototype.disposed = false;

      Dispatcher.prototype.dispose = function() {
        if (this.disposed) {
          return;
        }
        this.unsubscribeAllEvents();
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Dispatcher;

    })();
  }
});

require.define({
  'chaplin/controllers/controller': function(exports, require, module) {
    var Backbone, Controller, EventBroker, _;
    _ = require('underscore');
    Backbone = require('backbone');
    EventBroker = require('chaplin/lib/event_broker');
    return module.exports = Controller = (function() {

      Controller.extend = Backbone.Model.extend;

      _(Controller.prototype).extend(EventBroker);

      Controller.prototype.view = null;

      Controller.prototype.currentId = null;

      Controller.prototype.redirected = false;

      function Controller() {
        this.initialize.apply(this, arguments);
      }

      Controller.prototype.initialize = function() {};

      Controller.prototype.redirectTo = function(arg1, action, params) {
        this.redirected = true;
        if (arguments.length === 1) {
          return this.publishEvent('!router:route', arg1, function(routed) {
            if (!routed) {
              throw new Error('Controller#redirectTo: no route matched');
            }
          });
        } else {
          return this.publishEvent('!startupController', arg1, action, params);
        }
      };

      Controller.prototype.disposed = false;

      Controller.prototype.dispose = function() {
        var obj, prop, properties, _i, _len;
        if (this.disposed) {
          return;
        }
        for (prop in this) {
          if (!__hasProp.call(this, prop)) continue;
          obj = this[prop];
          if (obj && typeof obj.dispose === 'function') {
            obj.dispose();
            delete this[prop];
          }
        }
        this.unsubscribeAllEvents();
        properties = ['currentId', 'redirected'];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          delete this[prop];
        }
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Controller;

    })();
  }
});

require.define({
  'chaplin/models/collection': function(exports, require, module) {
    var Backbone, Collection, EventBroker, Model, _;
    _ = require('underscore');
    Backbone = require('backbone');
    EventBroker = require('chaplin/lib/event_broker');
    Model = require('chaplin/models/model');
    return module.exports = Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      _(Collection.prototype).extend(EventBroker);

      Collection.prototype.model = Model;

      Collection.prototype.initDeferred = function() {
        return _(this).extend($.Deferred());
      };

      Collection.prototype.addAtomic = function(models, options) {
        var direction, model;
        if (options == null) {
          options = {};
        }
        if (!models.length) {
          return;
        }
        options.silent = true;
        direction = typeof options.at === 'number' ? 'pop' : 'shift';
        while (model = models[direction]()) {
          this.add(model, options);
        }
        return this.trigger('reset');
      };

      Collection.prototype.update = function(models, options) {
        var fingerPrint, i, ids, model, newFingerPrint, preexistent, _i, _ids, _len;
        if (options == null) {
          options = {};
        }
        fingerPrint = this.pluck('id').join();
        ids = _(models).pluck('id');
        newFingerPrint = ids.join();
        if (newFingerPrint !== fingerPrint) {
          _ids = _(ids);
          i = this.models.length;
          while (i--) {
            model = this.models[i];
            if (!_ids.include(model.id)) {
              this.remove(model);
            }
          }
        }
        if (newFingerPrint !== fingerPrint || options.deep) {
          for (i = _i = 0, _len = models.length; _i < _len; i = ++_i) {
            model = models[i];
            preexistent = this.get(model.id);
            if (preexistent) {
              if (options.deep) {
                preexistent.set(model);
              }
            } else {
              this.add(model, {
                at: i
              });
            }
          }
        }
      };

      Collection.prototype.disposed = false;

      Collection.prototype.dispose = function() {
        var prop, properties, _i, _len;
        if (this.disposed) {
          return;
        }
        this.trigger('dispose', this);
        this.reset([], {
          silent: true
        });
        this.unsubscribeAllEvents();
        this.off();
        if (typeof this.reject === "function") {
          this.reject();
        }
        properties = ['model', 'models', '_byId', '_byCid', '_callbacks'];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          delete this[prop];
        }
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Collection;

    })(Backbone.Collection);
  }
});

require.define({
  'chaplin/models/model': function(exports, require, module) {
    var Backbone, EventBroker, Model, utils, _;
    _ = require('underscore');
    Backbone = require('backbone');
    utils = require('chaplin/lib/utils');
    EventBroker = require('chaplin/lib/event_broker');
    return module.exports = Model = (function(_super) {
      var serializeAttributes;

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      _(Model.prototype).extend(EventBroker);

      Model.prototype.initDeferred = function() {
        return _(this).extend($.Deferred());
      };

      Model.prototype.getAttributes = function() {
        return this.attributes;
      };

      serializeAttributes = function(model, attributes, modelStack) {
        var delegator, item, key, value;
        if (!modelStack) {
          delegator = utils.beget(attributes);
          modelStack = [model];
        } else {
          modelStack.push(model);
        }
        for (key in attributes) {
          value = attributes[key];
          if (value instanceof Backbone.Model) {
            if (delegator == null) {
              delegator = utils.beget(attributes);
            }
            delegator[key] = value === model || __indexOf.call(modelStack, value) >= 0 ? null : serializeAttributes(value, value.getAttributes(), modelStack);
          } else if (value instanceof Backbone.Collection) {
            if (delegator == null) {
              delegator = utils.beget(attributes);
            }
            delegator[key] = (function() {
              var _i, _len, _ref, _results;
              _ref = value.models;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                _results.push(serializeAttributes(item, item.getAttributes(), modelStack));
              }
              return _results;
            })();
          }
        }
        modelStack.pop();
        return delegator || attributes;
      };

      Model.prototype.serialize = function() {
        return serializeAttributes(this, this.getAttributes());
      };

      Model.prototype.disposed = false;

      Model.prototype.dispose = function() {
        var prop, properties, _i, _len;
        if (this.disposed) {
          return;
        }
        this.trigger('dispose', this);
        this.unsubscribeAllEvents();
        this.off();
        if (typeof this.reject === "function") {
          this.reject();
        }
        properties = ['collection', 'attributes', 'changed', '_escapedAttributes', '_previousAttributes', '_silent', '_pending', '_callbacks'];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          delete this[prop];
        }
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Model;

    })(Backbone.Model);
  }
});

require.define({
  'chaplin/views/layout': function(exports, require, module) {
    var $, Backbone, EventBroker, Layout, utils, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    utils = require('chaplin/lib/utils');
    EventBroker = require('chaplin/lib/event_broker');
    return module.exports = Layout = (function() {

      Layout.extend = Backbone.Model.extend;

      _(Layout.prototype).extend(EventBroker);

      Layout.prototype.title = '';

      Layout.prototype.events = {};

      Layout.prototype.el = document;

      Layout.prototype.$el = $(document);

      Layout.prototype.cid = 'chaplin-layout';

      function Layout() {
        this.openLink = __bind(this.openLink, this);
        this.initialize.apply(this, arguments);
      }

      Layout.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        this.title = options.title;
        this.settings = _(options).defaults({
          titleTemplate: _.template("<%= subtitle %> \u2013 <%= title %>"),
          openExternalToBlank: false,
          routeLinks: 'a, .go-to',
          skipRouting: '.noscript',
          scrollTo: [0, 0]
        });
        this.subscribeEvent('beforeControllerDispose', this.hideOldView);
        this.subscribeEvent('startupController', this.showNewView);
        this.subscribeEvent('startupController', this.adjustTitle);
        if (this.settings.routeLinks) {
          this.startLinkRouting();
        }
        return this.delegateEvents();
      };

      Layout.prototype.delegateEvents = Backbone.View.prototype.delegateEvents;

      Layout.prototype.undelegateEvents = Backbone.View.prototype.undelegateEvents;

      Layout.prototype.hideOldView = function(controller) {
        var scrollTo, view;
        scrollTo = this.settings.scrollTo;
        if (scrollTo) {
          window.scrollTo(scrollTo[0], scrollTo[1]);
        }
        view = controller.view;
        if (view) {
          return view.$el.css('display', 'none');
        }
      };

      Layout.prototype.showNewView = function(context) {
        var view;
        view = context.controller.view;
        if (view) {
          return view.$el.css({
            display: 'block',
            opacity: 1,
            visibility: 'visible'
          });
        }
      };

      Layout.prototype.adjustTitle = function(context) {
        var subtitle, title;
        title = this.title || '';
        subtitle = context.controller.title || '';
        title = this.settings.titleTemplate({
          title: title,
          subtitle: subtitle
        });
        return setTimeout((function() {
          return document.title = title;
        }), 50);
      };

      Layout.prototype.startLinkRouting = function() {
        if (this.settings.routeLinks) {
          return $(document).on('click', this.settings.routeLinks, this.openLink);
        }
      };

      Layout.prototype.stopLinkRouting = function() {
        if (this.settings.routeLinks) {
          return $(document).off('click', this.settings.routeLinks);
        }
      };

      Layout.prototype.openLink = function(event) {
        var $el, el, href, internal, isAnchor, path, skipRouting, type, _ref, _ref1;
        if (utils.modifierKeyPressed(event)) {
          return;
        }
        el = event.currentTarget;
        $el = $(el);
        isAnchor = el.nodeName === 'A';
        href = $el.attr('href') || $el.data('href') || null;
        if (href === null || href === void 0 || href === '' || href.charAt(0) === '#') {
          return;
        }
        if (isAnchor && ($el.attr('target') === '_blank' || $el.attr('rel') === 'external' || ((_ref = el.protocol) !== 'http:' && _ref !== 'https:' && _ref !== 'file:'))) {
          return;
        }
        skipRouting = this.settings.skipRouting;
        type = typeof skipRouting;
        if (type === 'function' && !skipRouting(href, el) || type === 'string' && $el.is(skipRouting)) {
          return;
        }
        internal = !isAnchor || ((_ref1 = el.hostname) === location.hostname || _ref1 === '');
        if (!internal) {
          if (this.settings.openExternalToBlank) {
            event.preventDefault();
            window.open(el.href);
          }
          return;
        }
        if (isAnchor) {
          path = el.pathname + el.search;
          if (path.charAt(0) !== '/') {
            path = "/" + path;
          }
        } else {
          path = href;
        }
        this.publishEvent('!router:route', path, function(routed) {
          if (routed) {
            event.preventDefault();
          } else if (!isAnchor) {
            location.href = path;
          }
        });
      };

      Layout.prototype.disposed = false;

      Layout.prototype.dispose = function() {
        if (this.disposed) {
          return;
        }
        this.stopLinkRouting();
        this.unsubscribeAllEvents();
        this.undelegateEvents();
        delete this.title;
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Layout;

    })();
  }
});

require.define({
  'chaplin/views/view': function(exports, require, module) {
    var $, Backbone, EventBroker, Model, View, utils, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    utils = require('chaplin/lib/utils');
    EventBroker = require('chaplin/lib/event_broker');
    Model = require('chaplin/models/model');
    return module.exports = View = (function(_super) {

      __extends(View, _super);

      _(View.prototype).extend(EventBroker);

      View.prototype.autoRender = false;

      View.prototype.container = null;

      View.prototype.containerMethod = 'append';

      View.prototype.subviews = null;

      View.prototype.subviewsByName = null;

      View.prototype.wrapMethod = function(name) {
        var func, instance;
        instance = this;
        func = instance[name];
        instance["" + name + "IsWrapped"] = true;
        return instance[name] = function() {
          if (this.disposed) {
            return false;
          }
          func.apply(instance, arguments);
          instance["after" + (utils.upcase(name))].apply(instance, arguments);
          return instance;
        };
      };

      function View() {
        if (this.initialize !== View.prototype.initialize) {
          this.wrapMethod('initialize');
        }
        if (this.render !== View.prototype.render) {
          this.wrapMethod('render');
        } else {
          this.render = _(this.render).bind(this);
        }
        View.__super__.constructor.apply(this, arguments);
      }

      View.prototype.initialize = function(options) {
        var prop, _i, _len, _ref;
        if (options) {
          _ref = ['autoRender', 'container', 'containerMethod'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            prop = _ref[_i];
            if (options[prop] != null) {
              this[prop] = options[prop];
            }
          }
        }
        this.subviews = [];
        this.subviewsByName = {};
        if (this.model || this.collection) {
          this.modelBind('dispose', this.dispose);
        }
        if (!this.initializeIsWrapped) {
          return this.afterInitialize();
        }
      };

      View.prototype.afterInitialize = function() {
        if (this.autoRender) {
          return this.render();
        }
      };

      View.prototype.delegate = function(eventType, second, third) {
        var handler, selector;
        if (typeof eventType !== 'string') {
          throw new TypeError('View#delegate: first argument must be a string');
        }
        if (arguments.length === 2) {
          handler = second;
        } else if (arguments.length === 3) {
          selector = second;
          if (typeof selector !== 'string') {
            throw new TypeError('View#delegate: ' + 'second argument must be a string');
          }
          handler = third;
        } else {
          throw new TypeError('View#delegate: ' + 'only two or three arguments are allowed');
        }
        if (typeof handler !== 'function') {
          throw new TypeError('View#delegate: ' + 'handler argument must be function');
        }
        eventType += ".delegate" + this.cid;
        handler = _(handler).bind(this);
        if (selector) {
          this.$el.on(eventType, selector, handler);
        } else {
          this.$el.on(eventType, handler);
        }
        return handler;
      };

      View.prototype.undelegate = function() {
        return this.$el.unbind(".delegate" + this.cid);
      };

      View.prototype.modelBind = function(type, handler) {
        var modelOrCollection;
        if (typeof type !== 'string') {
          throw new TypeError('View#modelBind: ' + 'type must be a string');
        }
        if (typeof handler !== 'function') {
          throw new TypeError('View#modelBind: ' + 'handler argument must be function');
        }
        modelOrCollection = this.model || this.collection;
        if (!modelOrCollection) {
          throw new TypeError('View#modelBind: no model or collection set');
        }
        modelOrCollection.off(type, handler, this);
        return modelOrCollection.on(type, handler, this);
      };

      View.prototype.modelUnbind = function(type, handler) {
        var modelOrCollection;
        if (typeof type !== 'string') {
          throw new TypeError('View#modelUnbind: ' + 'type argument must be a string');
        }
        if (typeof handler !== 'function') {
          throw new TypeError('View#modelUnbind: ' + 'handler argument must be a function');
        }
        modelOrCollection = this.model || this.collection;
        if (!modelOrCollection) {
          return;
        }
        return modelOrCollection.off(type, handler);
      };

      View.prototype.modelUnbindAll = function() {
        var modelOrCollection;
        modelOrCollection = this.model || this.collection;
        if (!modelOrCollection) {
          return;
        }
        return modelOrCollection.off(null, null, this);
      };

      View.prototype.pass = function(attribute, selector) {
        var _this = this;
        return this.modelBind("change:" + attribute, function(model, value) {
          var $el;
          $el = _this.$(selector);
          if ($el.is('input, textarea, select, button')) {
            return $el.val(value);
          } else {
            return $el.text(value);
          }
        });
      };

      View.prototype.subview = function(name, view) {
        if (name && view) {
          this.removeSubview(name);
          this.subviews.push(view);
          this.subviewsByName[name] = view;
          return view;
        } else if (name) {
          return this.subviewsByName[name];
        }
      };

      View.prototype.removeSubview = function(nameOrView) {
        var index, name, otherName, otherView, view, _ref;
        if (!nameOrView) {
          return;
        }
        if (typeof nameOrView === 'string') {
          name = nameOrView;
          view = this.subviewsByName[name];
        } else {
          view = nameOrView;
          _ref = this.subviewsByName;
          for (otherName in _ref) {
            otherView = _ref[otherName];
            if (view === otherView) {
              name = otherName;
              break;
            }
          }
        }
        if (!(name && view && view.dispose)) {
          return;
        }
        view.dispose();
        index = _(this.subviews).indexOf(view);
        if (index > -1) {
          this.subviews.splice(index, 1);
        }
        return delete this.subviewsByName[name];
      };

      View.prototype.getTemplateData = function() {
        var items, model, modelOrCollection, templateData, _i, _len, _ref;
        if (this.model) {
          templateData = this.model.serialize();
        } else if (this.collection) {
          items = [];
          _ref = this.collection.models;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            model = _ref[_i];
            items.push(model.serialize());
          }
          templateData = {
            items: items
          };
        } else {
          templateData = {};
        }
        modelOrCollection = this.model || this.collection;
        if (modelOrCollection) {
          if (typeof modelOrCollection.state === 'function' && !('resolved' in templateData)) {
            templateData.resolved = modelOrCollection.state() === 'resolved';
          }
          if (typeof modelOrCollection.isSynced === 'function' && !('synced' in templateData)) {
            templateData.synced = modelOrCollection.isSynced();
          }
        }
        return templateData;
      };

      View.prototype.getTemplateFunction = function() {
        throw new Error('View#getTemplateFunction must be overridden');
      };

      View.prototype.render = function() {
        var html, templateFunc;
        if (this.disposed) {
          return false;
        }
        templateFunc = this.getTemplateFunction();
        if (typeof templateFunc === 'function') {
          html = templateFunc(this.getTemplateData());
          this.$el.empty().append(html);
        }
        if (!this.renderIsWrapped) {
          this.afterRender();
        }
        return this;
      };

      View.prototype.afterRender = function() {
        if (this.container) {
          $(this.container)[this.containerMethod](this.el);
          return this.trigger('addedToDOM');
        }
      };

      View.prototype.disposed = false;

      View.prototype.dispose = function() {
        var prop, properties, subview, _i, _j, _len, _len1, _ref;
        if (this.disposed) {
          return;
        }
        _ref = this.subviews;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subview = _ref[_i];
          subview.dispose();
        }
        this.unsubscribeAllEvents();
        this.modelUnbindAll();
        this.off();
        this.$el.remove();
        properties = ['el', '$el', 'options', 'model', 'collection', 'subviews', 'subviewsByName', '_callbacks'];
        for (_j = 0, _len1 = properties.length; _j < _len1; _j++) {
          prop = properties[_j];
          delete this[prop];
        }
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return View;

    })(Backbone.View);
  }
});

require.define({
  'chaplin/views/collection_view': function(exports, require, module) {
    var $, CollectionView, View, _;
    $ = require('jquery');
    _ = require('underscore');
    View = require('chaplin/views/view');
    return module.exports = CollectionView = (function(_super) {

      __extends(CollectionView, _super);

      function CollectionView() {
        this.renderAllItems = __bind(this.renderAllItems, this);

        this.showHideFallback = __bind(this.showHideFallback, this);

        this.itemsResetted = __bind(this.itemsResetted, this);

        this.itemRemoved = __bind(this.itemRemoved, this);

        this.itemAdded = __bind(this.itemAdded, this);
        return CollectionView.__super__.constructor.apply(this, arguments);
      }

      CollectionView.prototype.animationDuration = 500;

      CollectionView.prototype.useCssAnimation = false;

      CollectionView.prototype.listSelector = null;

      CollectionView.prototype.$list = null;

      CollectionView.prototype.fallbackSelector = null;

      CollectionView.prototype.$fallback = null;

      CollectionView.prototype.loadingSelector = null;

      CollectionView.prototype.$loading = null;

      CollectionView.prototype.itemSelector = null;

      CollectionView.prototype.itemView = null;

      CollectionView.prototype.filterer = null;

      CollectionView.prototype.viewsByCid = null;

      CollectionView.prototype.visibleItems = null;

      CollectionView.prototype.getView = function(model) {
        if (this.itemView != null) {
          return new this.itemView({
            model: model
          });
        } else {
          throw new Error('The CollectionView#itemView property must be\
defined (or the getView() must be overridden)');
        }
      };

      CollectionView.prototype.getTemplateFunction = function() {};

      CollectionView.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        CollectionView.__super__.initialize.apply(this, arguments);
        _(options).defaults({
          render: true,
          renderItems: true,
          filterer: null
        });
        if (options.itemView != null) {
          this.itemView = options.itemView;
        }
        this.viewsByCid = {};
        this.visibleItems = [];
        this.addCollectionListeners();
        if (options.filterer) {
          this.filter(options.filterer);
        }
        if (options.render) {
          this.render();
        }
        if (options.renderItems) {
          return this.renderAllItems();
        }
      };

      CollectionView.prototype.addCollectionListeners = function() {
        this.modelBind('add', this.itemAdded);
        this.modelBind('remove', this.itemRemoved);
        return this.modelBind('reset', this.itemsResetted);
      };

      CollectionView.prototype.itemAdded = function(item, collection, options) {
        if (options == null) {
          options = {};
        }
        return this.renderAndInsertItem(item, options.index);
      };

      CollectionView.prototype.itemRemoved = function(item) {
        return this.removeViewForItem(item);
      };

      CollectionView.prototype.itemsResetted = function() {
        return this.renderAllItems();
      };

      CollectionView.prototype.render = function() {
        CollectionView.__super__.render.apply(this, arguments);
        this.$list = this.listSelector ? this.$(this.listSelector) : this.$el;
        this.initFallback();
        return this.initLoadingIndicator();
      };

      CollectionView.prototype.initFallback = function() {
        if (!this.fallbackSelector) {
          return;
        }
        this.$fallback = this.$(this.fallbackSelector);
        this.bind('visibilityChange', this.showHideFallback);
        return this.modelBind('syncStateChange', this.showHideFallback);
      };

      CollectionView.prototype.showHideFallback = function() {
        var visible;
        visible = this.visibleItems.length === 0 && (typeof this.collection.isSynced === 'function' ? this.collection.isSynced() : true);
        return this.$fallback.css('display', visible ? 'block' : 'none');
      };

      CollectionView.prototype.initLoadingIndicator = function() {
        if (!(this.loadingSelector && typeof this.collection.isSyncing === 'function')) {
          return;
        }
        this.$loading = this.$(this.loadingSelector);
        this.modelBind('syncStateChange', this.showHideLoadingIndicator);
        return this.showHideLoadingIndicator();
      };

      CollectionView.prototype.showHideLoadingIndicator = function() {
        var visible;
        visible = this.collection.length === 0 && this.collection.isSyncing();
        return this.$loading.css('display', visible ? 'block' : 'none');
      };

      CollectionView.prototype.filter = function(filterer, callback) {
        var included, index, item, view, _i, _len, _ref,
          _this = this;
        this.filterer = filterer;
        if (callback == null) {
          callback = function(view, included) {
            var display;
            display = included ? '' : 'none';
            view.$el.stop(true, true).css('display', display);
            return _this.updateVisibleItems(view.model, included, false);
          };
        }
        if (!_(this.viewsByCid).isEmpty()) {
          _ref = this.collection.models;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            item = _ref[index];
            included = typeof filterer === 'function' ? filterer(item, index) : true;
            view = this.viewsByCid[item.cid];
            if (!view) {
              throw new Error('CollectionView#filter: ' + ("no view found for " + item.cid));
            }
            callback(view, included);
          }
        }
        return this.trigger('visibilityChange', this.visibleItems);
      };

      CollectionView.prototype.renderAllItems = function() {
        var cid, index, item, items, remainingViewsByCid, view, _i, _j, _len, _len1, _ref;
        items = this.collection.models;
        this.visibleItems = [];
        remainingViewsByCid = {};
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          view = this.viewsByCid[item.cid];
          if (view) {
            remainingViewsByCid[item.cid] = view;
          }
        }
        _ref = this.viewsByCid;
        for (cid in _ref) {
          if (!__hasProp.call(_ref, cid)) continue;
          view = _ref[cid];
          if (!(cid in remainingViewsByCid)) {
            this.removeView(cid, view);
          }
        }
        for (index = _j = 0, _len1 = items.length; _j < _len1; index = ++_j) {
          item = items[index];
          view = this.viewsByCid[item.cid];
          if (view) {
            this.insertView(item, view, index, false);
          } else {
            this.renderAndInsertItem(item, index);
          }
        }
        if (!items.length) {
          return this.trigger('visibilityChange', this.visibleItems);
        }
      };

      CollectionView.prototype.renderAndInsertItem = function(item, index) {
        var view;
        view = this.renderItem(item);
        return this.insertView(item, view, index);
      };

      CollectionView.prototype.renderItem = function(item) {
        var view;
        view = this.viewsByCid[item.cid];
        if (!view) {
          view = this.getView(item);
          this.viewsByCid[item.cid] = view;
        }
        view.render();
        return view;
      };

      CollectionView.prototype.insertView = function(item, view, index, enableAnimation) {
        var $list, $next, $previous, $viewEl, children, included, length, position, viewEl,
          _this = this;
        if (index == null) {
          index = null;
        }
        if (enableAnimation == null) {
          enableAnimation = true;
        }
        position = typeof index === 'number' ? index : this.collection.indexOf(item);
        included = typeof this.filterer === 'function' ? this.filterer(item, position) : true;
        viewEl = view.el;
        $viewEl = view.$el;
        if (included) {
          if (enableAnimation) {
            if (this.useCssAnimation) {
              $viewEl.addClass('animated-item-view');
            } else {
              $viewEl.css('opacity', 0);
            }
          }
        } else {
          $viewEl.css('display', 'none');
        }
        $list = this.$list;
        children = this.itemSelector ? $list.children(this.itemSelector) : $list.children();
        if (children.get(position) !== viewEl) {
          length = children.length;
          if (length === 0 || position === length) {
            $list.append(viewEl);
          } else {
            if (position === 0) {
              $next = children.eq(position);
              $next.before(viewEl);
            } else {
              $previous = children.eq(position - 1);
              $previous.after(viewEl);
            }
          }
        }
        view.trigger('addedToDOM');
        this.updateVisibleItems(item, included);
        if (enableAnimation && included) {
          if (this.useCssAnimation) {
            setTimeout(function() {
              return $viewEl.addClass('animated-item-view-end');
            }, 0);
          } else {
            $viewEl.animate({
              opacity: 1
            }, this.animationDuration);
          }
        }
      };

      CollectionView.prototype.removeViewForItem = function(item) {
        var view;
        this.updateVisibleItems(item, false);
        view = this.viewsByCid[item.cid];
        return this.removeView(item.cid, view);
      };

      CollectionView.prototype.removeView = function(cid, view) {
        view.dispose();
        return delete this.viewsByCid[cid];
      };

      CollectionView.prototype.updateVisibleItems = function(item, includedInFilter, triggerEvent) {
        var includedInVisibleItems, visibilityChanged, visibleItemsIndex;
        if (triggerEvent == null) {
          triggerEvent = true;
        }
        visibilityChanged = false;
        visibleItemsIndex = _(this.visibleItems).indexOf(item);
        includedInVisibleItems = visibleItemsIndex > -1;
        if (includedInFilter && !includedInVisibleItems) {
          this.visibleItems.push(item);
          visibilityChanged = true;
        } else if (!includedInFilter && includedInVisibleItems) {
          this.visibleItems.splice(visibleItemsIndex, 1);
          visibilityChanged = true;
        }
        if (visibilityChanged && triggerEvent) {
          this.trigger('visibilityChange', this.visibleItems);
        }
        return visibilityChanged;
      };

      CollectionView.prototype.dispose = function() {
        var cid, prop, properties, view, _i, _len, _ref;
        if (this.disposed) {
          return;
        }
        _ref = this.viewsByCid;
        for (cid in _ref) {
          if (!__hasProp.call(_ref, cid)) continue;
          view = _ref[cid];
          view.dispose();
        }
        properties = ['$list', '$fallback', '$loading', 'viewsByCid', 'visibleItems'];
        for (_i = 0, _len = properties.length; _i < _len; _i++) {
          prop = properties[_i];
          delete this[prop];
        }
        return CollectionView.__super__.dispose.apply(this, arguments);
      };

      return CollectionView;

    })(View);
  }
});

require.define({
  'chaplin/lib/route': function(exports, require, module) {
    var Backbone, Controller, EventBroker, Route, _;
    _ = require('underscore');
    Backbone = require('backbone');
    EventBroker = require('chaplin/lib/event_broker');
    Controller = require('chaplin/controllers/controller');
    return module.exports = Route = (function() {
      var escapeRegExp, queryStringFieldSeparator, queryStringValueSeparator, reservedParams;

      Route.extend = Backbone.Model.extend;

      _(Route.prototype).extend(EventBroker);

      reservedParams = ['path', 'changeURL'];

      escapeRegExp = /[-[\]{}()+?.,\\^$|#\s]/g;

      queryStringFieldSeparator = '&';

      queryStringValueSeparator = '=';

      function Route(pattern, target, options) {
        var _ref;
        this.options = options != null ? options : {};
        this.handler = __bind(this.handler, this);

        this.addParamName = __bind(this.addParamName, this);

        this.pattern = pattern;
        _ref = target.split('#'), this.controller = _ref[0], this.action = _ref[1];
        if (_(Controller.prototype).has(this.action)) {
          throw new Error('Route: You should not use existing controller properties as action names');
        }
        this.createRegExp();
      }

      Route.prototype.createRegExp = function() {
        var pattern;
        if (_.isRegExp(this.pattern)) {
          this.regExp = this.pattern;
          return;
        }
        pattern = this.pattern.replace(escapeRegExp, '\\$&').replace(/(?::|\*)(\w+)/g, this.addParamName);
        return this.regExp = RegExp("^" + pattern + "(?=\\?|$)");
      };

      Route.prototype.addParamName = function(match, paramName) {
        var _ref;
        if ((_ref = this.paramNames) == null) {
          this.paramNames = [];
        }
        if (_(reservedParams).include(paramName)) {
          throw new Error("Route#addParamName: parameter name " + paramName + " is reserved");
        }
        this.paramNames.push(paramName);
        if (match.charAt(0) === ':') {
          return '([^\/\?]+)';
        } else {
          return '(.*?)';
        }
      };

      Route.prototype.test = function(path) {
        var constraint, constraints, matched, name, params;
        matched = this.regExp.test(path);
        if (!matched) {
          return false;
        }
        constraints = this.options.constraints;
        if (constraints) {
          params = this.extractParams(path);
          for (name in constraints) {
            if (!__hasProp.call(constraints, name)) continue;
            constraint = constraints[name];
            if (!constraint.test(params[name])) {
              return false;
            }
          }
        }
        return true;
      };

      Route.prototype.handler = function(path, options) {
        var params;
        params = this.buildParams(path, options);
        return this.publishEvent('matchRoute', this, params);
      };

      Route.prototype.buildParams = function(path, options) {
        var params, patternParams, queryParams;
        params = {};
        queryParams = this.extractQueryParams(path);
        _(params).extend(queryParams);
        patternParams = this.extractParams(path);
        _(params).extend(patternParams);
        _(params).extend(this.options.params);
        params.changeURL = Boolean(options && options.changeURL);
        params.path = path;
        return params;
      };

      Route.prototype.extractParams = function(path) {
        var index, match, matches, paramName, params, _i, _len, _ref;
        params = {};
        matches = this.regExp.exec(path);
        _ref = matches.slice(1);
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          match = _ref[index];
          paramName = this.paramNames ? this.paramNames[index] : index;
          params[paramName] = match;
        }
        return params;
      };

      Route.prototype.extractQueryParams = function(path) {
        var current, field, matches, pair, pairs, params, queryString, regExp, value, _i, _len, _ref;
        params = {};
        regExp = /\?(.+?)(?=#|$)/;
        matches = regExp.exec(path);
        if (!matches) {
          return params;
        }
        queryString = matches[1];
        pairs = queryString.split(queryStringFieldSeparator);
        for (_i = 0, _len = pairs.length; _i < _len; _i++) {
          pair = pairs[_i];
          if (!pair.length) {
            continue;
          }
          _ref = pair.split(queryStringValueSeparator), field = _ref[0], value = _ref[1];
          if (!field.length) {
            continue;
          }
          field = decodeURIComponent(field);
          value = decodeURIComponent(value);
          current = params[field];
          if (current) {
            if (current.push) {
              current.push(value);
            } else {
              params[field] = [current, value];
            }
          } else {
            params[field] = value;
          }
        }
        return params;
      };

      return Route;

    })();
  }
});

require.define({
  'chaplin/lib/router': function(exports, require, module) {
    var Backbone, EventBroker, Route, Router, mediator, _;
    _ = require('underscore');
    Backbone = require('backbone');
    mediator = require('chaplin/mediator');
    EventBroker = require('chaplin/lib/event_broker');
    Route = require('chaplin/lib/route');
    return module.exports = Router = (function() {

      Router.extend = Backbone.Model.extend;

      _(Router.prototype).extend(EventBroker);

      function Router(options) {
        this.options = options != null ? options : {};
        this.route = __bind(this.route, this);

        this.match = __bind(this.match, this);

        _(this.options).defaults({
          pushState: true
        });
        this.subscribeEvent('!router:route', this.routeHandler);
        this.subscribeEvent('!router:changeURL', this.changeURLHandler);
        this.createHistory();
      }

      Router.prototype.createHistory = function() {
        return Backbone.history || (Backbone.history = new Backbone.History());
      };

      Router.prototype.startHistory = function() {
        return Backbone.history.start(this.options);
      };

      Router.prototype.stopHistory = function() {
        if (Backbone.History.started) {
          return Backbone.history.stop();
        }
      };

      Router.prototype.match = function(pattern, target, options) {
        var route;
        if (options == null) {
          options = {};
        }
        route = new Route(pattern, target, options);
        Backbone.history.handlers.push({
          route: route,
          callback: route.handler
        });
        return route;
      };

      Router.prototype.route = function(path) {
        var handler, _i, _len, _ref;
        path = path.replace(/^(\/#|\/)/, '');
        _ref = Backbone.history.handlers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          if (handler.route.test(path)) {
            handler.callback(path, {
              changeURL: true
            });
            return true;
          }
        }
        return false;
      };

      Router.prototype.routeHandler = function(path, callback) {
        var routed;
        routed = this.route(path);
        return typeof callback === "function" ? callback(routed) : void 0;
      };

      Router.prototype.changeURL = function(url) {
        return Backbone.history.navigate(url, {
          trigger: false
        });
      };

      Router.prototype.changeURLHandler = function(url) {
        return this.changeURL(url);
      };

      Router.prototype.disposed = false;

      Router.prototype.dispose = function() {
        if (this.disposed) {
          return;
        }
        this.stopHistory();
        delete Backbone.history;
        this.unsubscribeAllEvents();
        this.disposed = true;
        return typeof Object.freeze === "function" ? Object.freeze(this) : void 0;
      };

      return Router;

    })();
  }
});

require.define({
  'chaplin/lib/event_broker': function(exports, require, module) {
    var EventBroker, mediator;
    mediator = require('chaplin/mediator');
    EventBroker = {
      subscribeEvent: function(type, handler) {
        if (typeof type !== 'string') {
          throw new TypeError('EventBroker#subscribeEvent: ' + 'type argument must be a string');
        }
        if (typeof handler !== 'function') {
          throw new TypeError('EventBroker#subscribeEvent: ' + 'handler argument must be a function');
        }
        mediator.unsubscribe(type, handler, this);
        return mediator.subscribe(type, handler, this);
      },
      unsubscribeEvent: function(type, handler) {
        if (typeof type !== 'string') {
          throw new TypeError('EventBroker#unsubscribeEvent: ' + 'type argument must be a string');
        }
        if (typeof handler !== 'function') {
          throw new TypeError('EventBroker#unsubscribeEvent: ' + 'handler argument must be a function');
        }
        return mediator.unsubscribe(type, handler);
      },
      unsubscribeAllEvents: function() {
        return mediator.unsubscribe(null, null, this);
      },
      publishEvent: function() {
        var args, type;
        type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (typeof type !== 'string') {
          throw new TypeError('EventBroker#publishEvent: ' + 'type argument must be a string');
        }
        return mediator.publish.apply(mediator, [type].concat(__slice.call(args)));
      }
    };
    if (typeof Object.freeze === "function") {
      Object.freeze(EventBroker);
    }
    return module.exports = EventBroker;
  }
});

require.define({
  'chaplin/lib/support': function(exports, require, module) {
    var support;
    support = {
      propertyDescriptors: (function() {
        var o;
        if (!(typeof Object.defineProperty === 'function' && typeof Object.defineProperties === 'function')) {
          return false;
        }
        try {
          o = {};
          Object.defineProperty(o, 'foo', {
            value: 'bar'
          });
          return o.foo === 'bar';
        } catch (error) {
          return false;
        }
      })()
    };
    return module.exports = support;
  }
});

require.define({
  'chaplin/lib/sync_machine': function(exports, require, module) {
    var STATE_CHANGE, SYNCED, SYNCING, SyncMachine, UNSYNCED, event, _fn, _i, _len, _ref;
    UNSYNCED = 'unsynced';
    SYNCING = 'syncing';
    SYNCED = 'synced';
    STATE_CHANGE = 'syncStateChange';
    SyncMachine = {
      _syncState: UNSYNCED,
      _previousSyncState: null,
      syncState: function() {
        return this._syncState;
      },
      isUnsynced: function() {
        return this._syncState === UNSYNCED;
      },
      isSynced: function() {
        return this._syncState === SYNCED;
      },
      isSyncing: function() {
        return this._syncState === SYNCING;
      },
      unsync: function() {
        var _ref;
        if ((_ref = this._syncState) === SYNCING || _ref === SYNCED) {
          this._previousSync = this._syncState;
          this._syncState = UNSYNCED;
          this.trigger(this._syncState, this, this._syncState);
          this.trigger(STATE_CHANGE, this, this._syncState);
        }
      },
      beginSync: function() {
        var _ref;
        if ((_ref = this._syncState) === UNSYNCED || _ref === SYNCED) {
          this._previousSync = this._syncState;
          this._syncState = SYNCING;
          this.trigger(this._syncState, this, this._syncState);
          this.trigger(STATE_CHANGE, this, this._syncState);
        }
      },
      finishSync: function() {
        if (this._syncState === SYNCING) {
          this._previousSync = this._syncState;
          this._syncState = SYNCED;
          this.trigger(this._syncState, this, this._syncState);
          this.trigger(STATE_CHANGE, this, this._syncState);
        }
      },
      abortSync: function() {
        if (this._syncState === SYNCING) {
          this._syncState = this._previousSync;
          this._previousSync = this._syncState;
          this.trigger(this._syncState, this, this._syncState);
          this.trigger(STATE_CHANGE, this, this._syncState);
        }
      }
    };
    _ref = [UNSYNCED, SYNCING, SYNCED, STATE_CHANGE];
    _fn = function(event) {
      return SyncMachine[event] = function(callback, context) {
        if (context == null) {
          context = this;
        }
        this.on(event, callback, context);
        if (this._syncState === event) {
          return callback.call(context);
        }
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      _fn(event);
    }
    if (typeof Object.freeze === "function") {
      Object.freeze(SyncMachine);
    }
    return module.exports = SyncMachine;
  }
});

require.define({
  'chaplin/lib/utils': function(exports, require, module) {
    var support, utils;
    support = require('chaplin/lib/support');
    utils = {
      beget: (function() {
        var ctor;
        if (typeof Object.create === 'function') {
          return Object.create;
        } else {
          ctor = function() {};
          return function(obj) {
            ctor.prototype = obj;
            return new ctor;
          };
        }
      })(),
      readonly: (function() {
        var readonlyDescriptor;
        if (support.propertyDescriptors) {
          readonlyDescriptor = {
            writable: false,
            enumerable: true,
            configurable: false
          };
          return function() {
            var obj, prop, properties, _i, _len;
            obj = arguments[0], properties = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            for (_i = 0, _len = properties.length; _i < _len; _i++) {
              prop = properties[_i];
              readonlyDescriptor.value = obj[prop];
              Object.defineProperty(obj, prop, readonlyDescriptor);
            }
            return true;
          };
        } else {
          return function() {
            return false;
          };
        }
      })(),
      upcase: function(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      },
      underscorize: function(string) {
        return string.replace(/[A-Z]/g, function(char, index) {
          return (index !== 0 ? '_' : '') + char.toLowerCase();
        });
      },
      modifierKeyPressed: function(event) {
        return event.shiftKey || event.altKey || event.ctrlKey || event.metaKey;
      }
    };
    if (typeof Object.seal === "function") {
      Object.seal(utils);
    }
    return module.exports = utils;
  }
});

require.define({
  'chaplin': function(exports, require, module) {
    var Application, Collection, CollectionView, Controller, Dispatcher, EventBroker, Layout, Model, Route, Router, SyncMachine, View, mediator, support, utils;
    Application = require('chaplin/application');
    mediator = require('chaplin/mediator');
    Dispatcher = require('chaplin/dispatcher');
    Controller = require('chaplin/controllers/controller');
    Collection = require('chaplin/models/collection');
    Model = require('chaplin/models/model');
    Layout = require('chaplin/views/layout');
    View = require('chaplin/views/view');
    CollectionView = require('chaplin/views/collection_view');
    Route = require('chaplin/lib/route');
    Router = require('chaplin/lib/router');
    EventBroker = require('chaplin/lib/event_broker');
    support = require('chaplin/lib/support');
    SyncMachine = require('chaplin/lib/sync_machine');
    utils = require('chaplin/lib/utils');
    return module.exports = {
      Application: Application,
      mediator: mediator,
      Dispatcher: Dispatcher,
      Controller: Controller,
      Collection: Collection,
      Model: Model,
      Layout: Layout,
      View: View,
      CollectionView: CollectionView,
      Route: Route,
      Router: Router,
      EventBroker: EventBroker,
      support: support,
      SyncMachine: SyncMachine,
      utils: utils
    };
  }
});
;

/** X3DOM Runtime, http://www.x3dom.org */
if(!Array.forEach) {
  Array.forEach = function(array, fun, thisp) {
    var len = array.length;
    for(var i = 0; i < len; i++) {
      if(i in array) {
        fun.call(thisp, array[i], i, array);
      }
    }
  };
}
if(!Array.map) {
  Array.map = function(array, fun, thisp) {
    var len = array.length;
    var res = [];
    for(var i = 0; i < len; i++) {
      if(i in array) {
        res[i] = fun.call(thisp, array[i], i, array);
      }
    }
    return res;
  };
}
if(!Array.filter) {
  Array.filter = function(array, fun, thisp) {
    var len = array.length;
    var res = [];
    for(var i = 0; i < len; i++) {
      if(i in array) {
        var val = array[i];
        if(fun.call(thisp, val, i, array)) {
          res.push(val);
        }
      }
    }
    return res;
  };
}
var x3dom = {
  canvases: []
};
x3dom.loaded = false;
x3dom.x3dNS = 'http://www.web3d.org/specifications/x3d-namespace';
x3dom.x3dextNS = 'http://philip.html5.org/x3d/ext';
x3dom.xsltNS = 'http://www.w3.org/1999/XSL/x3dom.Transform';
x3dom.xhtmlNS = 'http://www.w3.org/1999/xhtml';
x3dom.nodeTypes = {};
x3dom.nodeTypesLC = {};
x3dom.components = {};
x3dom.geoCache = [];
x3dom.caps = {
  PLATFORM: navigator.platform,
  AGENT: navigator.userAgent
};
x3dom.registerNodeType = function(nodeTypeName, componentName, nodeDef) {
  x3dom.debug.logInfo("Registering nodetype [" + nodeTypeName + "] in component [" + componentName + "]");
  if(x3dom.components[componentName] === undefined) {
    x3dom.debug.logInfo("Adding new component [" + componentName + "]");
    x3dom.components[componentName] = {};
  } else {
    x3dom.debug.logInfo("Using component [" + componentName + "]");
  }
  nodeDef._typeName = nodeTypeName;
  nodeDef._compName = componentName;
  x3dom.components[componentName][nodeTypeName] = nodeDef;
  x3dom.nodeTypes[nodeTypeName] = nodeDef;
  x3dom.nodeTypesLC[nodeTypeName.toLowerCase()] = nodeDef;
};
x3dom.isX3DElement = function(node) {
  return(node.nodeType === Node.ELEMENT_NODE && node.localName && (x3dom.nodeTypes[node.localName] || x3dom.nodeTypesLC[node.localName.toLowerCase()] || node.localName.toLowerCase() === "x3d" || node.localName.toLowerCase() === "websg" || node.localName.toLowerCase() === "scene" || node.localName.toLowerCase() === "route"));
};
x3dom.extend = function(f) {
  function g() {}
  g.prototype = f.prototype || f;
  return new g();
};
x3dom.getStyle = function(oElm, strCssRule) {
  var strValue;
  if(window && window.getComputedStyle && window.getComputedStyle(oElm, "")) {
    strValue = window.getComputedStyle(oElm, "")[strCssRule];
  } else if(oElm.currentStyle) {
    strCssRule = strCssRule.replace(/\-(\w)/g, function(strMatch, p1) {
      return p1.toUpperCase();
    });
    strValue = oElm.currentStyle[strCssRule];
  }
  return strValue;
};

function defineClass(parent, ctor, methods) {
  function inheritance() {}
  if(parent) {
    inheritance.prototype = parent.prototype;
    ctor.prototype = new inheritance();
    ctor.prototype.constructor = ctor;
    ctor.superClass = parent;
  }
  if(methods) {
    for(var m in methods) {
      ctor.prototype[m] = methods[m];
    }
  }
  return ctor;
}
x3dom.isa = function(object, clazz) {
  if(!object) {
    return false;
  }
  if(object.constructor === clazz) {
    return true;
  }
  if(object.constructor.superClass === undefined) {
    return false;
  }

  function f(c) {
    if(c === clazz) {
      return true;
    }
    if(c.prototype && c.prototype.constructor && c.prototype.constructor.superClass) {
      return f(c.prototype.constructor.superClass);
    }
    return false;
  }
  return f(object.constructor.superClass);
};
x3dom.getGlobal = function() {
  return(function() {
    return this;
  }).call(null);
};
x3dom.isNumber = function(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
x3dom.loadJS = function(src, path_prefix, blocking) {
  var blocking = (blocking === false) ? blocking : true;
  if(blocking) {
    var req;
    var url = (path_prefix) ? path_prefix.trim() + src : src;
    if(window.XMLHttpRequest) {
      req = new XMLHttpRequest();
    } else {
      req = new ActiveXObject("Microsoft.XMLHTTP");
    }
    if(req) {
      req.open("GET", url, false);
      req.send(null);
      eval(req.responseText);
    }
  } else {
    var head = document.getElementsByTagName('HEAD').item(0);
    var script = document.createElement("script");
    var loadpath = (path_prefix) ? path_prefix.trim() + src : src;
    if(head) {
      x3dom.debug.logError("Trying to load external JS file: " + loadpath);
      script.type = "text/javascript";
      script.src = loadpath;
      head.appendChild(script, head.firstChild);
    } else {
      alert("No document object found. Can't load components");
    }
  }
};

function array_to_object(a) {
  var o = {};
  for(var i = 0; i < a.length; i++) {
    o[a[i]] = '';
  }
  return o;
}
window.requestAnimFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||
  function(callback, element) {
    window.setTimeout(callback, 1000 / 60);
  };
})();
x3dom.debug = {
  INFO: "INFO",
  WARNING: "WARNING",
  ERROR: "ERROR",
  EXCEPTION: "EXCEPTION",
  isActive: false,
  isFirebugAvailable: false,
  isSetup: false,
  isAppend: false,
  numLinesLogged: 0,
  maxLinesToLog: 1000,
  logContainer: null,
  setup: function() {
    if(x3dom.debug.isSetup) {
      return;
    }
    try {
      if(window.console.firebug !== undefined) {
        x3dom.debug.isFirebugAvailable = true;
      }
    } catch(err) {
      x3dom.debug.isFirebugAvailable = false;
    }
    x3dom.debug.setupLogContainer();
    x3dom.debug.isSetup = true;
  },
  activate: function(visible) {
    x3dom.debug.isActive = true;
    x3dom.debug.logContainer.style.display = (visible) ? "block" : "none";
    if(!x3dom.debug.isAppend) {
      if(navigator.appName == "Microsoft Internet Explorer") {
        x3dom.debug.logContainer.style.marginLeft = "8px";
        document.documentElement.appendChild(x3dom.debug.logContainer);
      } else {
        document.body.appendChild(x3dom.debug.logContainer);
      }
      x3dom.debug.isAppend = true;
    }
  },
  setupLogContainer: function() {
    x3dom.debug.logContainer = document.createElement("div");
    x3dom.debug.logContainer.id = "x3dom_logdiv";
    x3dom.debug.logContainer.style.border = "2px solid olivedrab";
    x3dom.debug.logContainer.style.height = "200px";
    x3dom.debug.logContainer.style.padding = "4px";
    x3dom.debug.logContainer.style.overflow = "auto";
    x3dom.debug.logContainer.style.whiteSpace = "pre-wrap";
    x3dom.debug.logContainer.style.fontFamily = "sans-serif";
    x3dom.debug.logContainer.style.fontSize = "x-small";
    x3dom.debug.logContainer.style.color = "#00ff00";
    x3dom.debug.logContainer.style.backgroundColor = "black";
    x3dom.debug.logContainer.style.clear = "both";
    x3dom.debug.logContainer.style.marginRight = "10px";
  },
  doLog: function(msg, logType) {
    if(!x3dom.debug.isActive) {
      return;
    }
    if(x3dom.debug.numLinesLogged === x3dom.debug.maxLinesToLog) {
      msg = "Maximum number of log lines (=" + x3dom.debug.maxLinesToLog + ") reached. Deactivating logging...";
    }
    if(x3dom.debug.numLinesLogged > x3dom.debug.maxLinesToLog) {
      return;
    }
    var node = document.createElement("p");
    node.style.margin = 0;
    switch(logType) {
    case x3dom.debug.INFO:
      node.style.color = "#00ff00";
      break;
    case x3dom.debug.WARNING:
      node.style.color = "#cd853f";
      break;
    case x3dom.debug.ERROR:
      node.style.color = "#ff4500";
      break;
    case x3dom.debug.EXCEPTION:
      node.style.color = "#ffff00";
      break;
    default:
      node.style.color = "#00ff00";
      break;
    }
    try {
      node.innerHTML = logType + ": " + msg;
      x3dom.debug.logContainer.insertBefore(node, x3dom.debug.logContainer.firstChild);
    } catch(err) {
      if(window.console.firebug !== undefined) {
        window.console.warn(msg);
      }
    }
    if(x3dom.debug.isFirebugAvailable) {
      switch(logType) {
      case x3dom.debug.INFO:
        window.console.info(msg);
        break;
      case x3dom.debug.WARNING:
        window.console.warn(msg);
        break;
      case x3dom.debug.ERROR:
        window.console.error(msg);
        break;
      case x3dom.debug.EXCEPTION:
        window.console.debug(msg);
        break;
      default:
        break;
      }
    }
    x3dom.debug.numLinesLogged++;
  },
  logInfo: function(msg) {
    x3dom.debug.doLog(msg, x3dom.debug.INFO);
  },
  logWarning: function(msg) {
    x3dom.debug.doLog(msg, x3dom.debug.WARNING);
  },
  logError: function(msg) {
    x3dom.debug.doLog(msg, x3dom.debug.ERROR);
  },
  logException: function(msg) {
    x3dom.debug.doLog(msg, x3dom.debug.EXCEPTION);
  },
  assert: function(c, msg) {
    if(!c) {
      x3dom.debug.doLog("Assertion failed in " + x3dom.debug.assert.caller.name + ': ' + msg, x3dom.debug.ERROR);
    }
  },
  typeOf: function(obj) {
    var type = typeof obj;
    return type === "object" && !obj ? "null" : type;
  },
  exists: function(obj, name, type) {
    type = type || "function";
    return(obj ? this.typeOf(obj[name]) : "null") === type;
  },
  dumpFields: function(node) {
    var str = "";
    for(var fName in node) {
      str += (fName + ", ");
    }
    x3dom.debug.logInfo(str + '\n');
  }
};
x3dom.debug.setup();
x3dom.ImageLoadManager = {
  heap: [],
  complete: false,
  activeDownloads: 0,
  push: function(tex) {
    if(x3dom.caps.BACKEND == 'webgl') {
      if(tex._vf.url[0] != undefined) {
        x3dom.debug.logInfo("[ImageLoadManager] Push image to queue: URL = " + tex._vf.url[0] + " | Priority = " + tex._vf.priority);
        x3dom.ImageLoadManager.heapUp(x3dom.ImageLoadManager.heap.push({
          priority: tex._vf.priority,
          image: tex._image,
          url: tex._vf.url[0]
        }) - 1);
        if(x3dom.ImageLoadManager.complete) {
          x3dom.ImageLoadManager.complete = false;
          x3dom.ImageLoadManager.load();
        }
      }
    }
  },
  pop: function() {
    if(x3dom.ImageLoadManager.isEmpty()) {} else {
      var result = x3dom.ImageLoadManager.heap[0];
      var tmp = x3dom.ImageLoadManager.heap.pop();
      if(x3dom.ImageLoadManager.heap.length > 0) {
        x3dom.ImageLoadManager.heap[0] = tmp;
        x3dom.ImageLoadManager.heapDown(0);
      }
      return result;
    }
  },
  load: function() {
    if(x3dom.caps.BACKEND == 'webgl') {
      x3dom.debug.logInfo("[ImageLoadManager] Start loading...");
      while(!x3dom.ImageLoadManager.isEmpty()) {
        var item = x3dom.ImageLoadManager.pop();
        item.image.crossOrigin = '';
        item.image.src = item.url;
        item.image.onload = x3dom.ImageLoadManager.onLoadFnc;
        x3dom.ImageLoadManager.activeDownloads++;
      }
      x3dom.ImageLoadManager.complete = true;
    }
  },
  onLoadFnc: function(evt) {
    var event = document.createEvent("HTMLEvents");
    event.initEvent('ImageLoadManager_Load', true, true);
    this.dispatchEvent(event);
  },
  getLeftChildIndex: function(nodeIndex) {
    return parseInt(2 * nodeIndex + 1);
  },
  getRightChildIndex: function(nodeIndex) {
    return parseInt(2 * nodeIndex + 2);
  },
  getParentIndex: function(nodeIndex) {
    return parseInt((nodeIndex - 1) / 2);
  },
  heapUp: function(nodeIndex) {
    var parentIndex, tmp;
    if(nodeIndex != 0) {
      parentIndex = x3dom.ImageLoadManager.getParentIndex(nodeIndex);
      if(x3dom.ImageLoadManager.heap[parentIndex].priority > x3dom.ImageLoadManager.heap[nodeIndex].priority) {
        tmp = x3dom.ImageLoadManager.heap[parentIndex];
        x3dom.ImageLoadManager.heap[parentIndex] = x3dom.ImageLoadManager.heap[nodeIndex];
        x3dom.ImageLoadManager.heap[nodeIndex] = tmp;
        x3dom.ImageLoadManager.heapUp(parentIndex);
      }
    }
  },
  heapDown: function(nodeIndex) {
    var leftChildIndex, rightChildIndex, minIndex, tmp;
    leftChildIndex = x3dom.ImageLoadManager.getLeftChildIndex(nodeIndex);
    rightChildIndex = x3dom.ImageLoadManager.getRightChildIndex(nodeIndex);
    if(rightChildIndex >= x3dom.ImageLoadManager.heap.length) {
      if(leftChildIndex >= x3dom.ImageLoadManager.heap.length) return;
      else minIndex = leftChildIndex;
    } else {
      if(x3dom.ImageLoadManager.heap[leftChildIndex].priority <= x3dom.ImageLoadManager.heap[rightChildIndex].priority) minIndex = leftChildIndex;
      else minIndex = rightChildIndex;
    }
    if(x3dom.ImageLoadManager.heap[nodeIndex].priority > x3dom.ImageLoadManager.heap[minIndex].priority) {
      tmp = x3dom.ImageLoadManager.heap[minIndex];
      x3dom.ImageLoadManager.heap[minIndex] = x3dom.ImageLoadManager.heap[nodeIndex];
      x3dom.ImageLoadManager.heap[nodeIndex] = tmp;
      x3dom.ImageLoadManager.heapDown(minIndex);
    }
  },
  isEmpty: function() {
    return(x3dom.ImageLoadManager.heap.length == 0);
  },
  toString: function() {
    var string = "ImageLoadManager(" + x3dom.ImageLoadManager.heap.length + ") [";
    for(var i = 0; i < x3dom.ImageLoadManager.heap.length; i++) {
      if(i != 0) string += ", ";
      string += x3dom.ImageLoadManager.heap[i].priority + " - " + x3dom.ImageLoadManager.heap[i].url;
    }
    string += "]";
    return string;
  },
  length: function() {
    return x3dom.ImageLoadManager.heap.length;
  }
};
x3dom.Properties = function() {
  this.properties = {};
};
x3dom.Properties.prototype.setProperty = function(name, value) {
  x3dom.debug.logInfo("Properties: Setting property '" + name + "' to value '" + value + "'");
  this.properties[name] = value;
};
x3dom.Properties.prototype.getProperty = function(name, def) {
  if(this.properties[name]) {
    return this.properties[name]
  } else {
    return def;
  }
};
x3dom.Properties.prototype.merge = function(other) {
  for(var attrname in other.properties) {
    this.properties[attrname] = other.properties[attrname];
  }
};
x3dom.Properties.prototype.toString = function() {
  var str = "";
  for(var name in this.properties) {
    str += "Name: " + name + " Value: " + this.properties[name] + "\n";
  }
  return str;
};
x3dom.DoublyLinkedList = function() {
  this.length = 0;
  this.first = null;
  this.last = null;
};
x3dom.DoublyLinkedList.ListNode = function(point, point_index, normals, colors, texCoords) {
  this.point = point;
  this.point_index = point_index;
  this.normals = normals;
  this.colors = colors;
  this.texCoords = texCoords;
  this.next = null;
  this.prev = null;
};
x3dom.DoublyLinkedList.prototype.appendNode = function(node) {
  if(this.first === null) {
    node.prev = node;
    node.next = node;
    this.first = node;
    this.last = node;
  } else {
    node.prev = this.last;
    node.next = this.first;
    this.first.prev = node;
    this.last.next = node;
    this.last = node;
  }
  this.length++;
};
x3dom.DoublyLinkedList.prototype.insertAfterNode = function(node, newNode) {
  newNode.prev = node;
  newNode.next = node.next;
  node.next.prev = newNode;
  node.next = newNode;
  if(newNode.prev == this.last) {
    this.last = newNode;
  }
  this.length++;
};
x3dom.DoublyLinkedList.prototype.deleteNode = function(node) {
  if(this.length > 1) {
    node.prev.next = node.next;
    node.next.prev = node.prev;
    if(node == this.first) {
      this.first = node.next;
    }
    if(node == this.last) {
      this.last = node.prev;
    }
  } else {
    this.first = null;
    this.last = null;
  }
  node.prev = null;
  node.next = null;
  this.length--;
};
x3dom.DoublyLinkedList.prototype.getNode = function(index) {
  var node = null;
  if(index > this.length) {
    return node;
  }
  for(var i = 0; i < this.length; i++) {
    if(i == 0) {
      node = this.first;
    } else {
      node = node.next;
    }
    if(i == index) {
      return node;
    }
  }
};
x3dom.DoublyLinkedList.prototype.invert = function() {
  var node = null;
  var tmp = null;
  node = this.first;
  for(var i = 0; i < this.length; i++) {
    tmp = node.prev;
    node.prev = node.next;
    node.next = tmp;
    node = node.prev;
  }
  tmp = this.first;
  this.first = this.last;
  this.last = tmp;
};
x3dom.EarClipping = {
  reversePointDirection: function(linklist, plane) {
    var l, k;
    var count = 0;
    var z;
    var nodei, nodel, nodek;
    if(linklist.length < 3) {
      return false;
    }
    for(var i = 0; i < linklist.length; i++) {
      l = (i + 1) % linklist.length;
      k = (i + 2) % linklist.length;
      nodei = linklist.getNode(i);
      nodel = linklist.getNode(l);
      nodek = linklist.getNode(k);
      if(plane == 'YZ') {
        z = (nodel.point.y - nodei.point.y) * (nodek.point.z - nodel.point.z);
        z -= (nodel.point.z - nodei.point.z) * (nodek.point.y - nodel.point.y);
      } else if(plane == 'XZ') {
        z = (nodel.point.z - nodei.point.z) * (nodek.point.x - nodel.point.x);
        z -= (nodel.point.x - nodei.point.x) * (nodek.point.z - nodel.point.z);
      } else {
        z = (nodel.point.x - nodei.point.x) * (nodek.point.y - nodel.point.y);
        z -= (nodel.point.y - nodei.point.y) * (nodek.point.x - nodel.point.x);
      }
      if(z < 0) {
        count--;
      } else if(z > 0) {
        count++;
      }
    }
    if(count < 0) {
      linklist.invert();
      return true;
    }
    return false;
  },
  getIndexes: function(linklist) {
    var node = linklist.first.next;
    var plane = this.identifyPlane(node.prev.point, node.point, node.next.point);
    var invers = this.reversePointDirection(linklist, plane);
    var indexes = [];
    node = linklist.first.next;
    var next = null;
    var count = 0;
    var isEar = true;
    while(linklist.length >= 3 && count < 15) {
      next = node.next;
      for(var i = 0; i < linklist.length; i++) {
        if(this.isNotEar(linklist.getNode(i).point, node.prev.point, node.point, node.next.point, plane)) {
          isEar = false;
        }
      }
      if(isEar) {
        if(this.isKonvex(node.prev.point, node.point, node.next.point, plane)) {
          indexes.push(node.prev.point_index, node.point_index, node.next.point_index);
          linklist.deleteNode(node);
        } else {
          count++;
        }
      }
      node = next;
      isEar = true;
    }
    if(invers) {
      return indexes.reverse();
    } else {
      return indexes;
    }
  },
  getMultiIndexes: function(linklist) {
    var node = linklist.first.next;
    var plane = this.identifyPlane(node.prev.point, node.point, node.next.point);
    var invers = this.reversePointDirection(linklist, plane);
    var data = new Object();
    data.indices = [];
    data.point = [];
    data.normals = [];
    data.colors = [];
    data.texCoords = [];
    node = linklist.first.next;
    var next = null;
    var count = 0;
    var isEar = true;
    while(linklist.length >= 3 && count < 15) {
      next = node.next;
      for(var i = 0; i < linklist.length; i++) {
        if(this.isNotEar(linklist.getNode(i).point, node.prev.point, node.point, node.next.point, plane)) {
          isEar = false;
        }
      }
      if(isEar) {
        if(this.isKonvex(node.prev.point, node.point, node.next.point, plane)) {
          data.indices.push(node.prev.point_index, node.point_index, node.next.point_index);
          data.point.push(node.prev.point, node.point, node.next.point);
          if(node.normals) {
            data.normals.push(node.prev.normals, node.normals, node.next.normals);
          }
          if(node.colors) {
            data.colors.push(node.prev.colors, node.colors, node.next.colors);
          }
          if(node.texCoords) {
            data.texCoords.push(node.prev.texCoords, node.texCoords, node.next.texCoords);
          }
          linklist.deleteNode(node);
        } else {
          count++;
        }
      }
      node = next;
      isEar = true;
    }
    if(invers) {
      data.indices = data.indices.reverse();
      data.point = data.point.reverse();
      data.normals = data.normals.reverse();
      data.colors = data.colors.reverse();
      data.texCoords = data.texCoords.reverse();
      return data;
    } else {
      return data;
    }
  },
  isNotEar: function(ap1, tp1, tp2, tp3, plane) {
    var b0, b1, b2, b3;
    var ap1a, ap1b, tp1a, tp1b, tp2a, tp2b, tp3a, tp3b;
    if(plane == 'YZ') {
      ap1a = ap1.y, ap1b = ap1.z;
      tp1a = tp1.y, tp1b = tp1.z;
      tp2a = tp2.y, tp2b = tp2.z;
      tp3a = tp3.y, tp3b = tp3.z;
    } else if(plane == 'XZ') {
      ap1a = ap1.z, ap1b = ap1.x;
      tp1a = tp1.z, tp1b = tp1.x;
      tp2a = tp2.z, tp2b = tp2.x;
      tp3a = tp3.z, tp3b = tp3.x;
    } else {
      ap1a = ap1.x, ap1b = ap1.y;
      tp1a = tp1.x, tp1b = tp1.y;
      tp2a = tp2.x, tp2b = tp2.y;
      tp3a = tp3.x, tp3b = tp3.y;
    }
    b0 = ((tp2a - tp1a) * (tp3b - tp1b) - (tp3a - tp1a) * (tp2b - tp1b));
    if(b0 != 0) {
      b1 = (((tp2a - ap1a) * (tp3b - ap1b) - (tp3a - ap1a) * (tp2b - ap1b)) / b0);
      b2 = (((tp3a - ap1a) * (tp1b - ap1b) - (tp1a - ap1a) * (tp3b - ap1b)) / b0);
      b3 = 1 - b1 - b2;
      return((b1 > 0) && (b2 > 0) && (b3 > 0));
    } else {
      return false;
    }
  },
  isKonvex: function(p, p1, p2, plane) {
    var pa, pb, p1a, p1b, p2a, p2b;
    if(plane == 'YZ') {
      pa = p.y, pb = p.z;
      p1a = p1.y, p1b = p1.z;
      p2a = p2.y, p2b = p2.z;
    } else if(plane == 'XZ') {
      pa = p.z, pb = p.x;
      p1a = p1.z, p1b = p1.x;
      p2a = p2.z, p2b = p2.x;
    } else {
      pa = p.x, pb = p.y;
      p1a = p1.x, p1b = p1.y;
      p2a = p2.x, p2b = p2.y;
    }
    var l = ((p1a - pa) * (p2b - pb) - (p1b - pb) * (p2a - pa));
    if(l < 0) {
      return false;
    } else {
      return true;
    }
  },
  identifyPlane: function(p1, p2, p3) {
    var v1x, v1y, v1z;
    var v2x, v2y, v2z;
    var v3x, v3y, v3z;
    v1x = p2.x - p1.x, v1y = p2.y - p1.y, v1z = p2.z - p1.z;
    v2x = p3.x - p1.x, v2y = p3.y - p1.y, v2z = p3.z - p1.z;
    v3x = v1y * v2z - v1z * v2y;
    v3y = v1z * v2x - v1x * v2z;
    v3z = v1x * v2y - v1y * v2x;
    var angle = Math.max(Math.abs(v3x), Math.abs(v3y), Math.abs(v3z));
    if(angle == Math.abs(v3x)) {
      return 'YZ';
    } else if(angle == Math.abs(v3y)) {
      return 'XZ';
    } else if(angle == Math.abs(v3z)) {
      return 'XY';
    } else {
      return 'fehler';
    }
  }
};
x3dom.X3DCanvas = function(x3dElem, canvasIdx) {
  var that = this;
  this.canvasIdx = canvasIdx;
  this.initContext = function(canvas) {
    x3dom.debug.logInfo("Initializing X3DCanvas for [" + canvas.id + "]");
    var gl = x3dom.gfx_webgl(canvas);
    if(!gl) {
      x3dom.debug.logError("No 3D context found...");
      this.x3dElem.removeChild(canvas);
      return null;
    }
    return gl;
  };
  this.initFlashContext = function(object) {
    x3dom.debug.logInfo("Initializing X3DObject for [" + object.id + "]");
    var gl = x3dom.gfx_flash(object);
    return gl;
  };
  this.appendParam = function(node, name, value) {
    var param = document.createElement('param');
    param.setAttribute('name', name);
    param.setAttribute('value', value);
    node.appendChild(param);
  };
  this.detectFlash = function(required, max) {
    var required_version = required;
    var max_version = max;
    var available_version = 0;
    if(typeof(navigator.plugins["Shockwave Flash"]) == "object") {
      var description = navigator.plugins["Shockwave Flash"].description;
      available_version = description.substr(16, (description.indexOf(".", 16) - 16));
    } else if(typeof(ActiveXObject) == "function") {
      for(var i = 10; i < (max_version + 1); i++) {
        try {
          if(typeof(new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + i)) == "object") {
            available_version = i + 1;
          }
        } catch(error) {}
      }
    }
    return [available_version, required_version];
  };
  this.createInitFailedDiv = function(x3dElem) {
    var div = document.createElement('div');
    div.style.width = x3dElem.getAttribute("width");;
    div.style.height = x3dElem.getAttribute("height");;
    div.style.backgroundColor = "#C00";
    div.style.color = "#FFF";
    div.style.fontSize = "20px";
    div.style.fontWidth = "bold";
    div.style.padding = "10px 10px 10px 10px";
    div.style.display = "inline-block";
    div.style.fontFamily = "Arial";
    div.style.textAlign = "center";
    div.appendChild(document.createTextNode('Your Browser does not support X3DOM'));
    div.appendChild(document.createElement('br'));
    div.appendChild(document.createTextNode('Read more about X3DOM Browser support on:'));
    div.appendChild(document.createElement('br'));
    var link = document.createElement('a');
    link.setAttribute('href', 'http://www.x3dom.org/?page_id=9');
    link.appendChild(document.createTextNode('X3DOM | Browser Support'));
    div.appendChild(link);
    x3dElem.appendChild(div);
    x3dom.debug.logError("Your Browser does not support X3DOM!");
  }
  this.createFlashObject = function(x3dElem) {
    var result = this.detectFlash(11, 11);
    if(!result[0] || result[0] < result[1]) {
      return null;
    } else {
      x3dom.debug.logInfo("Creating FlashObject for (X)3D element...");
      var id = x3dElem.getAttribute("id");
      if(id !== null) {
        id = "x3dom-" + id + "-object";
      } else {
        var index = new Date().getTime();
        id = "x3dom-" + index + "-object";
      }
      var swf_path = x3dElem.getAttribute("swfpath");
      if(swf_path === null) {
        swf_path = "x3dom.swf";
      }
      var width = x3dElem.getAttribute("width");
      if(width == null) {
        width = 550;
      } else {
        var idx = width.indexOf("px");
        if(idx != -1) {
          width = width.substr(0, idx);
        }
      }
      var height = x3dElem.getAttribute("height");
      if(height == null) {
        height = 400;
      } else {
        var idx = height.indexOf("px");
        if(idx != -1) {
          height = height.substr(0, idx);
        }
      }
      var obj = document.createElement('object');
      obj.setAttribute('width', width);
      obj.setAttribute('height', height);
      obj.setAttribute('id', id);
      this.appendParam(obj, 'menu', 'false');
      this.appendParam(obj, 'quality', 'high');
      this.appendParam(obj, 'wmode', 'gpu');
      this.appendParam(obj, 'allowScriptAccess', 'always');
      this.appendParam(obj, 'flashvars', 'width=' + width + '&height=' + height + '&canvasIdx=' + this.canvasIdx);
      this.appendParam(obj, 'movie', swf_path);
      x3dElem.appendChild(obj);
      if(navigator.appName == "Microsoft Internet Explorer") obj.setAttribute('classid', 'clsid:d27cdb6e-ae6d-11cf-96b8-444553540000');
      else {
        obj.setAttribute('type', 'application/x-shockwave-flash');
        obj.setAttribute('data', swf_path);
      }
      return obj;
    }
  };
  this.createHTMLCanvas = function(x3dElem) {
    x3dom.debug.logInfo("Creating canvas for (X)3D element...");
    var canvas = document.createElement('canvas');
    canvas.setAttribute("class", "x3dom-canvas");
    var userStyle = x3dElem.getAttribute("style");
    if(userStyle) {
      x3dom.debug.logInfo("Inline X3D styles detected");
    }
    var evtArr = ["onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onclick", "ondblclick", "onkeydown", "onkeypress", "onkeyup", "ontouchstart", "ontouchmove", "ontouchend", "ontouchcancel", "ontouchleave", "ontouchenter", "ongesturestart", "ongesturechange", "ongestureend", "MozTouchDown", "MozTouchMove", "MozTouchUp"];
    for(var i = 0; i < evtArr.length; i++) {
      var evtName = evtArr[i];
      var userEvt = x3dElem.getAttribute(evtName);
      if(userEvt) {
        x3dom.debug.logInfo(evtName + ", " + userEvt);
        canvas.setAttribute(evtName, userEvt);
      }
    }
    if(!x3dElem.__addEventListener && !x3dElem.__removeEventListener) {
      x3dElem.__addEventListener = x3dElem.addEventListener;
      x3dElem.__removeEventListener = x3dElem.removeEventListener;
      x3dElem.addEventListener = function(type, func, phase) {
        var j, found = false;
        for(j = 0; j < evtArr.length && !found; j++) {
          if(evtArr[j] === type) {
            found = true;
          }
        }
        if(found) {
          x3dom.debug.logInfo('addEventListener for div.on' + type);
          that.canvas.addEventListener(type, func, phase);
        } else {
          x3dom.debug.logInfo('addEventListener for X3D.on' + type);
          this.__addEventListener(type, func, phase);
        }
      };
      x3dElem.removeEventListener = function(type, func, phase) {
        var j, found = false;
        for(j = 0; j < evtArr.length && !found; j++) {
          if(evtArr[j] === type) {
            found = true;
          }
        }
        if(found) {
          x3dom.debug.logInfo('removeEventListener for div.on' + type);
          that.canvas.removeEventListener(type, func, phase);
        } else {
          x3dom.debug.logInfo('removeEventListener for X3D.on' + type);
          this.__removeEventListener(type, func, phase);
        }
      };
    }
    x3dElem.appendChild(canvas);
    var id = x3dElem.getAttribute("id");
    if(id !== null) {
      canvas.id = "x3dom-" + id + "-canvas";
    } else {
      var index = new Date().getTime();
      canvas.id = "x3dom-" + index + "-canvas";
    }
    var w = 2;
    var h = 2;
    if((w = x3dElem.getAttribute("width")) !== null) {
      canvas.style.width = w;
      canvas.setAttribute("width", w);
    }
    if((h = x3dElem.getAttribute("height")) !== null) {
      canvas.style.height = h;
      canvas.setAttribute("height", h);
    }
    canvas.setAttribute("tabindex", "0");
    canvas.focus();
    return canvas;
  };
  var _old_dim = [0, 0];
  this.watchForResize = function() {
    var new_dim = [x3dom.getStyle(that.canvas, "width"), x3dom.getStyle(that.canvas, "height")];
    if((_old_dim[0] != new_dim[0]) || (_old_dim[1] != new_dim[1])) {
      _old_dim = new_dim;
      that.x3dElem.setAttribute("width", new_dim[0]);
      that.x3dElem.setAttribute("height", new_dim[1]);
    }
  };
  this.createStatDiv = function() {
    var statDiv = document.createElement('div');
    statDiv.setAttribute("class", "x3dom-statdiv");
    statDiv.innerHTML = "0 fps";
    this.x3dElem.appendChild(statDiv);
    statDiv.oncontextmenu = statDiv.onmousedown = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.returnValue = false;
      return false;
    };
    return statDiv;
  };
  this.createProgressDiv = function() {
    var progressDiv = document.createElement('div');
    progressDiv.setAttribute("class", "x3dom-progress");
    var _text = document.createElement('strong');
    _text.appendChild(document.createTextNode('Loading...'));
    progressDiv.appendChild(_text);
    var _inner = document.createElement('span');
    _inner.setAttribute('style', "width: 25%;");
    _inner.appendChild(document.createTextNode(" "));
    progressDiv.appendChild(_inner);
    this.x3dElem.appendChild(progressDiv);
    progressDiv.oncontextmenu = progressDiv.onmousedown = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.returnValue = false;
      return false;
    };
    return progressDiv;
  };
  this.isFlashReady = false;
  this.x3dElem = x3dElem;
  this.backend = 'none';
  if(this.x3dElem.getAttribute('backend') == 'flash') {
    this.backend = 'flash';
    this.canvas = this.createFlashObject(x3dElem);
    if(this.canvas != null) {
      this.canvas.parent = this;
      this.gl = this.initFlashContext(this.canvas);
    } else {
      this.createInitFailedDiv(x3dElem);
      return null;
    }
  } else {
    this.backend = 'webgl';
    this.canvas = this.createHTMLCanvas(x3dElem);
    this.canvas.parent = this;
    this.gl = this.initContext(this.canvas);
    if(this.gl == null) {
      x3dom.debug.logInfo("Fallback to Flash Renderer");
      this.backend = 'flash';
      this.canvas = this.createFlashObject(x3dElem);
      if(this.canvas != null) {
        this.canvas.parent = this;
        this.gl = this.initFlashContext(this.canvas);
      } else {
        this.createInitFailedDiv(x3dElem);
        return null;
      }
    }
  }
  x3dom.caps.BACKEND = this.backend;
  this.fps_t0 = new Date().getTime();
  this.doc = null;
  x3dElem.__setAttribute = x3dElem.setAttribute;
  x3dElem.setAttribute = function(attrName, newVal) {
    this.__setAttribute(attrName, newVal);
    switch(attrName) {
    case "width":
      that.canvas.setAttribute("width", newVal);
      if(that.doc._viewarea) {
        that.doc._viewarea._width = parseInt(that.canvas.getAttribute("width"), 0);
      }
      break;
    case "height":
      that.canvas.setAttribute("height", newVal);
      if(that.doc._viewarea) {
        that.doc._viewarea._height = parseInt(that.canvas.getAttribute("height"), 0);
      }
      break;
    default:
    }
    that.doc.needRender = true;
  };
  var runtimeEnabled = x3dElem.getAttribute("runtimeEnabled");
  if(runtimeEnabled !== null) {
    this.hasRuntime = (runtimeEnabled.toLowerCase() == "true");
  } else {
    this.hasRuntime = x3dElem.hasRuntime;
  }
  if(this.gl === null) {
    this.hasRuntime = false;
  }
  this.showStat = x3dElem.getAttribute("showStat");
  this.statDiv = this.createStatDiv();
  this.statDiv.style.display = (this.showStat !== null && this.showStat == "true") ? "inline" : "none";
  this.showProgress = x3dElem.getAttribute("showProgress");
  this.progressDiv = this.createProgressDiv();
  this.progressDiv.style.display = 'inline';
  if(this.canvas !== null && this.gl !== null && this.hasRuntime && this.backend !== "flash") {
    this.canvas.mouse_dragging = false;
    this.canvas.mouse_button = 0;
    this.canvas.mouse_drag_x = 0;
    this.canvas.mouse_drag_y = 0;
    this.canvas.isMulti = false;
    this.canvas.oncontextmenu = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.returnValue = false;
      return false;
    };
    this.canvas.addEventListener('mousedown', function(evt) {
      this.focus();
      switch(evt.button) {
      case 0:
        this.mouse_button = 1;
        break;
      case 1:
        this.mouse_button = 4;
        break;
      case 2:
        this.mouse_button = 2;
        break;
      default:
        this.mouse_button = 0;
        break;
      }
      this.mouse_drag_x = (evt.offsetX || evt.layerX || evt.x);
      this.mouse_drag_y = (evt.offsetY || evt.layerY || evt.y);
      this.mouse_dragging = true;
      if(evt.shiftKey) {
        this.mouse_button = 1;
      }
      if(evt.ctrlKey) {
        this.mouse_button = 4;
      }
      if(evt.altKey) {
        this.mouse_button = 2;
      }
      this.parent.doc.onMousePress(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
      this.parent.doc.needRender = true;
      window.status = this.id + ' DOWN: ' + (evt.offsetX || evt.layerX || evt.x) + ", " + (evt.offsetY || evt.layerY || evt.y);
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('mouseup', function(evt) {
      this.mouse_button = 0;
      this.mouse_dragging = false;
      this.parent.doc.onMouseRelease(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('mouseover', function(evt) {
      this.mouse_button = 0;
      this.mouse_dragging = false;
      this.parent.doc.onMouseOver(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('mouseout', function(evt) {
      this.mouse_button = 0;
      this.mouse_dragging = false;
      this.parent.doc.onMouseOut(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('dblclick', function(evt) {
      this.mouse_button = 0;
      this.mouse_drag_x = (evt.offsetX || evt.layerX || evt.x);
      this.mouse_drag_y = (evt.offsetY || evt.layerY || evt.y);
      this.mouse_dragging = false;
      this.parent.doc.onDoubleClick(that.gl, this.mouse_drag_x, this.mouse_drag_y);
      this.parent.doc.needRender = true;
      window.status = this.id + ' DBL: ' + (evt.offsetX || evt.layerX || evt.x) + ", " + (evt.offsetY || evt.layerY || evt.y);
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('mousemove', function(evt) {
      if(evt.shiftKey) {
        this.mouse_button = 1;
      }
      if(evt.ctrlKey) {
        this.mouse_button = 4;
      }
      if(evt.altKey) {
        this.mouse_button = 2;
      }
      if(!this.isMulti) {
        this.mouse_drag_x = (evt.offsetX || evt.layerX || evt.x);
        this.mouse_drag_y = (evt.offsetY || evt.layerY || evt.y);
        if(this.mouse_dragging) {
          this.parent.doc.onDrag(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
        } else {
          this.parent.doc.onMove(that.gl, this.mouse_drag_x, this.mouse_drag_y, this.mouse_button);
        }
      }
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('DOMMouseScroll', function(evt) {
      this.mouse_drag_y += 2 * evt.detail;
      this.parent.doc.onDrag(that.gl, this.mouse_drag_x, this.mouse_drag_y, 2);
      this.parent.doc.needRender = true;
      window.status = this.id + ' SCROLL: ' + evt.detail;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('mousewheel', function(evt) {
      this.mouse_drag_y -= 0.1 * evt.wheelDeltaY;
      this.parent.doc.onDrag(that.gl, this.mouse_drag_x, this.mouse_drag_y, 2);
      this.parent.doc.needRender = true;
      window.status = this.id + ' SCROLL: ' + evt.detail;
      evt.returnValue = true;
    }, false);
    this.canvas.addEventListener('keypress', function(evt) {
      var keysEnabled = this.parent.x3dElem.getAttribute("keysEnabled");
      if(!keysEnabled || keysEnabled.toLowerCase() === "true") {
        this.parent.doc.onKeyPress(evt.charCode);
      }
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, true);
    this.canvas.addEventListener('keyup', function(evt) {
      var keysEnabled = this.parent.x3dElem.getAttribute("keysEnabled");
      if(!keysEnabled || keysEnabled.toLowerCase() === "true") {
        this.parent.doc.onKeyUp(evt.keyCode);
      }
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, true);
    this.canvas.addEventListener('keydown', function(evt) {
      var keysEnabled = this.parent.x3dElem.getAttribute("keysEnabled");
      if(!keysEnabled || keysEnabled.toLowerCase() === "true") {
        this.parent.doc.onKeyDown(evt.keyCode);
      }
      this.parent.doc.needRender = true;
      evt.returnValue = true;
    }, true);
    var touches = {
      numTouches: 0,
      lastDrag: new x3dom.fields.SFVec2f(),
      lastMiddle: new x3dom.fields.SFVec2f(),
      lastDistance: new x3dom.fields.SFVec2f(),
      lastSquareDistance: 0,
      lastAngle: 0,
      calcAngle: function(vector) {
        var rotation = vector.normalize().dot(new x3dom.fields.SFVec2f(1, 0));
        rotation = Math.acos(rotation);
        if(vector.y < 0) rotation = Math.PI + (Math.PI - rotation);
        return rotation;
      }
    };
    var mozilla_ids = [];
    var mozilla_touches = {
      touches: [],
      preventDefault: function() {}
    }
    var touchStartHandler = function(evt) {
        evt.preventDefault();
        if(touches.numTouches < 1 && evt.touches.length == 1) {
          touches.numTouches = 1;
          touches.lastDrag = new x3dom.fields.SFVec2f(evt.touches[0].screenX, evt.touches[0].screenY);
        } else if(touches.numTouches < 2 && evt.touches.length >= 2) {
          touches.numTouches = 2;
          var touch0 = new x3dom.fields.SFVec2f(evt.touches[0].screenX, evt.touches[0].screenY);
          var touch1 = new x3dom.fields.SFVec2f(evt.touches[1].screenX, evt.touches[1].screenY);
          var distance = touch1.subtract(touch0);
          var middle = distance.multiply(0.5).add(touch0);
          var squareDistance = distance.dot(distance);
          touches.lastDistance = distance;
          touches.lastMiddle = middle;
          touches.lastSquareDistance = squareDistance;
          touches.lastAngle = touches.calcAngle(distance);
        }
        var min = x3dom.fields.SFVec3f.MAX();
        var max = x3dom.fields.SFVec3f.MIN();
        if(this.parent.doc._scene.getVolume(min, max, true)) {
          this.parent.doc._scene._lastMin = min;
          this.parent.doc._scene._lastMax = max;
        }
      };
    var touchStartHandlerMoz = function(evt) {
        evt.preventDefault();
        var new_id = true;
        for(var i = 0; i < mozilla_ids.length; ++i)
        if(mozilla_ids[i] == evt.streamId) new_id = false;
        if(new_id == true) {
          evt.identifier = evt.streamId;
          mozilla_ids.push(evt.streamId);
          mozilla_touches.touches.push(evt);
        }
        touchStartHandler(mozilla_touches);
      };
    var touchMoveHandler = function(evt, doc) {
        evt.preventDefault();
        if(evt.touches.length == 1) {
          var currentDrag = new x3dom.fields.SFVec2f(evt.touches[0].screenX, evt.touches[0].screenY);
          var deltaDrag = currentDrag.subtract(touches.lastDrag);
          touches.lastDrag = currentDrag;
          var mx = x3dom.fields.SFMatrix4f.rotationY(deltaDrag.x / 100);
          var my = x3dom.fields.SFMatrix4f.rotationX(deltaDrag.y / 100);
          var rotMatrix = mx.mult(my);
          doc.onMoveView(that.gl, null, rotMatrix);
          doc.needRender = true;
        } else if(evt.touches.length >= 2) {
          var touch0 = new x3dom.fields.SFVec2f(evt.touches[0].screenX, evt.touches[0].screenY);
          var touch1 = new x3dom.fields.SFVec2f(evt.touches[1].screenX, evt.touches[1].screenY);
          var distance = touch1.subtract(touch0);
          var middle = distance.multiply(0.5).add(touch0);
          var squareDistance = distance.dot(distance);
          var deltaMiddle = middle.subtract(touches.lastMiddle);
          var deltaZoom = squareDistance - touches.lastSquareDistance;
          var deltaMove = new x3dom.fields.SFVec3f(deltaMiddle.x / screen.width, -deltaMiddle.y / screen.height, deltaZoom / (screen.width * screen.height * 0.2));
          var rotation = touches.calcAngle(distance);
          var angleDelta = touches.lastAngle - rotation;
          touches.lastAngle = rotation;
          var rotMatrix = x3dom.fields.SFMatrix4f.rotationZ(angleDelta);
          touches.lastMiddle = middle;
          touches.lastDistance = distance;
          touches.lastSquareDistance = squareDistance;
          doc.onMoveView(that.gl, deltaMove, rotMatrix);
          doc.needRender = true;
        }
      };
    var touchMoveHandlerW3C = function(evt) {
        touchMoveHandler(evt, this.parent.doc);
      };
    var touchMoveHandlerMoz = function(evt) {
        evt.preventDefault();
        for(var i = 0; i < mozilla_ids.length; ++i)
        if(mozilla_ids[i] == evt.streamId) mozilla_touches.touches[i] = evt;
        touchMoveHandler(mozilla_touches, this.parent.doc);
      };
    var touchEndHandler = function(evt) {
        evt.preventDefault();
        if(touches.numTouches == 2 && evt.touches.length == 1) touches.lastDrag = new x3dom.fields.SFVec2f(evt.touches[0].screenX, evt.touches[0].screenY);
        if(evt.touches.length < 2) touches.numTouches = evt.touches.length;
      };
    var touchEndHandlerMoz = function(evt) {
        evt.preventDefault();
        var remove_index = -1;
        for(var i = 0; i < mozilla_ids.length; ++i)
        if(mozilla_ids[i] == evt.streamId) remove_index = i;
        if(remove_index != -1) {
          mozilla_ids.splice(remove_index, 1);
          mozilla_touches.touches.splice(remove_index, 1);
        }
        touchEndHandler(mozilla_touches);
      };
    this.canvas.addEventListener('MozTouchDown', touchStartHandlerMoz, true);
    this.canvas.addEventListener('MozTouchMove', touchMoveHandlerMoz, true);
    this.canvas.addEventListener('MozTouchUp', touchEndHandlerMoz, true);
    this.canvas.addEventListener('touchstart', touchStartHandler, true);
    this.canvas.addEventListener('touchmove', touchMoveHandlerW3C, true);
    this.canvas.addEventListener('touchend', touchEndHandler, true);
  }
};
x3dom.X3DCanvas.prototype.tick = function() {
  var d = new Date().getTime();
  var fps = 1000.0 / (d - this.fps_t0);
  this.fps_t0 = d;
  try {
    this.doc.advanceTime(d / 1000);
    var animD = new Date().getTime() - d;
    if(this.doc.needRender) {
      if(this.x3dElem.runtime.isReady == true) {
        this.x3dElem.runtime.enterFrame();
      } else {
        this.x3dElem.runtime.ready();
        this.x3dElem.runtime.isReady = true;
        this.x3dElem.runtime.enterFrame();
      }
      if(this.statDiv) {
        this.statDiv.textContent = fps.toFixed(2) + ' fps';
        this.statDiv.appendChild(document.createElement("br"));
        this.statDiv.appendChild(document.createTextNode("anim: " + animD));
      }
      if(this.backend == 'flash') {
        if(this.isFlashReady) {
          this.canvas.setFPS({
            fps: fps
          });
          this.doc.needRender = false;
          this.doc.render(this.gl);
        }
      } else {
        this.doc.needRender = false;
        this.doc.render(this.gl);
      }
    }
    if(this.statDiv || this.progressDiv) {
      if(this.statDiv && this.doc.downloadCount) {
        if(this.doc.needRender) {
          this.statDiv.appendChild(document.createElement("br"));
          this.statDiv.appendChild(document.createTextNode("#Loading: " + this.doc.downloadCount));
        } else {
          this.statDiv.textContent = "#Loading: " + this.doc.downloadCount;
        }
      }
      if(this.doc.properties.getProperty("showProgress") !== 'false') {
        if(this.progressDiv) {
          this.progressDiv.childNodes[0].textContent = 'Loading: ' + this.doc.downloadCount;
          if(this.doc.downloadCount > 0) {
            this.progressDiv.style.display = 'inline';
          } else {
            this.progressDiv.style.display = 'none';
          }
          window.myThat = this;
          window.myStopProgress = function stopProgress() {
            window.myThat.doc.downloadCount = 0;
            window.myThat.progressDiv.style.display = 'none';
          };
          window.setTimeout("window.myStopProgress()", 1500);
        }
      } else {
        this.progressDiv.style.display = 'none';
      }
    }
  } catch(e) {
    x3dom.debug.logException(e);
    throw e;
  }
};
x3dom.X3DCanvas.prototype.load = function(uri, sceneElemPos, settings) {
  this.doc = new x3dom.X3DDocument(this.canvas, this.gl, settings);
  var x3dCanvas = this;
  this.doc.onload = function() {
    x3dom.debug.logInfo("loaded '" + uri + "'");
    if(x3dCanvas.hasRuntime) {
      (function mainloop() {
        x3dCanvas.watchForResize();
        x3dCanvas.tick();
        window.requestAnimFrame(mainloop, x3dCanvas);
      })();
    } else {
      x3dCanvas.tick();
    }
  };
  this.x3dElem.render = function() {
    if(x3dCanvas.hasRuntime) {
      x3dCanvas.doc.needRender = true;
    } else {
      x3dCanvas.doc.render(x3dCanvas.gl);
    }
  };
  this.x3dElem.context = x3dCanvas.gl.ctx3d;
  this.doc.onerror = function() {
    alert('Failed to load X3D document');
  };
  this.doc.load(uri, sceneElemPos);
};
x3dom.runtime = {};
x3dom.Runtime = function(doc, canvas) {
  this.doc = doc;
  this.canvas = canvas;
  this.isReady = false;
};
x3dom.Runtime.prototype.initialize = function(doc, canvas) {
  this.doc = doc;
  this.canvas = canvas;
  this.config = {};
  this.isReady = false;
};
x3dom.Runtime.prototype.ready = function() {
  x3dom.debug.logInfo('System ready.');
};
x3dom.Runtime.prototype.enterFrame = function() {}, x3dom.Runtime.prototype.getActiveBindable = function(typeName) {
  var stacks;
  var i, current, result;
  var type;
  stacks = this.canvas.doc._bindableBag._stacks;
  result = [];
  type = x3dom.nodeTypesLC[typeName.toLowerCase()];
  if(!type) {
    x3dom.debug.logError('No node of type "' + typeName + '" found');
    return null;
  }
  for(i = 0; i < stacks.length; i++) {
    current = stacks[i].getActive();
    if(current._xmlNode !== undefined && x3dom.isa(current, type)) {
      result.push(current);
    }
  }
  return result[0] ? result[0]._xmlNode : null;
};
x3dom.Runtime.prototype.nextView = function() {
  var stack = this.canvas.doc._scene.getViewpoint()._stack;
  if(stack) {
    stack.switchTo('next');
  } else {
    x3dom.debug.logError('No valid ViewBindable stack.');
  }
};
x3dom.Runtime.prototype.prevView = function() {
  var stack = this.canvas.doc._scene.getViewpoint()._stack;
  if(stack) {
    stack.switchTo('prev');
  } else {
    x3dom.debug.logError('No valid ViewBindable stack.');
  }
};
x3dom.Runtime.prototype.viewpoint = function() {
  return this.canvas.doc._scene.getViewpoint();
};
x3dom.Runtime.prototype.projectionMatrix = function() {
  return this.canvas.doc._viewarea.getProjectionMatrix();
};
x3dom.Runtime.prototype.lightMatrix = function() {
  this.canvas.doc._viewarea.getLightMatrix();
};
x3dom.Runtime.prototype.resetView = function() {
  this.canvas.doc._viewarea.resetView();
};
x3dom.Runtime.prototype.lightView = function() {
  if(this.canvas.doc._nodeBag.lights.length > 0) {
    this.canvas.doc._viewarea.animateTo(this.canvas.doc._viewarea.getLightMatrix()[0], this.canvas.doc._scene.getViewpoint());
    return true;
  } else {
    x3dom.debug.logInfo("No lights to navigate to");
    return false;
  }
};
x3dom.Runtime.prototype.uprightView = function() {
  this.canvas.doc._viewarea.uprightView();
};
x3dom.Runtime.prototype.showAll = function(axis) {
  this.canvas.doc._viewarea.showAll(axis);
};
x3dom.Runtime.prototype.debug = function(show) {
  if(show === true) {
    this.canvas.doc._viewarea._visDbgBuf = true;
    x3dom.debug.logContainer.style.display = "block";
    this.canvas.doc.needRender = true;
  }
  if(show === false) {
    this.canvas.doc._viewarea._visDbgBuf = false;
    x3dom.debug.logContainer.style.display = "none";
    this.canvas.doc.needRender = true;
  }
  return this.canvas.doc._viewarea._visDbgBuf;
};
x3dom.Runtime.prototype.navigationType = function() {
  return this.canvas.doc._scene.getNavigationInfo().getType();
};
x3dom.Runtime.prototype.examine = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("examine");
};
x3dom.Runtime.prototype.fly = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("fly");
};
x3dom.Runtime.prototype.lookAt = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("lookat");
};
x3dom.Runtime.prototype.lookAround = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("lookaround");
};
x3dom.Runtime.prototype.walk = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("walk");
};
x3dom.Runtime.prototype.game = function() {
  this.canvas.doc._scene.getNavigationInfo().setType("game");
};
x3dom.Runtime.prototype.resetExamin = function() {
  this.canvas.doc._viewarea._rotMat = x3dom.fields.SFMatrix4f.identity();
  this.canvas.doc._viewarea._transMat = x3dom.fields.SFMatrix4f.identity();
  this.canvas.doc._viewarea._movement = new x3dom.fields.SFVec3f(0, 0, 0);
  this.canvas.doc.needRender = true;
};
x3dom.Runtime.prototype.togglePoints = function() {
  if(this.canvas.doc._viewarea._points === undefined) this.canvas.doc._viewarea._points = 0;
  this.canvas.doc._viewarea._points = ++this.canvas.doc._viewarea._points % 2;
  this.canvas.doc.needRender = true;
};
x3dom.Runtime.prototype.pickMode = function(options) {
  if(options && options.internal === true) {
    return this.canvas.doc._scene._vf.pickMode;
  }
  return this.canvas.doc._scene._vf.pickMode.toLowerCase();
};
x3dom.Runtime.prototype.changePickMode = function(type, options) {
  type = type.toLowerCase();
  switch(type) {
  case 'idbuf':
    type = 'idBuf';
    break;
  case 'textcoord':
    type = 'textCoord';
    break;
  case 'color':
    type = 'color';
    break;
  case 'box':
    type = 'box';
    break;
  default:
    x3dom.debug.logWarning("Switch pickMode to " + type + ' unknown intersect type');
    type = undefined;
  }
  if(type !== undefined) {
    this.canvas.doc._scene._vf.pickMode = type;
    x3dom.debug.logInfo("Switched pickMode to '" + type + "'.");
    return false;
  }
  return true;
};
x3dom.Runtime.prototype.speed = function(newSpeed) {
  if(newSpeed) {
    this.canvas.doc._scene.getNavigationInfo()._vf.speed = newSpeed;
    x3dom.debug.logInfo("Changed navigation speed to " + this.canvas.doc._scene.getNavigationInfo()._vf.speed);
  }
  return this.canvas.doc._scene.getNavigationInfo()._vf.speed;
};
x3dom.Runtime.prototype.statistics = function(mode) {
  var statDiv = this.canvas.statDiv;
  if(statDiv) {
    if(mode === true) {
      statDiv.style.display = 'inline';
      return true;
    }
    if(mode === false) {
      statDiv.style.display = 'none';
      return false;
    }
    return statDiv.style.display != 'none'
  }
};
x3dom.Runtime.prototype.processIndicator = function(mode) {
  var processDiv = this.canvas.processDiv;
  if(processDiv) {
    if(mode === true) {
      processDiv.style.display = 'inline';
      return true;
    }
    if(mode === false) {
      processDiv.style.display = 'none';
      return false;
    }
    return processDiv.style.display != 'none'
  }
}, x3dom.Runtime.prototype.properties = function() {
  return this.canvas.doc.properties;
};
x3dom.Runtime.prototype.backendName = function() {
  return this.canvas.backend;
};
x3dom.Runtime.prototype.isA = function(domNode, nodeType) {
  var inherits = false;
  if(nodeType && domNode && domNode._x3domNode) {
    if(nodeType === "") {
      nodeType = "X3DNode";
    }
    inherits = x3dom.isa(domNode._x3domNode, x3dom.nodeTypesLC[nodeType.toLowerCase()]);
  }
  return inherits;
};
x3dom.detectActiveX = function() {
  var isInstalled = false;
  if(window.ActiveXObject) {
    var control = null;
    try {
      control = new ActiveXObject('AVALONATX.InstantPluginATXCtrl.1');
    } catch(e) {}
    if(control) {
      isInstalled = true;
    }
  }
  return isInstalled;
};
x3dom.rerouteSetAttribute = function(node, browser) {
  node._setAttribute = node.setAttribute;
  node.setAttribute = function(name, value) {
    var id = node.getAttribute("_x3domNode");
    var anode = browser.findNode(id);
    if(anode) return anode.parseField(name, value);
    else return 0;
  };
  for(var i = 0; i < node.childNodes.length; i++) {
    var child = node.childNodes[i];
    x3dom.rerouteSetAttribute(child, browser);
  }
};
x3dom.insertActiveX = function(x3d) {
  if(typeof x3dom.atxCtrlCounter == 'undefined') {
    x3dom.atxCtrlCounter = 0;
  }
  var height = x3d.getAttribute("height");
  var width = x3d.getAttribute("width");
  var parent = x3d.parentNode;
  var divelem = document.createElement("div");
  divelem.setAttribute("id", "x3dplaceholder");
  var inserted = parent.insertBefore(divelem, x3d);
  var hiddenx3d = document.createElement("div");
  hiddenx3d.style.display = "none";
  parent.appendChild(hiddenx3d);
  parent.removeChild(x3d);
  hiddenx3d.appendChild(x3d);
  var atx = document.createElement("object");
  var containerName = "Avalon" + x3dom.atxCtrlCounter;
  x3dom.atxCtrlCounter++;
  atx.setAttribute("id", containerName);
  atx.setAttribute("classid", "CLSID:F3254BA0-99FF-4D14-BD81-EDA9873A471E");
  atx.setAttribute("width", width ? width : "500");
  atx.setAttribute("height", height ? height : "500");
  inserted.appendChild(atx);
  var atxctrl = document.getElementById(containerName);
  var browser = atxctrl.getBrowser();
  var scene = browser.importDocument(x3d);
  browser.replaceWorld(scene);
  x3d.getBrowser = function() {
    return atxctrl.getBrowser();
  };
  x3dom.rerouteSetAttribute(x3d, browser);
};
x3dom.userAgentFeature = {
  supportsDOMAttrModified: false
};

x3dom.load = function() {

  if(x3dom.loaded === false) {

    x3dom.loaded = true;

    var i, j;
    var x3ds = document.getElementsByTagName('X3D');
    var w3sg = document.getElementsByTagName('webSG');
    var params;
    var settings = new x3dom.Properties();
    var validParams = array_to_object(['showLog', 'showStat', 'showProgress', 'PrimitiveQuality', 'component', 'loadpath', 'disableDoubleClick', 'maxActiveDownloads']);
    var components, prefix;
    var showLoggingConsole = false;
    for(i = 0; i < x3ds.length; i++) {
      settings.setProperty("showLog", x3ds[i].getAttribute("showLog") || 'false');
      settings.setProperty("showStat", x3ds[i].getAttribute("showStat") || 'false');
      settings.setProperty("showProgress", x3ds[i].getAttribute("showProgress") || 'true');
      settings.setProperty("PrimitiveQuality", x3ds[i].getAttribute("PrimitiveQuality") || 'High');
      params = x3ds[i].getElementsByTagName('PARAM');
      for(j = 0; j < params.length; j++) {
        if(params[j].getAttribute('name') in validParams) {
          settings.setProperty(params[j].getAttribute('name'), params[j].getAttribute('value'));
        } else {}
      }
      if(settings.getProperty('showLog') === 'true') {
        showLoggingConsole = true;
      }
      if(typeof X3DOM_SECURITY_OFF != 'undefined' && X3DOM_SECURITY_OFF === true) {
        components = settings.getProperty('components', x3ds[i].getAttribute("components"));
        if(components) {
          prefix = settings.getProperty('loadpath', x3ds[i].getAttribute("loadpath"));
          components = components.trim().split(',');
          for(j = 0; j < components.length; j++) {
            x3dom.loadJS(components[j] + ".js", prefix);
          }
        }
      }
      if(typeof X3DOM_SECURITY_OFF != 'undefined' && X3DOM_SECURITY_OFF === true) {
        if(x3ds[i].getAttribute("src")) {
          var _scene = document.createElement("scene");
          var _inl = document.createElement("Inline");
          _inl.setAttribute("url", x3ds[i].getAttribute("src"));
          _scene.appendChild(_inl);
          x3ds[i].appendChild(_scene);
        }
      }
    }
    if(showLoggingConsole === true) {
      x3dom.debug.activate(true);
    } else {
      x3dom.debug.activate(false);
    }
    if(window.navigator.userAgent.match(/webkit/i)) {
      x3dom.debug.logInfo("Active DOMAttrModifiedEvent workaround for webkit ");
      x3dom.userAgentFeature.supportsDOMAttrModified = false;
    }
    x3ds = Array.map(x3ds, function(n) {
      n.runtime = new x3dom.Runtime();
      n.hasRuntime = true;
      return n;
    });
    w3sg = Array.map(w3sg, function(n) {
      n.hasRuntime = false;
      return n;
    });
    for(i = 0; i < w3sg.length; i++) {
      x3ds.push(w3sg[i]);
    }
    if(x3dom.versionInfo !== undefined) {
      x3dom.debug.logInfo("X3DOM version " + x3dom.versionInfo.version + ", " + "Revison <a href='https://github.com/x3dom/x3dom/tree/" + x3dom.versionInfo.revision + "'>" + x3dom.versionInfo.revision + "</a>, " + "Date " + x3dom.versionInfo.date);
    }
    x3dom.debug.logInfo("Found " + (x3ds.length - w3sg.length) + " X3D and " + w3sg.length + " (experimental) WebSG nodes...");
    var x3d_element;
    var x3dcanvas;
    var altDiv, altP, aLnk, altImg, altImgObj;
    var t0, t1;
    for(i = 0; i < x3ds.length; i++) {
      x3d_element = x3ds[i];
      if(x3dom.detectActiveX()) {
        x3dom.insertActiveX(x3d_element);
        continue;
      }
      x3dcanvas = new x3dom.X3DCanvas(x3d_element, i);
      if(x3dcanvas.gl === null) {
        altDiv = document.createElement("div");
        altDiv.setAttribute("class", "x3dom-nox3d");
        altP = document.createElement("p");
        altP.appendChild(document.createTextNode("WebGL is not yet supported in your browser. "));
        aLnk = document.createElement("a");
        aLnk.setAttribute("href", "http://www.x3dom.org/?page_id=9");
        aLnk.appendChild(document.createTextNode("Follow link for a list of supported browsers... "));
        altDiv.appendChild(altP);
        altDiv.appendChild(aLnk);
        x3dcanvas.x3dElem.appendChild(altDiv);
        if(x3dcanvas.statDiv) {
          x3d_element.removeChild(x3dcanvas.statDiv);
        }
        altImg = x3ds[i].getAttribute("altImg") || null;
        if(altImg) {
          altImgObj = new Image();
          altImgObj.src = altImg;
          x3d_element.style.backgroundImage = "url(" + altImg + ")";
        }
        continue;
      }
      t0 = new Date().getTime();
      x3ds[i].runtime = new x3dom.Runtime(x3ds[i], x3dcanvas);
      x3ds[i].runtime.initialize(x3ds[i], x3dcanvas);
      if(x3dom.runtime.ready) {
        x3ds[i].runtime.ready = x3dom.runtime.ready;
      }
      x3dcanvas.load(x3ds[i], i, settings);
      if(settings.getProperty('showStat') === 'true') {
        x3ds[i].runtime.statistics(true);
      } else {
        x3ds[i].runtime.statistics(false);
      }
      if(settings.getProperty('showProgress') === 'true') {
        if(settings.getProperty('showProgress') === 'bar') {
          x3dcanvas.progressDiv.setAttribute("class", "x3dom-progress bar");
        }
        x3ds[i].runtime.processIndicator(true);
      } else {
        x3ds[i].runtime.processIndicator(false);
      }
      x3dom.canvases.push(x3dcanvas);
      t1 = new Date().getTime() - t0;
      x3dom.debug.logInfo("Time for setup and init of GL element no. " + i + ": " + t1 + " ms.");
    }
    var ready = (function(eventType) {
      var evt = null;
      if(document.createEvent) {
        evt = document.createEvent("Events");
        evt.initEvent(eventType, true, true);
        document.dispatchEvent(evt);
      } else if(document.createEventObject) {
        evt = document.createEventObject();
        document.body.fireEvent('on' + eventType, evt);
      }
    })('load');
  }
};

x3dom.unload = function() {
  x3dom.loaded = false;
  for(var i = 0; i < x3dom.canvases.length; i++) {
    x3dom.canvases[i].doc.shutdown(x3dom.canvases[i].gl);
  }
  x3dom.canvases = [];
};

(function() {
  var onload = x3dom.load;

  var onunload = x3dom.unload;

  if(window.location.pathname.lastIndexOf(".xhtml") > 0) {
    document.__getElementById = document.getElementById;
    document.getElementById = function(id) {
      var obj = this.__getElementById(id);
      if(!obj) {
        var elems = this.getElementsByTagName("*");
        for(var i = 0; i < elems.length && !obj; i++) {
          if(elems[i].getAttribute("id") === id) {
            obj = elems[i];
          }
        }
      }
      return obj;
    };
  } else if((window.location.pathname.lastIndexOf(".html") > 0) && (navigator.userAgent.indexOf("Firefox") != -1)) {
    document.getElementById = function(id) {
      var node = travers(document.getElementsByTagName('body')[0], id);
      return node;
    };
  }
  if(window.addEventListener) {
    window.addEventListener('load', onload, false);
    window.addEventListener('unload', onunload, false);
    window.addEventListener('reload', onunload, false);
  } else if(window.attachEvent) {
    window.attachEvent('onload', onload);
    window.attachEvent('onunload', onunload);
    window.attachEvent('onreload', onunload);
  }

})();

function travers(node, id) {
  if(node instanceof Element) {
    if(node.getAttribute('id') == id) {
      return node;
    } else if(node.hasChildNodes()) {
      for(var i = 0;
      (i < node.childNodes.length); i++) {
        val = travers(node.childNodes[i], id);
        if(val) return val;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
x3dom.gfx_webgl = (function() {
  function Context(ctx3d, canvas, name) {
    this.ctx3d = ctx3d;
    this.canvas = canvas;
    this.name = name;
    this.cached_shader_programs = {};
    this.cached_shaders = {};
  }
  Context.prototype.getName = function() {
    return this.name;
  };

  function setupContext(canvas) {
    var validContextNames = ['moz-webgl', 'webkit-3d', 'experimental-webgl', 'webgl'];
    var ctx = null;
    var ctxAttribs = {
      alpha: true,
      depth: true,
      stencil: true,
      antialias: true,
      premultipliedAlpha: false
    };
    for(var i = 0; i < validContextNames.length; i++) {
      try {
        ctx = canvas.getContext(validContextNames[i], ctxAttribs);
        if(ctx) {
          var newCtx = new Context(ctx, canvas, 'webgl');
          try {
            if(ctx.getString) {
              x3dom.debug.logInfo("\nVendor: " + ctx.getString(ctx.VENDOR) + ", " + "Renderer: " + ctx.getString(ctx.RENDERER) + ", " + "Version: " + ctx.getString(ctx.VERSION) + ", " + "ShadingLangV.: " + ctx.getString(ctx.SHADING_LANGUAGE_VERSION) + ", " + "\nExtensions: " + ctx.getString(ctx.EXTENSIONS));
            } else {
              x3dom.debug.logInfo("\nVendor: " + ctx.getParameter(ctx.VENDOR) + ", " + "Renderer: " + ctx.getParameter(ctx.RENDERER) + ", " + "Version: " + ctx.getParameter(ctx.VERSION) + ", " + "ShadingLangV.: " + ctx.getParameter(ctx.SHADING_LANGUAGE_VERSION) + ", " + "\nExtensions: " + ctx.getSupportedExtensions());
              x3dom.caps.VENDOR = ctx.getParameter(ctx.VENDOR);
              x3dom.caps.VERSION = ctx.getParameter(ctx.VERSION);
              x3dom.caps.RENDERER = ctx.getParameter(ctx.RENDERER);
              x3dom.caps.SHADING_LANGUAGE_VERSION = ctx.getParameter(ctx.SHADING_LANGUAGE_VERSION);
              x3dom.caps.RED_BITS = ctx.getParameter(ctx.RED_BITS);
              x3dom.caps.GREEN_BITS = ctx.getParameter(ctx.GREEN_BITS);
              x3dom.caps.BLUE_BITS = ctx.getParameter(ctx.BLUE_BITS);
              x3dom.caps.ALPHA_BITS = ctx.getParameter(ctx.ALPHA_BITS);
              x3dom.caps.MAX_VERTEX_ATTRIBS = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);
              x3dom.caps.MAX_VERTEX_TEXTURE_IMAGE_UNITS = ctx.getParameter(ctx.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
              x3dom.caps.MAX_VARYING_VECTORS = ctx.getParameter(ctx.MAX_VARYING_VECTORS);
              x3dom.caps.MAX_VERTEX_UNIFORM_VECTORS = ctx.getParameter(ctx.MAX_VERTEX_UNIFORM_VECTORS);
              x3dom.caps.MAX_COMBINED_TEXTURE_IMAGE_UNITS = ctx.getParameter(ctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
              x3dom.caps.MAX_TEXTURE_SIZE = ctx.getParameter(ctx.MAX_TEXTURE_SIZE);
              x3dom.caps.MAX_CUBE_MAP_TEXTURE_SIZE = ctx.getParameter(ctx.MAX_CUBE_MAP_TEXTURE_SIZE);
              x3dom.caps.NUM_COMPRESSED_TEXTURE_FORMATS = ctx.getParameter(ctx.NUM_COMPRESSED_TEXTURE_FORMATS);
              x3dom.caps.MAX_RENDERBUFFER_SIZE = ctx.getParameter(ctx.MAX_RENDERBUFFER_SIZE);
              x3dom.caps.MAX_VIEWPORT_DIMS = ctx.getParameter(ctx.MAX_VIEWPORT_DIMS);
              x3dom.caps.ALIASED_LINE_WIDTH_RANGE = ctx.getParameter(ctx.ALIASED_LINE_WIDTH_RANGE);
              x3dom.caps.ALIASED_POINT_SIZE_RANGE = ctx.getParameter(ctx.ALIASED_POINT_SIZE_RANGE);
              x3dom.caps.EXTENSIONS = ctx.getSupportedExtensions();
              x3dom.caps.MOBILE = (navigator.appVersion.indexOf("Mobile") > -1);
              if(x3dom.caps.MOBILE) {
                x3dom.debug.logWarning("Detect mobile Browser! Using low quality shaders!");
              }
            }
          } catch(ex) {
            x3dom.debug.logWarning("Your browser probably supports an older WebGL version. " + "Please try the mobile runtime instead:\n" + "http://www.x3dom.org/x3dom/src_mobile/x3dom.js");
          }
          return newCtx;
        }
      } catch(e) {}
    }
    return null;
  }
  var g_shaders = {};
  g_shaders['vs-x3d-bg-texture'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "varying vec2 fragTexCoord;" + "" + "void main(void) {" + "    vec2 texCoord = (position.xy + 1.0) * 0.5;" + "    fragTexCoord = texCoord;" + "    gl_Position = vec4(position.xy, 0.0, 1.0);" + "}"
  };
  g_shaders['vs-x3d-bg-texture-bgnd'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "attribute vec2 texcoord;" + "uniform mat4 modelViewProjectionMatrix;" + "varying vec2 fragTexCoord;" + "" + "void main(void) {" + "    fragTexCoord = texcoord;" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "}"
  };
  g_shaders['fs-x3d-bg-texture'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "uniform sampler2D tex;\n" + "varying vec2 fragTexCoord;\n" + "\n" + "void main(void) {\n" + "    gl_FragColor = texture2D(tex, fragTexCoord);\n" + "}"
  };
  g_shaders['vs-x3d-bg-textureCube'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "uniform mat4 modelViewProjectionMatrix;" + "varying vec3 fragNormal;" + "" + "void main(void) {" + "    fragNormal = (vec4(normalize(position), 0.0)).xyz;" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "}"
  };
  g_shaders['fs-x3d-bg-textureCube'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "uniform samplerCube tex;" + "varying vec3 fragNormal;" + "" + "void main(void) {" + "    vec3 normal = -reflect(normalize(fragNormal), vec3(0.0,0.0,1.0));" + "    if (abs(normal.y) >= abs(normal.x) && abs(normal.y) >= abs(normal.z))" + "        normal.x *= -1.0;" + "    gl_FragColor = textureCube(tex, normal);" + "}"
  };
  g_shaders['vs-x3d-vertexcolorUnlit'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "attribute vec3 color;" + "varying vec3 fragColor;" + "uniform mat4 modelViewProjectionMatrix;" + "" + "void main(void) {" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "    gl_PointSize = 2.0;" + "    fragColor = color;" + "}"
  };
  g_shaders['fs-x3d-vertexcolorUnlit'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "uniform vec3 diffuseColor;" + "uniform float alpha;" + "uniform float lightOn;" + "varying vec3 fragColor;" + "" + "void main(void) {" + "    gl_FragColor = vec4(fragColor, alpha);" + "}"
  };
  g_shaders['vs-x3d-default'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "uniform mat4 modelViewProjectionMatrix;" + "void main(void) {" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "}"
  };
  g_shaders['fs-x3d-default'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "struct Material {" + "   vec3  diffuseColor;" + "   vec3  specularColor;" + "   vec3  emissiveColor;" + "   float shininess;" + "   float transparency;" + "   float ambientIntensity;" + "};" + "uniform Material material;" + "void main(void) {" + "    gl_FragColor = vec4(material.emissiveColor, 1.0);" + "}"
  };
  g_shaders['vs-x3d-texcoordUnlit'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "attribute vec2 texcoord;" + "varying vec3 fragColor;" + "uniform mat4 modelViewProjectionMatrix;" + "" + "void main(void) {" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "    fragColor = vec3(abs(texcoord.x), abs(texcoord.y), 0.0);" + "}"
  };
  g_shaders['fs-x3d-texcoordUnlit'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "uniform float alpha;" + "varying vec3 fragColor;" + "" + "void main(void) {" + "    gl_FragColor = vec4(fragColor, alpha);" + "}"
  };
  g_shaders['vs-x3d-pick'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "uniform mat4 modelMatrix;" + "uniform mat4 modelViewProjectionMatrix;" + "uniform vec3 wcMin;" + "uniform vec3 wcMax;" + "varying vec3 worldCoord;" + "void main(void) {" + "    worldCoord = (modelMatrix * vec4(position, 1.0)).xyz;" + "    vec3 dia = wcMax - wcMin;" + "    worldCoord = worldCoord - wcMin;" + "    worldCoord.x /= dia.x;" + "    worldCoord.y /= dia.y;" + "    worldCoord.z /= dia.z;" + "    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "}"
  };
  g_shaders['vs-x3d-pickIG'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "uniform mat4 modelMatrix;" + "uniform mat4 modelViewProjectionMatrix;" + "uniform vec3 wcMin;" + "uniform vec3 wcMax;" + "varying vec3 worldCoord;" + "uniform float indexed;" + "uniform float imageGeometry;" + "uniform vec3 IG_bboxMin;" + "uniform vec3 IG_bboxMax;" + "uniform float IG_coordTextureWidth;" + "uniform float IG_coordTextureHeight;" + "uniform float IG_indexTextureWidth;" + "uniform float IG_indexTextureHeight;" + "uniform sampler2D IG_indexTexture;" + "uniform sampler2D IG_coordinateTexture;" + "uniform float IG_implicitMeshSize;" + "void main(void) {" + "  if(imageGeometry == 1.0) { " + "  vec2 IG_texCoord;" + "  if(indexed == 1.0) {" + "   vec2 halfPixel = vec2(0.5/IG_indexTextureWidth,0.5/IG_indexTextureHeight);" + "   IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_indexTextureWidth), position.y*(IG_implicitMeshSize/IG_indexTextureHeight)) + halfPixel;" + "   vec2 IG_index = texture2D( IG_indexTexture, IG_texCoord ).rg;" + "   IG_texCoord = IG_index * 0.996108948;" + "  } else { " + "   vec2 halfPixel = vec2(0.5/IG_coordTextureWidth, 0.5/IG_coordTextureHeight);" + "   IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_coordTextureWidth), position.y*(IG_implicitMeshSize/IG_coordTextureHeight)) + halfPixel;" + "  }" + "  vec3 pos = texture2D( IG_coordinateTexture, IG_texCoord ).rgb;" + "   pos = pos * (IG_bboxMax - IG_bboxMin) + IG_bboxMin;" + "     worldCoord = (modelMatrix * vec4(pos, 1.0)).xyz;" + "  gl_Position = modelViewProjectionMatrix * vec4(pos, 1.0);" + "  } else { " + "     worldCoord = (modelMatrix * vec4(position, 1.0)).xyz;" + "  gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);" + "  }" + "    vec3 dia = wcMax - wcMin;" + "    worldCoord = worldCoord - wcMin;" + "    worldCoord.x /= dia.x;" + "    worldCoord.y /= dia.y;" + "    worldCoord.z /= dia.z;" + "}"
  };
  g_shaders['fs-x3d-pick'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "uniform float alpha;" + "varying vec3 worldCoord;" + "void main(void) {" + "    gl_FragColor = vec4(worldCoord, alpha);" + "}"
  };
  g_shaders['vs-x3d-shadow'] = {
    type: "vertex",
    data: "attribute vec3 position;" + "uniform mat4 modelViewProjectionMatrix;" + "varying vec4 projCoord;" + "void main(void) {" + "   projCoord = modelViewProjectionMatrix * vec4(position, 1.0);" + "   gl_Position = projCoord;" + "}"
  };
  g_shaders['fs-x3d-shadow'] = {
    type: "fragment",
    data: "#ifdef GL_ES             \n" + "  precision highp float; \n" + "#endif                   \n" + "\n" + "varying vec4 projCoord;" + "void main(void) {" + "    vec3 proj = (projCoord.xyz / projCoord.w);" + "    vec4 outVal = vec4(0.0);" + "    float toFixed = 255.0 / 256.0;" + "    outVal.r = fract(proj.z * toFixed);" + "    outVal.g = fract(proj.z * toFixed * 255.0);" + "    outVal.b = fract(proj.z * toFixed * 255.0 * 255.0);" + "    outVal.a = fract(proj.z * toFixed * 255.0 * 255.0 * 255.0);" + "    gl_FragColor = outVal;" + "}"
  };

  function getDefaultShaderProgram(gl, suffix) {
    var prog = gl.createProgram();
    var vs = gl.createShader(gl.VERTEX_SHADER);
    var fs = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(vs, g_shaders['vs-x3d-' + suffix].data);
    gl.shaderSource(fs, g_shaders['fs-x3d-' + suffix].data);
    gl.compileShader(vs);
    if(!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
      x3dom.debug.logError("VertexShader " + gl.getShaderInfoLog(vs));
    }
    gl.compileShader(fs);
    if(!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
      x3dom.debug.logError("FragmentShader " + gl.getShaderInfoLog(fs));
    }
    gl.attachShader(prog, vs);
    gl.attachShader(prog, fs);
    gl.linkProgram(prog);
    var msg = gl.getProgramInfoLog(prog);
    if(msg) {
      x3dom.debug.logError(msg);
    }
    return wrapShaderProgram(gl, prog);
  }

  function scaleImage(image) {
    if(!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {
      var canvas = document.createElement("canvas");
      canvas.width = nextHighestPowerOfTwo(image.width);
      canvas.height = nextHighestPowerOfTwo(image.height);
      var ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);
      image = canvas;
    }
    return image;
  }

  function isPowerOfTwo(x) {
    return((x & (x - 1)) === 0);
  }

  function nextHighestPowerOfTwo(x) {
    --x;
    for(var i = 1; i < 32; i <<= 1) {
      x = x | x >> i;
    }
    return(x + 1);
  }

  function nextBestPowerOfTwo(x) {
    var log2x = Math.log(x) / Math.log(2);
    return Math.pow(2, Math.round(log2x));
  }
  Context.prototype.getShaderProgram = function(gl, ids) {
    var shader = [];
    var prog = null;
    var debug = [];
    if(this.cached_shader_programs[ids[0] + ids[1]]) {
      prog = this.cached_shader_programs[ids[0] + ids[1]];
    } else {
      for(var id = 0; id < 2; id++) {
        if(!g_shaders[ids[id]]) {
          x3dom.debug.logError('Cannot find shader ' + ids[id]);
          return;
        }
        if(this.cached_shaders[ids[id]]) {
          shader[id] = this.cached_shaders[ids[id]];
        } else {
          if(g_shaders[ids[id]].type == 'vertex') {
            shader[id] = gl.createShader(gl.VERTEX_SHADER);
          } else if(g_shaders[ids[id]].type == 'fragment') {
            shader[id] = gl.createShader(gl.FRAGMENT_SHADER);
          } else {
            x3dom.debug.logError('Invalid shader type ' + g_shaders[id].type);
            return;
          }
          gl.shaderSource(shader[id], g_shaders[ids[id]].data);
          gl.compileShader(shader[id]);
          if(!gl.getShaderParameter(shader[id], gl.COMPILE_STATUS)) {
            if(id == 0) {
              x3dom.debug.logError("VertexShader " + gl.getShaderInfoLog(shader[id]));
            } else {
              x3dom.debug.logError("FragmentShader " + gl.getShaderInfoLog(shader[id]));
            }
          }
          this.cached_shaders[ids[id]] = shader[id];
        }
      }
      prog = gl.createProgram();
      gl.attachShader(prog, shader[0]);
      gl.attachShader(prog, shader[1]);
      gl.linkProgram(prog);
      var msg = gl.getProgramInfoLog(prog);
      if(msg) {
        x3dom.debug.logError(msg);
      }
      this.cached_shader_programs[ids[0] + ids[1]] = wrapShaderProgram(gl, prog);
      prog = this.cached_shader_programs[ids[0] + ids[1]];
    }
    return prog;
  };

  function wrapShaderProgram(gl, sp) {
    var shader = {};
    shader.bind = function() {
      gl.useProgram(sp);
    };
    var loc = null,
      obj = null;
    var i = 0;
    var glErr;
    var numUniforms = gl.getProgramParameter(sp, gl.ACTIVE_UNIFORMS);
    for(i = 0; i < numUniforms; ++i) {
      try {
        obj = gl.getActiveUniform(sp, i);
      } catch(eu) {}
      glErr = gl.getError();
      if(glErr !== 0) {
        x3dom.debug.logError("GL-Error: " + glErr);
      }
      loc = gl.getUniformLocation(sp, obj.name);
      var objName = obj.name;
      if(obj.name.lastIndexOf("[0]") == obj.name.length - 3) {
        objName = obj.name.substr(0, obj.name.length - 3);
      }
      switch(obj.type) {
      case gl.SAMPLER_2D:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform1i(loc, val);
          };
        })(loc));
        break;
      case gl.SAMPLER_CUBE:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform1i(loc, val);
          };
        })(loc));
        break;
      case gl.BOOL:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform1i(loc, val);
          };
        })(loc));
        break;
      case gl.FLOAT:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform1f(loc, val);
          };
        })(loc));
        break;
      case gl.FLOAT_VEC2:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform2f(loc, val[0], val[1]);
          };
        })(loc));
        break;
      case gl.FLOAT_VEC3:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform3f(loc, val[0], val[1], val[2]);
          };
        })(loc));
        break;
      case gl.FLOAT_VEC4:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform4f(loc, val[0], val[1], val[2], val[3]);
          };
        })(loc));
        break;
      case gl.FLOAT_MAT2:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniformMatrix2fv(loc, false, new Float32Array(val));
          };
        })(loc));
        break;
      case gl.FLOAT_MAT3:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniformMatrix3fv(loc, false, new Float32Array(val));
          };
        })(loc));
        break;
      case gl.FLOAT_MAT4:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniformMatrix4fv(loc, false, new Float32Array(val));
          };
        })(loc));
        break;
      case gl.INT:
        shader.__defineSetter__(objName, (function(loc) {
          return function(val) {
            gl.uniform1i(loc, val);
          };
        })(loc));
        break;
      default:
        x3dom.debug.logWarning('GLSL program variable ' + obj.name + ' has unknown type ' + obj.type);
      }
    }
    var numAttribs = gl.getProgramParameter(sp, gl.ACTIVE_ATTRIBUTES);
    for(i = 0; i < numAttribs; ++i) {
      try {
        obj = gl.getActiveAttrib(sp, i);
      } catch(ea) {}
      glErr = gl.getError();
      if(glErr !== 0) {
        x3dom.debug.logError("GL-Error: " + glErr);
      }
      loc = gl.getAttribLocation(sp, obj.name);
      shader[obj.name] = loc;
    }
    return shader;
  }

  function useLightingFunc(viewarea) {
    var result = [0, false];
    var slights = viewarea.getLights();
    var numLights = slights.length;
    if(numLights > 0) {
      if(numLights > 8) {
        result[0] = 8;
      } else {
        result[0] = numLights;
      }
    }
    for(var i = 0; i < numLights; i++) {
      if(slights[i]._vf.shadowIntensity > 0.0) {
        result[1] = true;
      }
    }
    var nav = viewarea._scene.getNavigationInfo();
    if(nav._vf.headlight) {
      result[0] += 1;
    }
    return result;
  }
  Context.prototype.generateVSMobile = function(viewarea, shape) {
    var texture = (shape._cf.appearance.node._cf.texture.node || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) ? 1 : 0;
    var textureTransform = (shape._cf.appearance.node._cf.textureTransform.node !== null) ? 1 : 0;
    var sphereMapping = (shape._cf.geometry.node._cf.texCoord !== undefined && shape._cf.geometry.node._cf.texCoord.node !== null && shape._cf.geometry.node._cf.texCoord.node._vf.mode) ? (shape._cf.geometry.node._cf.texCoord.node._vf.mode.toLowerCase() == "sphere") ? 1 : 0 : 0;
    var cubeMap = (shape._cf.appearance.node._cf.texture.node) ? x3dom.isa(shape._cf.appearance.node._cf.texture.node, x3dom.nodeTypes.X3DEnvironmentTextureNode) ? 1 : 0 : 0;
    var blending = (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text) || cubeMap || (shape._cf.appearance.node._cf.texture.node && (shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 1 || shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 2))) ? 1 : 0;
    var vertexColor = (shape._cf.geometry.node._mesh._colors[0].length > 0 || shape._cf.geometry.node.getColorTexture() || (shape._cf.geometry.node._vf.color !== undefined && shape._cf.geometry.node._vf.color.length > 0)) ? shape._cf.geometry.node._mesh._numColComponents : 0;
    var lights = (viewarea.getLights().length) + (viewarea._scene.getNavigationInfo()._vf.headlight);
    var solid = (shape.isSolid()) ? 1 : 0;
    var fog = (viewarea._scene.getFog()._vf.visibilityRange > 0) ? 1 : 0;
    var imageGeometry = (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.ImageGeometry)) ? 1 : 0;
    var iG_Precision = (imageGeometry) ? shape._cf.geometry.node.numCoordinateTextures() : 0;
    var iG_Indexed = (imageGeometry && shape._cf.geometry.node.getIndexTexture() != null) ? 1.0 : 0.0;
    var shaderIdentifier = "vs-x3d-mobil-" + vertexColor + texture + textureTransform + sphereMapping + blending + cubeMap + solid + fog + lights + imageGeometry + iG_Precision + iG_Indexed;
    if(!g_shaders[shaderIdentifier]) {
      var shader = "";
      shader += "attribute vec3 position;\n";
      shader += "attribute vec3 normal;\n";
      shader += "uniform mat4 modelViewMatrix;\n";
      shader += "uniform mat4 normalMatrix;\n";
      shader += "uniform mat4 modelViewProjectionMatrix;\n";
      shader += "uniform vec3  diffuseColor;\n";
      shader += "uniform vec3  specularColor;\n";
      shader += "uniform vec3  emissiveColor;\n";
      shader += "uniform float shininess;\n";
      shader += "uniform float transparency;\n";
      shader += "uniform float ambientIntensity;\n";
      shader += "varying vec4 fragColor;\n";
      if(imageGeometry) {
        shader += "uniform vec3 IG_bboxMin;";
        shader += "uniform vec3 IG_bboxMax;";
        shader += "uniform float IG_coordTextureWidth;";
        shader += "uniform float IG_coordTextureHeight;";
        shader += "uniform sampler2D IG_normalTexture;";
        shader += "uniform float IG_implicitMeshSize;";
        for(var i = 0; i < iG_Precision; i++) {
          shader += "uniform sampler2D IG_coordinateTexture" + i + ";";
        }
        if(iG_Indexed) {
          shader += "uniform sampler2D IG_indexTexture;";
          shader += "uniform float IG_indexTextureWidth;";
          shader += "uniform float IG_indexTextureHeight;";
        }
      }
      if(fog) {
        shader += "uniform vec3  fogColor;\n" + "uniform float fogType;\n" + "uniform float fogRange;\n" + "float calcFog(in vec3 eye) {\n" + "   float f0 = 0.0;\n" + "   if(fogType == 0.0) {\n" + "       if(length(eye) < fogRange){\n" + "           f0 = (fogRange-length(eye)) / fogRange;\n" + "       }\n" + "   }else{\n" + "       if(length(eye) < fogRange){\n" + "           f0 = exp(-length(eye) / (fogRange-length(eye) ) );\n" + "       }\n" + "   }\n" + "   f0 = clamp(f0, 0.0, 1.0);\n" + "   return f0;\n" + "}";
      }
      if(lights) {
        for(var l = 0; l < lights; l++) {
          shader += "uniform float Light" + l + "_On;\n";
          shader += "uniform float Light" + l + "_Type;\n";
          shader += "uniform vec3  Light" + l + "_Location;\n";
          shader += "uniform vec3  Light" + l + "_Direction;\n";
          shader += "uniform vec3  Light" + l + "_Color;\n";
          shader += "uniform vec3  Light" + l + "_Attenuation;\n";
          shader += "uniform float Light" + l + "_Intensity;\n";
          shader += "uniform float Light" + l + "_AmbientIntensity;\n";
          shader += "uniform float Light" + l + "_BeamWidth;\n";
          shader += "uniform float Light" + l + "_CutOffAngle;\n";
          shader += "uniform float Light" + l + "_ShadowIntensity;\n";
        }
        shader += "void lighting(in float lType, in vec3 lLocation, in vec3 lDirection, in vec3 lColor, in vec3 lAttenuation," + "       in float lIntensity, in float lAmbientIntensity, in float lBeamWidth, in float lCutOffAngle," + "       in vec3 N, in vec3 V, inout vec3 ambient, inout vec3 diffuse, inout vec3 specular) {" + "   vec3 L;\n" + "   float spot = 1.0, attentuation = 1.0;\n" + "   if(lType == 0.0) {\n" + "       L = -normalize(lDirection);\n" + "   }else{\n" + "       L = normalize(lLocation - (-V));" + "       float distance = length(L);" + "       L /= distance;\n" + "       attentuation = 1.0 / (lAttenuation.x + lAttenuation.y * distance + lAttenuation.z * (distance * distance));" + "       attentuation *= max(0.0, dot(N, L));" + "       if(lType == 2.0) {" + "           float spotAngle = acos(max(0.0, dot(-L, normalize(lDirection))));" + "           if(spotAngle >= lCutOffAngle) spot = 0.0;" + "           else if(spotAngle <= lBeamWidth) spot = 1.0;" + "           else spot = (spotAngle - lCutOffAngle ) / (lBeamWidth - lCutOffAngle);" + "       }" + "   }" + "   vec3  H = normalize( L + V );\n" + "   float NdotL = max(0.0, dot(N, L));\n" + "   float NdotH = max(0.0, dot(N, H));\n" + "   float ambientFactor  = lAmbientIntensity * ambientIntensity;" + "   float diffuseFactor  = lIntensity * NdotL;" + "   float specularFactor = lIntensity * NdotL * pow(NdotH, shininess*128.0);" + "   ambient  += lColor * ambientFactor * attentuation * spot;" + "   diffuse  += lColor * diffuseFactor * attentuation * spot;" + "   specular += lColor * specularFactor * attentuation * spot;" + "}";
      }
      if(vertexColor) {
        if(imageGeometry) {
          shader += "uniform sampler2D IG_colorTexture;";
        } else {
          if(vertexColor == 3) {
            shader += "attribute vec3 color;";
          } else {
            shader += "attribute vec4 color;";
          }
        }
      }
      if(texture) {
        if(imageGeometry) {
          shader += "uniform sampler2D IG_texCoordTexture;";
        } else {
          shader += "attribute vec2 texcoord;\n";
        }
        shader += "varying vec2 fragTexcoord;\n";
        if(textureTransform) {
          shader += "uniform mat4 texTrafoMatrix;\n";
        }
        if(!blending) {
          shader += "varying vec3 fragAmbient;\n";
          shader += "varying vec3 fragDiffuse;\n";
        }
        if(cubeMap) {
          shader += "varying vec3 fragViewDir;\n";
          shader += "varying vec3 fragNormal;\n";
          shader += "uniform mat4 viewMatrix;\n";
        }
      }
      shader += "void main(void) {\n";
      if(imageGeometry) {
        if(iG_Indexed) {
          shader += "vec2 halfPixel = vec2(0.5/IG_indexTextureWidth,0.5/IG_indexTextureHeight);";
          shader += "vec2 IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_indexTextureWidth), position.y*(IG_implicitMeshSize/IG_indexTextureHeight)) + halfPixel;";
          shader += "vec2 IG_index = texture2D( IG_indexTexture, IG_texCoord ).rg;";
          shader += "halfPixel = vec2(0.5/IG_coordTextureWidth,0.5/IG_coordTextureHeight);";
          shader += "IG_texCoord = (IG_index * 0.996108948) + halfPixel;";
        } else {
          shader += "vec2 halfPixel = vec2(0.5/IG_coordTextureWidth, 0.5/IG_coordTextureHeight);";
          shader += "vec2 IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_coordTextureWidth), position.y*(IG_implicitMeshSize/IG_coordTextureHeight)) + halfPixel;";
        }
        shader += "vec3 temp = vec3(0.0, 0.0, 0.0);";
        shader += "vec3 vertPosition = vec3(0.0, 0.0, 0.0);";
        for(var i = 0; i < iG_Precision; i++) {
          shader += "temp = 255.0 * texture2D( IG_coordinateTexture" + i + ", IG_texCoord ).rgb;";
          shader += "vertPosition *= IG_implicitMeshSize;";
          shader += "vertPosition += temp;";
        }
        shader += "vertPosition /= (pow(2.0, 8.0 * " + iG_Precision + ".0) - 1.0);";
        shader += "vertPosition = vertPosition * (IG_bboxMax - IG_bboxMin) + IG_bboxMin;";
        shader += "vec3 vertNormal = texture2D( IG_normalTexture, IG_texCoord ).rgb;";
        shader += "vertNormal = vertNormal * 2.0 - 1.0;";
        if(texture) {
          shader += "vec4 IG_doubleTexCoords = texture2D( IG_texCoordTexture, IG_texCoord );";
          shader += "vec2 vertTexCoord;";
          shader += "vertTexCoord.r = (IG_doubleTexCoords.r * 0.996108948) + (IG_doubleTexCoords.b * 0.003891051);";
          shader += "vertTexCoord.g = (IG_doubleTexCoords.g * 0.996108948) + (IG_doubleTexCoords.a * 0.003891051);";
        }
        if(vertexColor == 3) {
          shader += "vec3 vertColor = texture2D( IG_colorTexture, IG_texCoord ).rgb;";
        } else if(vertexColor == 4) {
          shader += "vec4 vertColor = texture2D( IG_colorTexture, IG_texCoord ).rgba;";
        }
      } else {
        shader += "vec3 vertNormal = normal;";
        shader += "vec3 vertPosition = position;";
        if(vertexColor == 3) {
          shader += "vec3 vertColor = color;";
        } else if(vertexColor == 4) {
          shader += "vec4 vertColor = color;";
        }
        if(texture) {
          shader += "vec2 vertTexCoord = texcoord;";
        }
      }
      shader += "vec3 positionMV = (modelViewMatrix * vec4(vertPosition, 1.0)).xyz;\n";
      shader += "vec3 normalMV = normalize( (normalMatrix * vec4(vertNormal, 0.0)).xyz );\n";
      shader += "vec3 eye = -positionMV;\n";
      if(texture) {
        if(cubeMap) {
          shader += "fragViewDir = (viewMatrix[3].xyz);\n";
          shader += "fragNormal = normalMV;\n";
        } else if(sphereMapping) {
          shader += " fragTexcoord = 0.5 + normalMV.xy / 2.0;\n";
        } else if(textureTransform) {
          shader += " fragTexcoord = (texTrafoMatrix * vec4(vertTexCoord, 1.0, 1.0)).xy;\n";
        } else {
          shader += " fragTexcoord = vertTexCoord;\n";
        }
      }
      if(lights) {
        shader += "vec3 ambient   = vec3(0.07, 0.07, 0.07);\n";
        shader += "vec3 diffuse   = vec3(0.0, 0.0, 0.0);\n";
        shader += "vec3 specular  = vec3(0.0, 0.0, 0.0);\n";
        if(!solid) {
          shader += "if (dot(normalMV, eye) < 0.0) {\n";
          shader += " normalMV *= -1.0;\n";
          shader += "}\n";
        }
        for(var i = 0; i < lights; i++) {
          shader += " lighting(Light" + i + "_Type," + "Light" + i + "_Location," + "Light" + i + "_Direction," + "Light" + i + "_Color," + "Light" + i + "_Attenuation," + "Light" + i + "_Intensity," + "Light" + i + "_AmbientIntensity," + "Light" + i + "_BeamWidth," + "Light" + i + "_CutOffAngle," + "normalMV, eye, ambient, diffuse, specular);\n";
        }
        if(texture && blending) {
          shader += "fragColor.rgb = (emissiveColor + ambient*diffuseColor + diffuse*diffuseColor + specular*specularColor);\n";
          shader += "fragColor.a = 1.0 - transparency;\n";
        } else if(texture && !blending) {
          shader += "fragAmbient = ambient;\n";
          shader += "fragDiffuse = diffuse;\n";
          shader += "fragColor.rgb = (emissiveColor + specular*specularColor);\n";
          shader += "fragColor.a = 1.0 - transparency;\n";
        } else if(vertexColor == 3) {
          shader += "fragColor.rgb = (emissiveColor + ambient*vertColor + diffuse*vertColor + specular*specularColor);\n";
          shader += "fragColor.a = 1.0 - transparency;\n";
        } else if(vertexColor == 4) {
          shader += "fragColor.rgb = (emissiveColor + ambient*vertColor.rgb + diffuse*vertColor.rgb + specular*specularColor);\n";
          shader += "fragColor.a = vertColor.a;\n";
        } else {
          shader += "fragColor.rgb = (emissiveColor + ambient*diffuseColor + diffuse*diffuseColor + specular*specularColor);\n";
          shader += "fragColor.a = 1.0-transparency;\n";
        }
      } else {
        if(texture && !blending) {
          shader += "fragAmbient = vec3(1.0);\n";
          shader += "fragDiffuse = vec3(1.0);\n";
          shader += "fragColor.rgb = vec3(0.0);\n";
          shader += "fragColor.a = 1.0 - transparency;\n";
        } else if(vertexColor == 3) {
          shader += "fragColor.rgb = vertColor;\n";
          shader += "fragColor.a = 1.0 - transparency;\n";
        } else if(vertexColor == 4) {
          shader += "fragColor.rgba = vertColor;\n";
        } else {
          shader += "fragColor.rgb = diffuseColor + emissiveColor;\n;\n";
          shader += "fragColor.a = 1.0-transparency;\n";
        }
      }
      if(fog) {
        shader += "float f0 = calcFog(-positionMV);\n";
        shader += "fragColor.rgb = fogColor * (1.0-f0) + f0 * (fragColor.rgb);\n";
      }
      shader += "gl_Position = modelViewProjectionMatrix * vec4(vertPosition, 1.0);\n";
      shader += "}\n";
      g_shaders[shaderIdentifier] = {};
      g_shaders[shaderIdentifier].type = "vertex";
      g_shaders[shaderIdentifier].data = shader;
    } else {}
    return shaderIdentifier;
  };
  Context.prototype.generateFSMobile = function(viewarea, shape) {
    var texture = (shape._cf.appearance.node._cf.texture.node || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) ? 1 : 0;
    var cubeMap = (shape._cf.appearance.node._cf.texture.node) ? x3dom.isa(shape._cf.appearance.node._cf.texture.node, x3dom.nodeTypes.X3DEnvironmentTextureNode) ? 1 : 0 : 0;
    var blending = (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text) || cubeMap || (shape._cf.appearance.node._cf.texture.node && (shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 1 || shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 2))) ? 1 : 0;
    var shaderIdentifier = "fs-x3d-mobil-" + texture + cubeMap + blending;
    if(!g_shaders[shaderIdentifier]) {
      var shader = "";
      shader += "#ifdef GL_ES \n";
      shader += "  precision highp float;\n";
      shader += "#endif\n";
      shader += "\n";
      if(texture) {
        if(cubeMap) {
          shader += "uniform samplerCube tex;\n";
          shader += "varying vec3 fragViewDir;\n";
          shader += "varying vec3 fragNormal;\n";
          shader += "uniform mat4 modelViewMatrixInverse;\n";
        } else {
          shader += "uniform sampler2D tex;           \n";
          shader += "varying vec2 fragTexcoord;       \n";
        }
        if(!blending) {
          shader += "varying vec3 fragAmbient;\n";
          shader += "varying vec3 fragDiffuse;\n";
        }
      }
      shader += "varying vec4 fragColor;\n";
      shader += "void main(void) {\n";
      shader += "vec4 color = fragColor;\n";
      if(texture) {
        if(cubeMap) {
          shader += "vec3 normal = normalize(fragNormal);\n";
          shader += "vec3 viewDir = normalize(fragViewDir);\n";
          shader += "vec3 reflected = reflect(viewDir, normal);\n"
          shader += "reflected = (modelViewMatrixInverse * vec4(reflected,0.0)).xyz;\n"
          shader += "vec4 texColor = textureCube(tex, reflected);\n";
        } else {
          shader += "vec4 texColor = texture2D(tex, vec2(fragTexcoord.s, 1.0-fragTexcoord.t));\n";
        }
        if(blending) {
          if(cubeMap) {
            shader += "color.rgb = mix(color.rgb, texColor.rgb, vec3(0.75));\n";
            shader += "color.a = texColor.a;\n";
          } else {
            shader += "color.rgb *= texColor.rgb;\n";
            shader += "color.a *= texColor.a;\n";
          }
        } else {
          shader += "color.rgb += fragAmbient*texColor.rgb + fragDiffuse*texColor.rgb;\n";
          shader += "color.a *= texColor.a;\n";
        }
      }
      shader += "if (color.a <= 0.1) discard;\n";
      shader += "gl_FragColor = color;\n";
      shader += "}\n";
      g_shaders[shaderIdentifier] = {};
      g_shaders[shaderIdentifier].type = "fragment";
      g_shaders[shaderIdentifier].data = shader;
    } else {}
    return shaderIdentifier;
  };
  Context.prototype.generateVS = function(viewarea, shape) {
    var shader = (shape._cf.appearance.node._shader && x3dom.isa(shape._cf.appearance.node._shader, x3dom.nodeTypes.CommonSurfaceShader)) ? 1 : 0;
    var texture = (shape._cf.appearance.node._cf.texture.node || shader || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) ? 1 : 0;
    var normalMap = (shader && shape._cf.appearance.node._shader.getNormalMap()) ? 1 : 0;
    var textureTransform = (shape._cf.appearance.node._cf.textureTransform.node !== null) ? 1 : 0;
    var sphereMapping = (shape._cf.geometry.node._cf.texCoord !== undefined && shape._cf.geometry.node._cf.texCoord.node !== null && shape._cf.geometry.node._cf.texCoord.node._vf.mode) ? (shape._cf.geometry.node._cf.texCoord.node._vf.mode.toLowerCase() == "sphere") ? 1 : 0 : 0;
    var cubeMap = (shape._cf.appearance.node._cf.texture.node) ? x3dom.isa(shape._cf.appearance.node._cf.texture.node, x3dom.nodeTypes.X3DEnvironmentTextureNode) ? 1 : 0 : 0;
    var vertexColor = (shape._cf.geometry.node._mesh._colors[0].length > 0 || shape._cf.geometry.node.getColorTexture() || (shape._cf.geometry.node._vf.color !== undefined && shape._cf.geometry.node._vf.color.length > 0)) ? shape._cf.geometry.node._mesh._numColComponents : 0;
    var lights = (viewarea.getLights().length) + (viewarea._scene.getNavigationInfo()._vf.headlight);
    var shadow = (viewarea.getLightsShadow()) ? 1 : 0;
    var fog = (viewarea._scene.getFog()._vf.visibilityRange > 0) ? 1 : 0;
    var imageGeometry = (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.ImageGeometry)) ? 1 : 0;
    var iG_Precision = (imageGeometry) ? shape._cf.geometry.node.numCoordinateTextures() : 0;
    var iG_Indexed = (imageGeometry && shape._cf.geometry.node.getIndexTexture() != null) ? 1 : 0;
    var shaderIdentifier = "vs-x3d-" + vertexColor + texture + normalMap + textureTransform + sphereMapping + cubeMap + fog + lights + shadow + imageGeometry + iG_Precision + iG_Indexed;
    if(!g_shaders[shaderIdentifier]) {
      var shader = "";
      shader += "attribute vec3 position;\n";
      shader += "attribute vec3 normal;\n";
      shader += "uniform mat4 modelViewMatrix;\n";
      shader += "uniform mat4 normalMatrix;\n";
      shader += "uniform mat4 modelViewProjectionMatrix;\n";
      shader += "varying vec3 fragNormal;\n";
      if(imageGeometry) {
        shader += "uniform vec3 IG_bboxMin;\n";
        shader += "uniform vec3 IG_bboxMax;\n";
        shader += "uniform float IG_coordTextureWidth;\n";
        shader += "uniform float IG_coordTextureHeight;\n";
        shader += "uniform float IG_implicitMeshSize;\n";
        if(iG_Indexed) {
          shader += "uniform sampler2D IG_indexTexture;\n";
          shader += "uniform float IG_indexTextureWidth;\n";
          shader += "uniform float IG_indexTextureHeight;\n";
        }
        for(var i = 0; i < iG_Precision; i++) {
          shader += "uniform sampler2D IG_coordinateTexture" + i + "\n;";
        }
        shader += "uniform sampler2D IG_normalTexture;\n";
        shader += "uniform sampler2D IG_texCoordTexture;\n";
        shader += "uniform sampler2D IG_colorTexture;\n";
      }
      if(vertexColor) {
        if(vertexColor == 3.0) {
          shader += "attribute vec3 color;\n";
          shader += "varying vec3 fragColor;\n";
        } else {
          shader += "attribute vec4 color;\n";
          shader += "varying vec4 fragColor;\n";
        }
      }
      if(texture) {
        shader += "attribute vec2 texcoord;\n";
        shader += "varying vec2 fragTexcoord;\n";
        if(textureTransform) {
          shader += "uniform mat4 texTrafoMatrix;\n";
        }
        if(normalMap) {
          shader += "attribute vec3 tangent;\n";
          shader += "attribute vec3 binormal;\n";
          shader += "varying vec3 fragTangent;\n";
          shader += "varying vec3 fragBinormal;\n";
        }
        if(cubeMap) {
          shader += "varying vec3 fragViewDir;\n";
          shader += "uniform mat4 viewMatrix;\n";
        }
      }
      if(lights || fog) {
        shader += "uniform vec3 eyePosition;\n";
        if(fog) {
          shader += "varying vec3 fragEyePosition;\n";
        }
        shader += "varying vec3 fragPosition;\n";
        if(shadow) {
          shader += "uniform mat4 matPV;\n";
          shader += "varying vec4 projCoord;\n";
        }
      }
      shader += "void main(void) {\n";
      if(imageGeometry) {
        if(iG_Indexed) {
          shader += "vec2 halfPixel = vec2(0.5/IG_indexTextureWidth,0.5/IG_indexTextureHeight);\n";
          shader += "vec2 IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_indexTextureWidth), position.y*(IG_implicitMeshSize/IG_indexTextureHeight)) + halfPixel;\n";
          shader += "vec2 IG_index = texture2D( IG_indexTexture, IG_texCoord ).rg;\n";
          shader += "halfPixel = vec2(0.5/IG_coordTextureWidth,0.5/IG_coordTextureHeight);\n";
          shader += "IG_texCoord = (IG_index * 0.996108948) + halfPixel;\n";
        } else {
          shader += "vec2 halfPixel = vec2(0.5/IG_coordTextureWidth, 0.5/IG_coordTextureHeight);\n";
          shader += "vec2 IG_texCoord = vec2(position.x*(IG_implicitMeshSize/IG_coordTextureWidth), position.y*(IG_implicitMeshSize/IG_coordTextureHeight)) + halfPixel;\n";
        }
        shader += "vec3 temp = vec3(0.0, 0.0, 0.0);\n";
        shader += "vec3 vertPosition = vec3(0.0, 0.0, 0.0);\n";
        for(var i = 0; i < iG_Precision; i++) {
          shader += "temp = 255.0 * texture2D( IG_coordinateTexture" + i + ", IG_texCoord ).rgb;\n";
          shader += "vertPosition *= 256.0;\n";
          shader += "vertPosition += temp;\n";
        }
        shader += "vertPosition /= (pow(2.0, 8.0 * " + iG_Precision + ".0) - 1.0);\n";
        shader += "vertPosition = vertPosition * (IG_bboxMax - IG_bboxMin) + IG_bboxMin;\n";
        shader += "vec3 vertNormal = texture2D( IG_normalTexture, IG_texCoord ).rgb;\n";
        shader += "vertNormal = vertNormal * 2.0 - 1.0;\n";
        if(texture) {
          shader += "vec4 IG_doubleTexCoords = texture2D( IG_texCoordTexture, IG_texCoord );\n";
          shader += "vec2 vertTexCoord;";
          shader += "vertTexCoord.r = (IG_doubleTexCoords.r * 0.996108948) + (IG_doubleTexCoords.b * 0.003891051);\n";
          shader += "vertTexCoord.g = (IG_doubleTexCoords.g * 0.996108948) + (IG_doubleTexCoords.a * 0.003891051);\n";
        }
        if(vertexColor) {
          shader += "fragColor = texture2D( IG_colorTexture, IG_texCoord ).rgb;\n";
        }
        shader += "gl_PointSize = 2.0;\n";
      } else {
        shader += "vec3 vertNormal = normal;\n";
        if(texture) {
          shader += "vec2 vertTexCoord = texcoord;\n";
        }
        shader += "vec3 vertPosition = position;\n";
        shader += "gl_PointSize = 2.0;\n";
        if(vertexColor) {
          shader += "fragColor = color;\n";
        }
      }
      shader += "fragNormal = (normalMatrix * vec4(vertNormal, 0.0)).xyz;\n";
      if(lights || fog) {
        shader += "fragPosition = (modelViewMatrix * vec4(vertPosition, 1.0)).xyz;\n";
        if(fog) {
          shader += "fragEyePosition = eyePosition - fragPosition;\n";
        }
        if(shadow) {
          shader += "projCoord = matPV * vec4(vertPosition+0.5*normalize(vertNormal), 1.0);\n";
        }
      }
      if(texture) {
        if(cubeMap) {
          shader += "fragViewDir = (viewMatrix[3].xyz);\n";
        } else if(sphereMapping) {
          shader += " fragTexcoord = 0.5 + fragNormal.xy / 2.0;\n";
        } else if(textureTransform) {
          shader += " fragTexcoord = (texTrafoMatrix * vec4(vertTexCoord, 1.0, 1.0)).xy;\n";
        } else {
          shader += " fragTexcoord = vertTexCoord;\n";
        }
        if(normalMap) {
          shader += "fragTangent  = (normalMatrix * vec4(tangent, 0.0)).xyz;\n";
          shader += "fragBinormal = (normalMatrix * vec4(binormal, 0.0)).xyz;\n";
        }
      }
      shader += "gl_Position = modelViewProjectionMatrix * vec4(vertPosition, 1.0);\n";
      shader += "}";
      g_shaders[shaderIdentifier] = {};
      g_shaders[shaderIdentifier].type = "vertex";
      g_shaders[shaderIdentifier].data = shader;
    } else {}
    return shaderIdentifier;
  };
  Context.prototype.generateFS = function(viewarea, shape) {
    var vertexColor = (shape._cf.geometry.node._mesh._colors[0].length > 0 || shape._cf.geometry.node.getColorTexture() || (shape._cf.geometry.node._vf.color !== undefined && shape._cf.geometry.node._vf.color.length > 0)) ? shape._cf.geometry.node._mesh._numColComponents : 0;
    var lights = (viewarea.getLights().length) + (viewarea._scene.getNavigationInfo()._vf.headlight);
    var shadows = (viewarea.getLightsShadow()) ? 1 : 0;
    var fogs = (viewarea._scene.getFog()._vf.visibilityRange > 0) ? 1 : 0;
    var solid = (shape.isSolid()) ? 1 : 0;
    var texture = (shape._cf.appearance.node._cf.texture.node || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) ? 1 : 0;
    var cubeMap = (shape._cf.appearance.node._cf.texture.node) ? x3dom.isa(shape._cf.appearance.node._cf.texture.node, x3dom.nodeTypes.X3DEnvironmentTextureNode) ? 1 : 0 : 0;
    var blending = (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text) || cubeMap || (shape._cf.appearance.node._cf.texture.node && (shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 1.0 || shape._cf.appearance.node._cf.texture.node._vf.origChannelCount == 2.0))) ? 1 : 0;
    var shader = (shape._cf.appearance.node._shader && x3dom.isa(shape._cf.appearance.node._shader, x3dom.nodeTypes.CommonSurfaceShader)) ? 1 : 0;
    var shaderDiffuse = (shader && shape._cf.appearance.node._shader.getDiffuseMap()) ? 1 : 0;
    var shaderNormal = (shader && shape._cf.appearance.node._shader.getNormalMap()) ? 1 : 0;
    var shaderSpec = (shader && shape._cf.appearance.node._shader.getSpecularMap()) ? 1 : 0;
    var shaderIdentifier = "fs-x3d-" + vertexColor + texture + cubeMap + fogs + lights + shadows + blending + shader + shaderDiffuse + shaderNormal + shaderSpec;
    if(!g_shaders[shaderIdentifier]) {
      var fog = "struct Fog {" + "   vec3  color;" + "   float fogType;" + "   float visibilityRange;" + "};" + "uniform Fog fog;" + "float calcFog() {" + "   float f0 = 0.0;" + "   if(fog.fogType == 0.0) {" + "       if(length(fragEyePosition) < fog.visibilityRange){" + "           f0 = (fog.visibilityRange-length(fragEyePosition)) / fog.visibilityRange;" + "       }" + "   }else{" + "       if(length(fragEyePosition) < fog.visibilityRange){" + "           f0 = exp(-length(fragEyePosition) / (fog.visibilityRange-length(fragEyePosition) ) );" + "       }" + "   }" + "   f0 = clamp(f0, 0.0, 1.0);" + "   return f0;" + "}";
      var light = "struct Light {\n" + "   float on;\n" + "   float type;\n" + "   vec3  location;\n" + "   vec3  direction;\n" + "   vec3  color;\n" + "   vec3  attenuation;\n" + "   float intensity;\n" + "   float ambientIntensity;\n" + "   float beamWidth;\n" + "   float cutOffAngle;\n" + "   float shadowIntensity;\n" + "};\n" + "const int NUMLIGHTS = " + lights + ";\n" + "uniform Light light[9];\n" + "void lighting(in Light light, in vec3 N, in vec3 V, inout vec3 ambient, inout vec3 diffuse, inout vec3 specular){" + "   vec3 L;\n" + "   float spot = 1.0, attentuation = 1.0;\n" + "   if(light.type == 0.0) {\n" + "       L = -normalize(light.direction);\n" + "   }else{\n" + "       L = normalize(light.location - fragPosition);" + "       float distance = length(L);" + "       L /= distance;\n" + "       attentuation = 1.0 / (light.attenuation.x + light.attenuation.y * distance + light.attenuation.z * distance * distance);" + "       attentuation *= max(0.0, dot(N, L));" + "       if(light.type == 2.0) {" + "           float spotAngle = acos(max(0.0, dot(-L, normalize(light.direction))));" + "           if(spotAngle >= light.cutOffAngle) spot = 0.0;" + "           else if(spotAngle <= light.beamWidth) spot = 1.0;" + "           else spot = (spotAngle - light.cutOffAngle ) / (light.beamWidth - light.cutOffAngle);" + "       }" + "   }" + "   vec3  H = normalize( L + V );\n" + "   float NdotL = max(0.0, dot(N, L));\n" + "   float NdotH = max(0.0, dot(N, H));\n" + "   float ambientFactor  = light.ambientIntensity * material.ambientIntensity;" + "   float diffuseFactor  = light.intensity * NdotL;" + "   float specularFactor = light.intensity * NdotL * pow(NdotH, material.shininess*128.0);" + "   ambient  += light.color * ambientFactor * attentuation * spot;" + "   diffuse  += light.color * diffuseFactor * attentuation * spot;" + "   specular += light.color * specularFactor * attentuation * spot;" + "}";
      var shadow = "uniform sampler2D sh_tex;" + "varying vec4 projCoord;" + "float PCF_Filter(Light light, vec3 projectiveBiased, float filterWidth)" + "{" + "    float stepSize = 2.0 * filterWidth / 3.0;" + "    float blockerCount = 0.0;" + "    projectiveBiased.x -= filterWidth;" + "    projectiveBiased.y -= filterWidth;" + "    for (float i=0.0; i<3.0; i++)" + "    {" + "        for (float j=0.0; j<3.0; j++)" + "        {" + "            projectiveBiased.x += (j*stepSize);" + "            projectiveBiased.y += (i*stepSize);" + "            vec4 zCol = texture2D(sh_tex, (1.0+projectiveBiased.xy)*0.5);" + "            float fromFixed = 256.0 / 255.0;" + "            float z = zCol.r * fromFixed;" + "            z += zCol.g * fromFixed / (255.0);" + "            z += zCol.b * fromFixed / (255.0 * 255.0);" + "            z += zCol.a * fromFixed / (255.0 * 255.0 * 255.0);" + "            if (z < projectiveBiased.z) blockerCount += 1.0;" + "            projectiveBiased.x -= (j*stepSize);" + "            projectiveBiased.y -= (i*stepSize);" + "        }" + "    }" + "    float result = 1.0 - light.shadowIntensity * blockerCount / 9.0;" + "    return result;" + "}";
      var material = "struct Material {          \n" + "   vec3  diffuseColor;     \n" + "   vec3  specularColor;    \n" + "   vec3  emissiveColor;    \n" + "   float shininess;        \n" + "   float transparency;     \n" + "   float ambientIntensity; \n" + "};                         \n" + "uniform Material material; \n";
      var shader = "";
      shader += "#ifdef GL_ES             \n";
      shader += "  precision highp float; \n";
      shader += "#endif                   \n";
      shader += "\n";
      shader += material;
      shader += "uniform mat4 modelMatrix;";
      shader += "uniform mat4 modelViewMatrix;";
      if(vertexColor) {
        if(vertexColor == 3) {
          shader += "varying vec3 fragColor;  \n";
        } else {
          shader += "varying vec4 fragColor;  \n";
        }
      }
      if(texture || shader) {
        shader += "varying vec2 fragTexcoord;       \n";
        if((texture || shaderDiffuse) && !cubeMap) {
          shader += "uniform sampler2D tex;           \n";
        } else if(cubeMap) {
          shader += "uniform samplerCube tex;\n";
          shader += "varying vec3 fragViewDir;\n";
          shader += "uniform mat4 modelViewMatrixInverse;\n";
        }
        if(shaderNormal) {
          shader += "uniform sampler2D bump;      \n";
          shader += "varying vec3 fragTangent;    \n";
          shader += "varying vec3 fragBinormal;   \n";
        }
        if(shaderSpec) {
          shader += "uniform sampler2D spec;      \n";
        }
      }
      if(lights) {
        shader += "uniform float solid;             \n";
        shader += "varying vec3 fragNormal;         \n";
        shader += "varying vec3 fragPosition;       \n";
        shader += light;
        if(shadows) {
          shader += shadow;
        }
      }
      if(fogs) {
        shader += "varying vec3 fragEyePosition;    \n";
        shader += fog;
      }
      shader += "void main(void) {    \n";
      shader += "vec3 rgb      = vec3(0.0, 0.0, 0.0); \n";
      shader += "float alpha = 1.0 - material.transparency;\n";
      if(lights) {
        shader += "vec3 ambient   = vec3(0.07, 0.07, 0.07);\n";
        shader += "vec3 diffuse   = vec3(0.0, 0.0, 0.0);\n";
        shader += "vec3 specular  = vec3(0.0, 0.0, 0.0);\n";
        if(shadows) {
          shader += "float shadowed = 1.0;\n";
          shader += "float oneShadowAlreadyExists = 0.0;\n";
        }
        shader += "vec3 eye = normalize(-fragPosition);\n";
        shader += "vec3 normal = normalize(fragNormal);\n";
        if(shaderNormal) {
          shader += "vec3 t = normalize( fragTangent );\n";
          shader += "vec3 b = normalize( fragBinormal );\n";
          shader += "vec3 n = normalize( fragNormal );\n";
          shader += "mat3 tangentToWorld = mat3(t, b, n);\n";
          shader += "normal = texture2D( bump, vec2(fragTexcoord.x, 1.0-fragTexcoord.y) ).rgb;\n";
          shader += "normal = 2.0 * normal - 1.0;\n";
          shader += "normal = normalize( normal * tangentToWorld );\n";
          shader += "normal.y = -normal.y;";
          shader += "normal.x = -normal.x;";
        }
        shader += "if (solid == 0.0 && dot(normal, eye) < 0.0) {\n";
        shader += " normal *= -1.0;\n";
        shader += "}\n";
        shader += "for(int i=0; i<NUMLIGHTS; i++) {\n";
        shader += " lighting(light[i], normal, eye, ambient, diffuse, specular);\n";
        if(shadows) {
          shader += " if(light[i].shadowIntensity > 0.0 && oneShadowAlreadyExists == 0.0){\n";
          shader += "     vec3 projectiveBiased = projCoord.xyz / projCoord.w;\n";
          shader += "     shadowed = PCF_Filter(light[i], projectiveBiased, 0.002);\n";
          shader += "     oneShadowAlreadyExists = 1.0;\n";
          shader += " }\n";
        }
        shader += "}\n";
        if(shaderSpec) {
          shader += "specular *= texture2D( spec, vec2(fragTexcoord.x, 1.0-fragTexcoord.y) ).rgb;\n";
        }
        if(texture || shaderDiffuse) {
          if(cubeMap) {
            shader += "vec3 viewDir = normalize(fragViewDir);\n";
            shader += "vec3 reflected = reflect(viewDir, normal);\n"
            shader += "reflected = (modelViewMatrixInverse * vec4(reflected,0.0)).xyz;\n"
            shader += "vec4 texColor = textureCube(tex, reflected);\n";
            shader += "alpha *= texColor.a;\n";
          } else {
            shader += "vec2 texCoord = vec2(fragTexcoord.x, 1.0-fragTexcoord.y);\n";
            shader += "vec4 texColor = texture2D(tex, texCoord);\n";
            shader += "alpha *= texColor.a;\n";
          }
          if(blending) {
            shader += "rgb = (material.emissiveColor + ambient*material.diffuseColor + diffuse*material.diffuseColor + specular*material.specularColor);\n";
            if(cubeMap) {
              shader += "rgb = mix(rgb, texColor.rgb, vec3(0.75));\n";
            } else {
              shader += "rgb *= texColor.rgb;\n";
            }
          } else {
            shader += "rgb = (material.emissiveColor + ambient*texColor.rgb + diffuse*texColor.rgb + specular*material.specularColor);\n";
          }
        } else if(vertexColor) {
          shader += "rgb = (material.emissiveColor + ambient*fragColor.rgb + diffuse*fragColor.rgb + specular*material.specularColor);\n";
          if(vertexColor == 4) {
            shader += "alpha = fragColor.a;\n";
          }
        } else {
          shader += "rgb = (material.emissiveColor + ambient*material.diffuseColor + diffuse*material.diffuseColor + specular*material.specularColor);\n";
        }
        if(shadows) {
          shader += "rgb *= shadowed;\n";
        }
      } else {
        if(texture) {
          shader += "vec2 texCoord = vec2(fragTexcoord.x, 1.0-fragTexcoord.y);\n";
          shader += "vec4 texColor = texture2D(tex, texCoord);\n";
          shader += "rgb = texColor.rgb;\n";
          shader += "alpha *= texColor.a;\n";
        } else if(vertexColor) {
          shader += "rgb = fragColor.rgb;\n";
          if(vertexColor == 4) {
            shader += "alpha = fragColor.a;\n";
          }
        } else {
          shader += "rgb = material.diffuseColor + material.emissiveColor;\n";
        }
      }
      if(fogs) {
        shader += "float f0 = calcFog();\n";
        shader += "rgb = fog.color * (1.0-f0) + f0 * (rgb);\n";
      }
      shader += "if (alpha <= 0.1) discard;\n";
      shader += "gl_FragColor = vec4(rgb, alpha);\n";
      shader += "}\n";
      g_shaders[shaderIdentifier] = {};
      g_shaders[shaderIdentifier].type = "fragment";
      g_shaders[shaderIdentifier].data = shader;
    } else {}
    return shaderIdentifier;
  };
  Context.prototype.setupShape = function(gl, shape, viewarea) {
    var q = 0;
    var tex = null;
    var colorBuffer;
    var vertices;
    var colors;
    var positionBuffer;
    if(shape._webgl !== undefined) {
      var oldLightsAndShadow = shape._webgl.lightsAndShadow;
      shape._webgl.lightsAndShadow = useLightingFunc(viewarea);
      var needFullReInit = (shape._webgl.lightsAndShadow[0] != oldLightsAndShadow[0] || shape._webgl.lightsAndShadow[1] != oldLightsAndShadow[1] || shape._dirty.shader);
      if(shape._dirty.colors === true && shape._webgl.shader.color === undefined && shape._cf.geometry.node._mesh._colors[0].length) {
        needFullReInit = true;
      }
      if(shape._dirty.texture === true || needFullReInit) {
        tex = shape._cf.appearance.node._cf.texture.node;
        if((shape._webgl.texture !== undefined && tex) && !needFullReInit) {
          shape.updateTexture(tex, 0, "false");
          shape._dirty.texture = false;
        } else {
          needFullReInit = true;
          var spOld = shape._webgl.shader;
          var inc = 0;
          for(inc = 0; shape._webgl.texture !== undefined && inc < shape._webgl.texture.length; inc++) {
            if(shape._webgl.texture[inc]) {
              gl.deleteTexture(shape._webgl.texture[inc]);
            }
          }
          for(q = 0; q < shape._webgl.positions.length; q++) {
            if(spOld.position !== undefined) {
              gl.deleteBuffer(shape._webgl.buffers[5 * q + 1]);
              gl.deleteBuffer(shape._webgl.buffers[5 * q + 0]);
            }
            if(spOld.normal !== undefined) {
              gl.deleteBuffer(shape._webgl.buffers[5 * q + 2]);
            }
            if(spOld.texcoord !== undefined) {
              gl.deleteBuffer(shape._webgl.buffers[5 * q + 3]);
            }
            if(spOld.color !== undefined) {
              gl.deleteBuffer(shape._webgl.buffers[5 * q + 4]);
            }
          }
          for(inc = 0; inc < shape._webgl.dynamicFields.length; inc++) {
            var h_attrib = shape._webgl.dynamicFields[inc];
            if(spOld[h_attrib.name] !== undefined) {
              gl.deleteBuffer(h_attrib.buf);
            }
          }
        }
      }
      for(q = 0; q < shape._webgl.positions.length; q++) {
        if(!needFullReInit && shape._dirty.positions === true) {
          if(shape._webgl.shader.position !== undefined) {
            shape._webgl.positions[q] = shape._cf.geometry.node._mesh._positions[q];
            gl.deleteBuffer(shape._webgl.buffers[5 * q + 1]);
            positionBuffer = gl.createBuffer();
            shape._webgl.buffers[5 * q + 1] = positionBuffer;
            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, shape._webgl.buffers[5 * q + 0]);
            vertices = new Float32Array(shape._webgl.positions[q]);
            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
            gl.vertexAttribPointer(shape._webgl.shader.position, 3, gl.FLOAT, false, 0, 0);
            vertices = null;
          }
          shape._dirty.positions = false;
        }
        if(!needFullReInit && shape._dirty.colors === true) {
          if(shape._webgl.shader.color !== undefined) {
            shape._webgl.colors[q] = shape._cf.geometry.node._mesh._colors[q];
            gl.deleteBuffer(shape._webgl.buffers[5 * q + 4]);
            colorBuffer = gl.createBuffer();
            shape._webgl.buffers[5 * q + 4] = colorBuffer;
            colors = new Float32Array(shape._webgl.colors[q]);
            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
            gl.vertexAttribPointer(shape._webgl.shader.color, 3, gl.FLOAT, false, 0, 0);
            colors = null;
          }
          shape._dirty.colors = false;
        }
        if(!needFullReInit && shape._dirty.normals === true) {
          if(shape._webgl.shader.normal !== undefined) {
            shape._webgl.normals[q] = shape._cf.geometry.node._mesh._normals[q];
            gl.deleteBuffer(shape._webgl.buffers[5 * q + 2]);
            normalBuffer = gl.createBuffer();
            shape._webgl.buffers[5 * q + 2] = normalBuffer;
            normals = new Float32Array(shape._webgl.normals[q]);
            gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, normals, gl.STATIC_DRAW);
            gl.vertexAttribPointer(shape._webgl.shader.normal, 3, gl.FLOAT, false, 0, 0);
            normals = null;
          }
          shape._dirty.normals = false;
        }
        if(!needFullReInit && shape._dirty.texCoords === true) {
          if(shape._webgl.shader.texcoord !== undefined) {
            shape._webgl.texcoords[q] = shape._cf.geometry.node._mesh._texCoords[q];
            gl.deleteBuffer(shape._webgl.buffers[5 * q + 3]);
            texCoordBuffer = gl.createBuffer();
            shape._webgl.buffers[5 * q + 3] = texCoordBuffer;
            texCoords = new Float32Array(shape._webgl.texcoords[q]);
            gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);
            gl.vertexAttribPointer(shape._webgl.shader.texCoord, 3, gl.FLOAT, false, 0, 0);
            texCoords = null;
          }
          shape._dirty.texCoords = false;
        }
      }
      if(!needFullReInit) {
        return;
      }
    } else if(!(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text) || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) && (!shape._cf.geometry.node || shape._cf.geometry.node._mesh._positions[0].length < 1)) {
      x3dom.debug.logError("NO VALID MESH OR NO VERTEX POSITIONS SET!");
      return;
    }
    shape._dirty.positions = false;
    shape._dirty.normals = false;
    shape._dirty.texcoords = false;
    shape._dirty.colors = false;
    shape._dirty.indexes = false;
    shape._dirty.texture = false;
    shape._dirty.material = false;
    shape._dirty.shader = false;
    shape._cleanupGLObjects = function() {
      if(this._parentNodes.length === 0 && this._webgl) {
        var doc = this.findX3DDoc();
        var gl = doc.ctx.ctx3d;
        var sp = this._webgl.shader;
        for(var cnt = 0; this._webgl.texture !== undefined && cnt < this._webgl.texture.length; cnt++) {
          if(this._webgl.texture[cnt]) {
            gl.deleteTexture(this._webgl.texture[cnt]);
          }
        }
        for(var q = 0; q < this._webgl.positions.length; q++) {
          if(sp.position !== undefined) {
            gl.deleteBuffer(this._webgl.buffers[5 * q + 1]);
            gl.deleteBuffer(this._webgl.buffers[5 * q + 0]);
          }
          if(sp.normal !== undefined) {
            gl.deleteBuffer(this._webgl.buffers[5 * q + 2]);
          }
          if(sp.texcoord !== undefined) {
            gl.deleteBuffer(this._webgl.buffers[5 * q + 3]);
          }
          if(sp.color !== undefined) {
            gl.deleteBuffer(this._webgl.buffers[5 * q + 4]);
          }
        }
        for(var df = 0; df < this._webgl.dynamicFields.length; df++) {
          var attrib = this._webgl.dynamicFields[df];
          if(sp[attrib.name] !== undefined) {
            gl.deleteBuffer(attrib.buf);
          }
        }
        this._webgl = null;
      }
    };
    if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) {
      var fontStyleNode = shape._cf.geometry.node._cf.fontStyle.node;
      var font_family = ['SERIF'];
      var font_size = 32;
      var font_style = "PLAIN";
      var font_spacing = 1.0;
      var font_horizontal = true;
      var font_justify = 'BEGIN';
      var font_language = "";
      var font_leftToRight = true;
      var font_topToBottom = true;
      var createMultilineText = function(ctx, textToWrite, maxWidth, text) {
          textToWrite = textToWrite.replace("\n", " ");
          var currentText = textToWrite;
          var futureText;
          var subWidth = 0;
          var maxLineWidth = 0;
          var wordArray = textToWrite.split(" ");
          var wordsInCurrent, wordArrayLength;
          wordsInCurrent = wordArrayLength = wordArray.length;
          while(measureText(ctx, currentText) > maxWidth && wordsInCurrent > 1) {
            wordsInCurrent--;
            var linebreak = false;
            currentText = futureText = "";
            for(var i = 0; i < wordArrayLength; i++) {
              if(i < wordsInCurrent) {
                currentText += wordArray[i];
                if(i + 1 < wordsInCurrent) {
                  currentText += " ";
                }
              } else {
                futureText += wordArray[i];
                if(i + 1 < wordArrayLength) {
                  futureText += " ";
                }
              }
            }
          }
          text.push(currentText);
          maxLineWidth = measureText(ctx, currentText);
          if(futureText) {
            subWidth = createMultilineText(ctx, futureText, maxWidth, text);
            if(subWidth > maxLineWidth) {
              maxLineWidth = subWidth;
            }
          }
          return maxLineWidth;
        };
      if(fontStyleNode !== null) {
        var fonts = fontStyleNode._vf.family.toString();
        fonts = fonts.trim().replace(/\'/g, '').replace(/\,/, ' ');
        fonts = fonts.split(" ");
        font_family = Array.map(fonts, function(s) {
          if(s == 'SANS') {
            return 'sans-serif';
          } else if(s == 'SERIF') {
            return 'serif';
          } else if(s == 'TYPEWRITER') {
            return 'monospace';
          } else {
            return '' + s + '';
          }
        }).join(",");
        font_style = fontStyleNode._vf.style.toString().replace(/\'/g, '');
        switch(font_style.toUpperCase()) {
        case 'PLAIN':
          font_style = 'normal';
          break;
        case 'BOLD':
          font_style = 'bold';
          break;
        case 'ITALIC':
          font_style = 'italic';
          break;
        case 'BOLDITALIC':
          font_style = 'italic bold';
          break;
        default:
          font_style = 'normal';
        }
        font_leftToRight = fontStyleNode._vf.leftToRight ? 'ltr' : 'rtl';
        font_topToBottom = fontStyleNode._vf.topToBottom;
        font_justify = fontStyleNode._vf.justify.toString().replace(/\'/g, '');
        switch(font_justify.toUpperCase()) {
        case 'BEGIN':
          font_justify = 'left';
          break;
        case 'END':
          font_justify = 'right';
          break;
        case 'FIRST':
          font_justify = 'left';
          break;
        case 'MIDDLE':
          font_justify = 'center';
          break;
        default:
          font_justify = 'left';
        }
        font_size = fontStyleNode._vf.size;
        font_spacing = fontStyleNode._vf.spacing;
        font_horizontal = fontStyleNode._vf.horizontal;
        font_language = fontStyleNode._vf.language;
      }
      var string = shape._cf.geometry.node._vf.string;
      var text = string.toString().split('\\');
      var text_canvas = document.createElement('canvas');
      text_canvas.dir = font_leftToRight;
      text_canvas.width = viewarea._width;
      text_canvas.height = font_size;
      text_canvas.display = 'none';
      document.body.appendChild(text_canvas);
      var text_ctx = text_canvas.getContext('2d');
      text_ctx.font = font_style + " " + font_size + "px " + font_family;
      var txtW = text_ctx.measureText(string).width;
      var txtH = text_ctx.measureText(string).height || text_canvas.height;
      text_canvas.width = Math.pow(2, Math.ceil(Math.log(txtW) / Math.log(2)));
      text_canvas.height = Math.pow(2, Math.ceil(Math.log(txtH) / Math.log(2)));
      text_ctx.fillStyle = 'rgba(0,0,0,0)';
      text_ctx.fillRect(0, 0, text_ctx.canvas.width, text_ctx.canvas.height);
      text_ctx.fillStyle = 'white';
      text_ctx.lineWidth = 2.5;
      text_ctx.strokeStyle = 'grey';
      text_ctx.textBaseline = 'top';
      text_ctx.font = font_style + " " + font_size + "px " + font_family;
      text_ctx.textAlign = font_justify;
      var leftOffset = (text_ctx.canvas.width - txtW) / 2.0;
      var topOffset = (text_ctx.canvas.height - font_size) / 2.0;
      text_ctx.fillText(string, leftOffset, topOffset);
      var ids = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, ids);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, text_canvas);
      document.body.removeChild(text_canvas);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.bindTexture(gl.TEXTURE_2D, null);
      var w = txtW / 100.0;
      var h = txtH / 100.0;
      var v0 = 1,
        u0 = 0;
      var u = 1,
        v = 0;
      shape._cf.geometry.node._mesh._positions[0] = [-w, -h, 0, w, -h, 0, w, h, 0, -w, h, 0];
      shape._cf.geometry.node._mesh._normals[0] = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];
      shape._cf.geometry.node._mesh._texCoords[0] = [u0, v, u, v, u, v0, u0, v0];
      shape._cf.geometry.node._mesh._colors[0] = [];
      shape._cf.geometry.node._mesh._indices[0] = [0, 1, 2, 2, 3, 0];
      shape._cf.geometry.node._mesh._invalidate = true;
      shape._cf.geometry.node._mesh._numFaces = 2;
      shape._cf.geometry.node._mesh._numCoords = 4;
      shape._webgl = {
        positions: shape._cf.geometry.node._mesh._positions,
        normals: shape._cf.geometry.node._mesh._normals,
        texcoords: shape._cf.geometry.node._mesh._texCoords,
        colors: shape._cf.geometry.node._mesh._colors,
        indexes: shape._cf.geometry.node._mesh._indices,
        texture: [ids],
        textureFilter: [gl.LINEAR],
        lightsAndShadow: useLightingFunc(viewarea),
        imageGeometry: 0,
        indexedImageGeometry: 0
      };
      shape._webgl.primType = gl.TRIANGLES;
      if(x3dom.caps.MOBILE) {
        shape._webgl.shader = this.getShaderProgram(gl, [this.generateVSMobile(viewarea, shape), this.generateFSMobile(viewarea, shape)]);
      } else {
        shape._webgl.shader = this.getShaderProgram(gl, [this.generateVS(viewarea, shape), this.generateFS(viewarea, shape)]);
      }
    } else {
      var context = this;
      tex = shape._cf.appearance.node._cf.texture.node;
      shape.updateTexture = function(tex, unit, saveSize) {
        var that = this;
        var texture;
        var childTex = (tex._video !== undefined && tex._video !== null && tex._needPerFrameUpdate !== undefined && tex._needPerFrameUpdate === true);
        if(this._webgl.texture === undefined) {
          this._webgl.texture = [];
        }
        if(this._webgl.textureFilter === undefined) {
          that._webgl.textureFilter = [];
          that._webgl.textureFilter[unit] = gl.LINEAR;
        }
        if(tex._isCanvas && tex._canvas) {
          texture = gl.createTexture();
          that._webgl.texture[unit] = texture;
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tex._canvas);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.bindTexture(gl.TEXTURE_2D, null);
        } else if(x3dom.isa(tex, x3dom.nodeTypes.RenderedTexture)) {
          that._webgl.texture[unit] = tex._webgl.fbo.tex;
          gl.bindTexture(gl.TEXTURE_2D, tex._webgl.fbo.tex);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.bindTexture(gl.TEXTURE_2D, null);
        } else if(x3dom.isa(tex, x3dom.nodeTypes.PixelTexture)) {
          var pixels = new Uint8Array(tex._vf.image.toGL());
          var format = gl.NONE;
          switch(tex._vf.image.comp) {
          case 1:
            format = gl.LUMINANCE;
            break;
          case 2:
            format = gl.LUMINANCE_ALPHA;
            break;
          case 3:
            format = gl.RGB;
            break;
          case 4:
            format = gl.RGBA;
            break;
          }
          texture = gl.createTexture();
          that._webgl.texture[unit] = texture;
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
          gl.texImage2D(gl.TEXTURE_2D, 0, format, tex._vf.image.width, tex._vf.image.height, 0, format, gl.UNSIGNED_BYTE, pixels);
        } else if(x3dom.isa(tex, x3dom.nodeTypes.MultiTexture)) {
          for(var cnt = 0; cnt < tex.size(); cnt++) {
            var singleTex = tex.getTexture(cnt);
            if(!singleTex) {
              break;
            }
            that.updateTexture(singleTex, cnt, "false");
          }
        } else if(x3dom.isa(tex, x3dom.nodeTypes.MovieTexture) || childTex) {
          texture = gl.createTexture();
          if(!childTex) {
            tex._video = document.createElement('video');
            tex._video.setAttribute('autobuffer', 'true');
            var p = document.getElementsByTagName('body')[0];
            p.appendChild(tex._video);
            tex._video.style.visibility = "hidden";
          }
          for(var i = 0; i < tex._vf.url.length; i++) {
            var videoUrl = tex._nameSpace.getURL(tex._vf.url[i]);
            x3dom.debug.logInfo('Adding video file: ' + videoUrl);
            var src = document.createElement('source');
            src.setAttribute('src', videoUrl);
            tex._video.appendChild(src);
          }
          var updateMovie = function() {
              that._nameSpace.doc.needRender = true;
              if(saveSize == "index" || saveSize == "coord" || saveSize == "normal" || saveSize == "texCoord") {
                that._webgl.textureFilter[unit] = gl.NEAREST;
              }
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tex._video);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, that._webgl.textureFilter[unit]);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, that._webgl.textureFilter[unit]);
              gl.bindTexture(gl.TEXTURE_2D, null);
            };
          var startVideo = function() {
              that._nameSpace.doc.needRender = true;
              that._webgl.texture[unit] = texture;
              if(saveSize == "coord") {
                that._webgl.coordTextureWidth = tex._video.clientWidth;
                that._webgl.coordTextureHeight = tex._video.clientHeight;
              } else if(saveSize == "index") {
                that._webgl.indexTextureWidth = tex._video.clientWidth;
                that._webgl.indexTextureHeight = tex._video.clientHeight;
              }
              x3dom.debug.logInfo(texture + " video tex url: " + tex._vf.url);
              tex._video.play();
              tex._intervalID = setInterval(updateMovie, 16);
            };
          var videoDone = function() {
              clearInterval(tex._intervalID);
              if(tex._vf.loop === true) {
                tex._video.play();
                tex._intervalID = setInterval(updateMovie, 16);
              }
            };
          tex._video.addEventListener("canplaythrough", startVideo, true);
          tex._video.addEventListener("ended", videoDone, true);
        } else if(x3dom.isa(tex, x3dom.nodeTypes.X3DEnvironmentTextureNode)) {
          texture = context.loadCubeMap(gl, tex.getTexUrl(), that._nameSpace.doc, false);
          that._webgl.texture[unit] = texture;
        } else {
          var t00 = new Date().getTime();
          texture = gl.createTexture();
          var image = new Image();
          image.crossOrigin = '';
          image.src = tex._nameSpace.getURL(tex._vf.url[0]);
          that._nameSpace.doc.downloadCount += 1;
          image.onload = function() {
            x3dom.ImageLoadManager.activeDownloads--;
            that._nameSpace.doc.needRender = true;
            that._nameSpace.doc.downloadCount -= 1;
            if(tex._vf.scale) {
              image = scaleImage(image);
            }
            that._webgl.texture[unit] = texture;
            if(saveSize == "coord") {
              that._webgl.coordTextureWidth = image.width;
              that._webgl.coordTextureHeight = image.height;
            } else if(saveSize == "index") {
              that._webgl.indexTextureWidth = image.width;
              that._webgl.indexTextureHeight = image.height;
            }
            if(saveSize == "index" || saveSize == "coord" || saveSize == "normal" || saveSize == "texCoord" || saveSize == "color") {
              that._webgl.textureFilter[unit] = gl.NEAREST;
            } else {
              that._webgl.textureFilter[unit] = gl.LINEAR;
            }
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, that._webgl.textureFilter[unit]);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, that._webgl.textureFilter[unit]);
            gl.bindTexture(gl.TEXTURE_2D, null);
            tex._complete = true;
            var t11 = new Date().getTime() - t00;
            x3dom.debug.logInfo(texture + " bound tex url " + tex._vf.url + " at unit " + unit + " with img load time " + t11 + " ms.");
          };
          image.onerror = function() {
            that._nameSpace.doc.downloadCount -= 1;
            x3dom.debug.logError("Can't load tex url: " + tex._vf.url + " (at unit " + unit + ").");
          };
        }
      };
      var indexed = 0;
      var numCoordinateTextures = 0;
      if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.ImageGeometry)) {
        numCoordinateTextures = shape._cf.geometry.node.numCoordinateTextures();
        indexed = (shape._cf.geometry.node.getIndexTexture() != null) ? 1.0 : 0.0;
      }
      viewarea._scene._webgl.imageGeometry = numCoordinateTextures;
      shape._webgl = {
        positions: shape._cf.geometry.node._mesh._positions,
        normals: shape._cf.geometry.node._mesh._normals,
        texcoords: shape._cf.geometry.node._mesh._texCoords,
        colors: shape._cf.geometry.node._mesh._colors,
        indexes: shape._cf.geometry.node._mesh._indices,
        lightsAndShadow: useLightingFunc(viewarea),
        imageGeometry: numCoordinateTextures,
        indexedImageGeometry: indexed,
        indexLength: 0
      };
      if(tex) {
        shape.updateTexture(tex, 0, "false");
      }
      if(shape._webgl.imageGeometry) {
        var IG_texUnit = 1;
        var indexTexture = shape._cf.geometry.node.getIndexTexture();
        if(indexTexture) {
          shape.updateTexture(indexTexture, IG_texUnit++, 'index');
        }
        for(var i = 0; i < numCoordinateTextures; i++) {
          var coordinateTexture = shape._cf.geometry.node.getCoordinateTexture(i);
          if(coordinateTexture) {
            shape.updateTexture(coordinateTexture, IG_texUnit++, 'coord');
          }
        }
        var normalTexture = shape._cf.geometry.node.getNormalTexture(0);
        if(normalTexture) {
          shape.updateTexture(normalTexture, IG_texUnit++, "normal");
        }
        var texCoordTexture = shape._cf.geometry.node.getTexCoordTexture();
        if(texCoordTexture) {
          shape.updateTexture(texCoordTexture, IG_texUnit++, "texCoord");
        }
        var colorTexture = shape._cf.geometry.node.getColorTexture();
        if(colorTexture) {
          shape.updateTexture(colorTexture, IG_texUnit++, "color");
        }
      }
      if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.PointSet) || x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Polypoint2D)) {
        shape._webgl.primType = gl.POINTS;
        if(shape._webgl.colors[0].length) {
          shape._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-vertexcolorUnlit', 'fs-x3d-vertexcolorUnlit']);
        } else {
          shape._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-default', 'fs-x3d-default']);
        }
      } else if((x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedLineSet)) || (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Circle2D)) || (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Arc2D)) || (x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Polyline2D))) {
        shape._webgl.primType = gl.LINES;
        if(shape._webgl.colors[0].length) {
          shape._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-vertexcolorUnlit', 'fs-x3d-vertexcolorUnlit']);
        } else {
          shape._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-default', 'fs-x3d-default']);
        }
      } else {
        if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.ImageGeometry)) {
          shape._webgl.primType = [];
          for(var i = 0; i < shape._cf.geometry.node._vf.primType.length; i++) {
            if(shape._cf.geometry.node._vf.primType[i].toUpperCase() == 'POINTS') {
              shape._webgl.primType.push(gl.POINTS);
            } else if(shape._cf.geometry.node._vf.primType[i].toUpperCase() == 'TRIANGLESTRIP') {
              shape._webgl.primType.push(gl.TRIANGLE_STRIP);
            } else {
              shape._webgl.primType.push(gl.TRIANGLES);
            }
          }
        } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedTriangleStripSet) && shape._cf.geometry.node._mesh._primType.toUpperCase() == 'TRIANGLESTRIP') {
          shape._webgl.primType = gl.TRIANGLE_STRIP;
        } else {
          shape._webgl.primType = gl.TRIANGLES;
        }
        if(shape._cf.appearance.node._shader !== null) {
          if(x3dom.isa(shape._cf.appearance.node._shader, x3dom.nodeTypes.CommonSurfaceShader)) {
            var texCnt = 0;
            var cssMode = 0;
            var cssShader = shape._cf.appearance.node._shader;
            var diffuseTex = cssShader.getDiffuseMap();
            var normalTex = cssShader.getNormalMap();
            var specularTex = cssShader.getSpecularMap();
            if(diffuseTex != null) {
              shape.updateTexture(diffuseTex, texCnt++, "false");
            }
            if(normalTex != null) {
              shape.updateTexture(normalTex, texCnt++, "false");
            }
            if(specularTex != null) {
              shape.updateTexture(specularTex, texCnt++, "false");
            }
            if(x3dom.caps.MOBILE) {
              x3dom.debug.logWarning("No mobile shader for CommonSurfaceShader! Using high quality shader!");
            }
            shape._webgl.shader = this.getShaderProgram(gl, [this.generateVS(viewarea, shape), this.generateFS(viewarea, shape)]);
          } else {
            var hackID = 'HACK' + shape._objectID;
            g_shaders['vs-x3d-' + hackID] = {};
            g_shaders['vs-x3d-' + hackID].type = "vertex";
            g_shaders['vs-x3d-' + hackID].data = shape._cf.appearance.node._shader._vertex._vf.url[0];
            g_shaders['fs-x3d-' + hackID] = {};
            g_shaders['fs-x3d-' + hackID].type = "fragment";
            g_shaders['fs-x3d-' + hackID].data = shape._cf.appearance.node._shader._fragment._vf.url[0];
            shape._webgl.shader = getDefaultShaderProgram(gl, hackID);
          }
        } else {
          if(x3dom.caps.MOBILE) {
            shape._webgl.shader = this.getShaderProgram(gl, [this.generateVSMobile(viewarea, shape), this.generateFSMobile(viewarea, shape)]);
          } else {
            shape._webgl.shader = this.getShaderProgram(gl, [this.generateVS(viewarea, shape), this.generateFS(viewarea, shape)]);
          }
        }
      }
    }
    var sp = shape._webgl.shader;
    var currAttribs = 0;
    shape._webgl.buffers = [];
    shape._webgl.dynamicFields = [];
    if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) {
      var t00 = new Date().getTime();
      shape._webgl.primType = [];
      for(var primCnt = 0; primCnt < shape._cf.geometry.node._vf.primType.length; ++primCnt) {
        switch(shape._cf.geometry.node._vf.primType[primCnt].toUpperCase()) {
        case 'POINTS':
          shape._webgl.primType.push(gl.POINTS);
          break;
        case 'TRIANGLESTRIP':
          shape._webgl.primType.push(gl.TRIANGLE_STRIP);
          break;
        case 'TRIANGLES':
        default:
          shape._webgl.primType.push(gl.TRIANGLES);
          break;
        }
      }
      if(shape._cf.geometry.node._vf.index.length > 0) {
        var xmlhttp0 = new XMLHttpRequest();
        xmlhttp0.open("GET", encodeURI(shape._nameSpace.getURL(shape._cf.geometry.node._vf.index)), true);
        xmlhttp0.responseType = "arraybuffer";
        shape._nameSpace.doc.downloadCount += 1;
        xmlhttp0.send(null);
        xmlhttp0.onload = function() {
          var XHR_buffer = xmlhttp0.response;
          var indicesBuffer = gl.createBuffer();
          shape._webgl.buffers[0] = indicesBuffer;
          var indexArray = new Uint16Array(XHR_buffer);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);
          shape._webgl.indexLength = indexArray.length;
          if(shape._webgl.primType[0] == gl.TRIANGLE_STRIP) shape._cf.geometry.node._mesh._numFaces = indexArray.length - 2;
          else shape._cf.geometry.node._mesh._numFaces = indexArray.length / 3;
          indexArray = null;
          shape._nameSpace.doc.downloadCount -= 1;
          shape._nameSpace.doc.needRender = true;
          var t11 = new Date().getTime() - t00;
          x3dom.debug.logInfo("XHR0/ index load time: " + t11 + " ms");
        };
      }
      if(shape._cf.geometry.node._vf.coord.length > 0) {
        var xmlhttp1 = new XMLHttpRequest();
        xmlhttp1.open("GET", encodeURI(shape._nameSpace.getURL(shape._cf.geometry.node._vf.coord)), true);
        xmlhttp1.responseType = "arraybuffer";
        shape._nameSpace.doc.downloadCount += 1;
        xmlhttp1.send(null);
        xmlhttp1.onload = function() {
          var XHR_buffer = xmlhttp1.response;
          positionBuffer = gl.createBuffer();
          shape._webgl.buffers[1] = positionBuffer;
          gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
          var vertices = new Float32Array(XHR_buffer);
          gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
          gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
          gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.position);
          var geoNode = shape._cf.geometry.node;
          if(geoNode._mesh._numCoords <= 0) {
            geoNode._mesh._numCoords = vertices.length / 3;
            geoNode._vf.vertexCount[0] = geoNode._mesh._numCoords;
          }
          vertices = null;
          shape._nameSpace.doc.downloadCount -= 1;
          shape._nameSpace.doc.needRender = true;
          var t11 = new Date().getTime() - t00;
          x3dom.debug.logInfo("XHR1/ coord load time: " + t11 + " ms");
        };
      }
      if(shape._cf.geometry.node._vf.normal.length > 0) {
        var xmlhttp2 = new XMLHttpRequest();
        xmlhttp2.open("GET", encodeURI(shape._nameSpace.getURL(shape._cf.geometry.node._vf.normal)), true);
        xmlhttp2.responseType = "arraybuffer";
        shape._nameSpace.doc.downloadCount += 1;
        xmlhttp2.send(null);
        xmlhttp2.onload = function() {
          var XHR_buffer = xmlhttp2.response;
          var normalBuffer = gl.createBuffer();
          shape._webgl.buffers[2] = normalBuffer;
          var normals = new Float32Array(XHR_buffer);
          gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, normals, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.normal, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.normal);
          normals = null;
          shape._nameSpace.doc.downloadCount -= 1;
          shape._nameSpace.doc.needRender = true;
          var t11 = new Date().getTime() - t00;
          x3dom.debug.logInfo("XHR2/ normal load time: " + t11 + " ms");
        };
      }
      if(shape._cf.geometry.node._vf.texCoord.length > 0) {
        var xmlhttp3 = new XMLHttpRequest();
        xmlhttp3.open("GET", encodeURI(shape._nameSpace.getURL(shape._cf.geometry.node._vf.texCoord)), true);
        xmlhttp3.responseType = "arraybuffer";
        shape._nameSpace.doc.downloadCount += 1;
        xmlhttp3.send(null);
        xmlhttp3.onload = function() {
          var XHR_buffer = xmlhttp3.response;
          var texcBuffer = gl.createBuffer();
          shape._webgl.buffers[3] = texcBuffer;
          var texCoords = new Float32Array(XHR_buffer);
          gl.bindBuffer(gl.ARRAY_BUFFER, texcBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.texcoord, 2, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.texcoord);
          texCoords = null;
          shape._nameSpace.doc.downloadCount -= 1;
          shape._nameSpace.doc.needRender = true;
          var t11 = new Date().getTime() - t00;
          x3dom.debug.logInfo("XHR3/ texCoord load time: " + t11 + " ms");
        };
      }
      if(shape._cf.geometry.node._vf.color.length > 0) {
        var xmlhttp4 = new XMLHttpRequest();
        xmlhttp4.open("GET", encodeURI(shape._nameSpace.getURL(shape._cf.geometry.node._vf.color)), true);
        xmlhttp4.responseType = "arraybuffer";
        shape._nameSpace.doc.downloadCount += 1;
        xmlhttp4.send(null);
        xmlhttp4.onload = function() {
          var XHR_buffer = xmlhttp4.response;
          var colorBuffer = gl.createBuffer();
          shape._webgl.buffers[4] = colorBuffer;
          var colors = new Float32Array(XHR_buffer);
          gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.color, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.color);
          colors = null;
          shape._nameSpace.doc.downloadCount -= 1;
          shape._nameSpace.doc.needRender = true;
          var t11 = new Date().getTime() - t00;
          x3dom.debug.logInfo("XHR4/ color load time: " + t11 + " ms");
        };
      }
    } else {
      for(q = 0; q < shape._webgl.positions.length; q++) {
        if(sp.position !== undefined) {
          var indicesBuffer = gl.createBuffer();
          shape._webgl.buffers[5 * q + 0] = indicesBuffer;
          var indexArray = new Uint16Array(shape._webgl.indexes[q]);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);
          indexArray = null;
          positionBuffer = gl.createBuffer();
          shape._webgl.buffers[5 * q + 1] = positionBuffer;
          gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
          vertices = new Float32Array(shape._webgl.positions[q]);
          gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
          gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
          gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.position);
          vertices = null;
        }
        if(sp.normal !== undefined) {
          var normalBuffer = gl.createBuffer();
          shape._webgl.buffers[5 * q + 2] = normalBuffer;
          var normals = new Float32Array(shape._webgl.normals[q]);
          gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, normals, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.normal, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.normal);
          normals = null;
        }
        if(sp.texcoord !== undefined) {
          var texcBuffer = gl.createBuffer();
          shape._webgl.buffers[5 * q + 3] = texcBuffer;
          var texCoords = new Float32Array(shape._webgl.texcoords[q]);
          gl.bindBuffer(gl.ARRAY_BUFFER, texcBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.texcoord, shape._cf.geometry.node._mesh._numTexComponents, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.texcoord);
          texCoords = null;
        }
        if(sp.color !== undefined) {
          var colorBuffer = gl.createBuffer();
          shape._webgl.buffers[5 * q + 4] = colorBuffer;
          var colors = new Float32Array(shape._webgl.colors[q]);
          gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp.color, shape._cf.geometry.node._mesh._numColComponents, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.color);
          colors = null;
        }
      }
      for(var df in shape._cf.geometry.node._mesh._dynamicFields) {
        var attrib = shape._cf.geometry.node._mesh._dynamicFields[df];
        shape._webgl.dynamicFields[currAttribs] = {
          buf: {},
          name: df,
          numComponents: attrib.numComponents
        };
        if(sp[df] !== undefined) {
          var attribBuffer = gl.createBuffer();
          shape._webgl.dynamicFields[currAttribs++].buf = attribBuffer;
          var attribs = new Float32Array(attrib.value);
          gl.bindBuffer(gl.ARRAY_BUFFER, attribBuffer);
          gl.bufferData(gl.ARRAY_BUFFER, attribs, gl.STATIC_DRAW);
          gl.vertexAttribPointer(sp[df], attrib.numComponents, gl.FLOAT, false, 0, 0);
          attribs = null;
        }
      }
    }
    shape._webgl._minFilterDic = {
      NEAREST: gl.NEAREST,
      LINEAR: gl.LINEAR,
      NEAREST_MIPMAP_NEAREST: gl.NEAREST_MIPMAP_NEAREST,
      NEAREST_MIPMAP_LINEAR: gl.NEAREST_MIPMAP_LINEAR,
      LINEAR_MIPMAP_NEAREST: gl.LINEAR_MIPMAP_NEAREST,
      LINEAR_MIPMAP_LINEAR: gl.LINEAR_MIPMAP_LINEAR,
      AVG_PIXEL: gl.LINEAR,
      AVG_PIXEL_AVG_MIPMAP: gl.LINEAR_MIPMAP_LINEAR,
      AVG_PIXEL_NEAREST_MIPMAP: gl.LINEAR_MIPMAP_NEAREST,
      DEFAULT: gl.LINEAR_MIPMAP_LINEAR,
      FASTEST: gl.NEAREST,
      NEAREST_PIXEL: gl.NEAREST,
      NEAREST_PIXEL_AVG_MIPMAP: gl.NEAREST_MIPMAP_LINEAR,
      NEAREST_PIXEL_NEAREST_MIPMAP: gl.NEAREST_MIPMAP_NEAREST,
      NICEST: gl.LINEAR_MIPMAP_LINEAR
    };
    shape._webgl._magFilterDic = {
      NEAREST: gl.NEAREST,
      LINEAR: gl.LINEAR,
      AVG_PIXEL: gl.LINEAR,
      DEFAULT: gl.LINEAR,
      FASTEST: gl.NEAREST,
      NEAREST_PIXEL: gl.NEAREST,
      NICEST: gl.LINEAR
    };
    shape._webgl._boundaryModesDic = {
      CLAMP: gl.CLAMP_TO_EDGE,
      CLAMP_TO_EDGE: gl.CLAMP_TO_EDGE,
      CLAMP_TO_BOUNDARY: gl.CLAMP_TO_EDGE,
      MIRRORED_REPEAT: gl.MIRRORED_REPEAT,
      REPEAT: gl.REPEAT
    };
  };
  Context.prototype.setupScene = function(gl, bgnd) {
    var sphere;
    var texture;
    if(bgnd._webgl !== undefined) {
      if(!bgnd._dirty) {
        return;
      }
      if(bgnd._webgl.texture !== undefined && bgnd._webgl.texture) {
        gl.deleteTexture(bgnd._webgl.texture);
      }
      if(bgnd._webgl.shader.position !== undefined) {
        gl.deleteBuffer(bgnd._webgl.buffers[1]);
        gl.deleteBuffer(bgnd._webgl.buffers[0]);
      }
      if(bgnd._webgl.shader.texcoord !== undefined) {
        gl.deleteBuffer(bgnd._webgl.buffers[2]);
      }
      bgnd._webgl = {};
    }
    bgnd._dirty = false;
    var url = bgnd.getTexUrl();
    var i = 0;
    var w = 1,
      h = 1;
    if(url.length > 0 && url[0].length > 0) {
      if(url.length >= 6 && url[1].length > 0 && url[2].length > 0 && url[3].length > 0 && url[4].length > 0 && url[5].length > 0) {
        sphere = new x3dom.nodeTypes.Sphere();
        bgnd._webgl = {
          positions: sphere._mesh._positions[0],
          indexes: sphere._mesh._indices[0],
          buffers: [{}, {}]
        };
        bgnd._webgl.primType = gl.TRIANGLES;
        bgnd._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-bg-textureCube', 'fs-x3d-bg-textureCube']);
        bgnd._webgl.texture = this.loadCubeMap(gl, url, bgnd._nameSpace.doc, true);
      } else {
        texture = gl.createTexture();
        var image = new Image();
        image.crossOrigin = '';
        image.onload = function() {
          bgnd._nameSpace.doc.needRender = true;
          bgnd._nameSpace.doc.downloadCount -= 1;
          bgnd._webgl.texture = texture;
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.bindTexture(gl.TEXTURE_2D, null);
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
        };
        image.onerror = function() {
          bgnd._nameSpace.doc.downloadCount -= 1;
          x3dom.debug.logError("Can't load tex url: " + url[0]);
        };
        image.src = bgnd._nameSpace.getURL(url[0]);
        bgnd._nameSpace.doc.downloadCount += 1;
        bgnd._webgl = {
          positions: [-w, -h, 0, -w, h, 0, w, -h, 0, w, h, 0],
          indexes: [0, 1, 2, 3],
          buffers: [{}, {}]
        };
        bgnd._webgl.primType = gl.TRIANGLE_STRIP;
        bgnd._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-bg-texture', 'fs-x3d-bg-texture']);
      }
    } else {
      if(bgnd.getSkyColor().length > 1 || bgnd.getGroundColor().length) {
        sphere = new x3dom.nodeTypes.Sphere();
        texture = gl.createTexture();
        bgnd._webgl = {
          positions: sphere._mesh._positions[0],
          texcoords: sphere._mesh._texCoords[0],
          indexes: sphere._mesh._indices[0],
          buffers: [{}, {}, {}],
          texture: texture,
          primType: gl.TRIANGLES
        };
        var N = nextHighestPowerOfTwo(bgnd.getSkyColor().length + bgnd.getGroundColor().length + 2);
        N = (N < 512) ? 512 : N;
        var n = bgnd._vf.groundAngle.length;
        var tmp = [],
          arr = [];
        var colors = [],
          sky = [0];
        for(i = 0; i < bgnd._vf.skyColor.length; i++) {
          colors[i] = bgnd._vf.skyColor[i];
        }
        for(i = 0; i < bgnd._vf.skyAngle.length; i++) {
          sky[i + 1] = bgnd._vf.skyAngle[i];
        }
        if(n > 0) {
          if(sky[sky.length - 1] < Math.PI / 2) {
            sky[sky.length] = Math.PI / 2 - x3dom.fields.Eps;
            colors[colors.length] = colors[colors.length - 1];
          }
          for(i = n - 1; i >= 0; i--) {
            if((i == n - 1) && (Math.PI - bgnd._vf.groundAngle[i] <= Math.PI / 2)) {
              sky[sky.length] = Math.PI / 2;
              colors[colors.length] = bgnd._vf.groundColor[bgnd._vf.groundColor.length - 1];
            }
            sky[sky.length] = Math.PI - bgnd._vf.groundAngle[i];
            colors[colors.length] = bgnd._vf.groundColor[i + 1];
          }
          sky[sky.length] = Math.PI;
          colors[colors.length] = bgnd._vf.groundColor[0];
        } else {
          if(sky[sky.length - 1] < Math.PI) {
            sky[sky.length] = Math.PI;
            colors[colors.length] = colors[colors.length - 1];
          }
        }
        for(i = 0; i < sky.length; i++) {
          sky[i] /= Math.PI;
        }
        x3dom.debug.assert(sky.length == colors.length);
        var interp = new x3dom.nodeTypes.ColorInterpolator();
        interp._vf.key = new x3dom.fields.MFFloat(sky);
        interp._vf.keyValue = new x3dom.fields.MFColor(colors);
        for(i = 0; i < N; i++) {
          var fract = i / (N - 1.0);
          interp._vf.set_fraction = fract;
          interp.fieldChanged("set_fraction");
          tmp[i] = interp._vf.value_changed;
        }
        tmp.reverse();
        for(i = 0; i < tmp.length; i++) {
          arr[3 * i + 0] = Math.floor(tmp[i].r * 255);
          arr[3 * i + 1] = Math.floor(tmp[i].g * 255);
          arr[3 * i + 2] = Math.floor(tmp[i].b * 255);
        }
        var pixels = new Uint8Array(arr);
        var format = gl.RGB;
        N = (pixels.length) / 3;
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
        gl.texImage2D(gl.TEXTURE_2D, 0, format, 1, N, 0, format, gl.UNSIGNED_BYTE, pixels);
        gl.bindTexture(gl.TEXTURE_2D, null);
        bgnd._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-bg-texture-bgnd', 'fs-x3d-bg-texture']);
      } else {
        bgnd._webgl = {};
      }
    }
    if(bgnd._webgl.shader) {
      var sp = bgnd._webgl.shader;
      var positionBuffer = gl.createBuffer();
      bgnd._webgl.buffers[1] = positionBuffer;
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      var vertices = new Float32Array(bgnd._webgl.positions);
      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(sp.position);
      var indicesBuffer = gl.createBuffer();
      bgnd._webgl.buffers[0] = indicesBuffer;
      var indexArray = new Uint16Array(bgnd._webgl.indexes);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);
      vertices = null;
      indexArray = null;
      if(sp.texcoord !== undefined) {
        var texcBuffer = gl.createBuffer();
        bgnd._webgl.buffers[2] = texcBuffer;
        var texcoords = new Float32Array(bgnd._webgl.texcoords);
        gl.bindBuffer(gl.ARRAY_BUFFER, texcBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, texcoords, gl.STATIC_DRAW);
        gl.vertexAttribPointer(sp.texcoord, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.texcoord);
        texcoords = null;
      }
    }
    bgnd._webgl.render = function(gl, mat_scene) {
      var sp = bgnd._webgl.shader;
      if((sp !== undefined && sp !== null) && (sp.texcoord !== undefined && sp.texcoord !== null) && (bgnd._webgl.texture !== undefined && bgnd._webgl.texture !== null)) {
        gl.clearDepth(1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        gl.frontFace(gl.CCW);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.BLEND);
        sp.bind();
        if(!sp.tex) {
          sp.tex = 0;
        }
        sp.alpha = 1.0;
        sp.modelViewProjectionMatrix = mat_scene.toGL();
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, bgnd._webgl.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bgnd._webgl.buffers[0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, bgnd._webgl.buffers[1]);
        gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.position);
        gl.bindBuffer(gl.ARRAY_BUFFER, bgnd._webgl.buffers[2]);
        gl.vertexAttribPointer(sp.texcoord, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.texcoord);
        try {
          gl.drawElements(bgnd._webgl.primType, bgnd._webgl.indexes.length, gl.UNSIGNED_SHORT, 0);
        } catch(e) {
          x3dom.debug.logException("Render background: " + e);
        }
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.disableVertexAttribArray(sp.position);
        gl.disableVertexAttribArray(sp.texcoord);
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
      } else if(!sp || !bgnd._webgl.texture || (bgnd._webgl.texture.textureCubeReady !== undefined && bgnd._webgl.texture.textureCubeReady !== true)) {
        var bgCol = bgnd.getSkyColor().toGL();
        bgCol[3] = 1.0 - bgnd.getTransparency();
        gl.clearColor(bgCol[0], bgCol[1], bgCol[2], bgCol[3]);
        gl.clearDepth(1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
      } else {
        gl.clearDepth(1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        gl.frontFace(gl.CCW);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.BLEND);
        sp.bind();
        if(!sp.tex) {
          sp.tex = 0;
        }
        if(bgnd._webgl.texture.textureCubeReady) {
          sp.modelViewProjectionMatrix = mat_scene.toGL();
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, bgnd._webgl.texture);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        } else {
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, bgnd._webgl.texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        }
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bgnd._webgl.buffers[0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, bgnd._webgl.buffers[1]);
        gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.position);
        try {
          gl.drawElements(bgnd._webgl.primType, bgnd._webgl.indexes.length, gl.UNSIGNED_SHORT, 0);
        } catch(e) {
          x3dom.debug.logException("Render background: " + e);
        }
        gl.disableVertexAttribArray(sp.position);
        if(bgnd._webgl.texture.textureCubeReady) {
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
        } else {
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, null);
        }
        gl.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
      }
    };
  };
  Context.prototype.setupFgnds = function(gl, scene) {
    if(scene._fgnd !== undefined) {
      return;
    }
    var w = 1,
      h = 1;
    scene._fgnd = {};
    scene._fgnd._webgl = {
      positions: [-w, -h, 0, -w, h, 0, w, -h, 0, w, h, 0],
      indexes: [0, 1, 2, 3],
      buffers: [{}, {}]
    };
    scene._fgnd._webgl.primType = gl.TRIANGLE_STRIP;
    scene._fgnd._webgl.shader = this.getShaderProgram(gl, ['vs-x3d-bg-texture', 'fs-x3d-bg-texture']);
    var sp = scene._fgnd._webgl.shader;
    var positionBuffer = gl.createBuffer();
    scene._fgnd._webgl.buffers[1] = positionBuffer;
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    var vertices = new Float32Array(scene._fgnd._webgl.positions);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
    var indicesBuffer = gl.createBuffer();
    scene._fgnd._webgl.buffers[0] = indicesBuffer;
    var indexArray = new Uint16Array(scene._fgnd._webgl.indexes);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexArray, gl.STATIC_DRAW);
    vertices = null;
    indexArray = null;
    scene._fgnd._webgl.render = function(gl, tex) {
      scene._fgnd._webgl.texture = tex;
      gl.frontFace(gl.CCW);
      gl.disable(gl.CULL_FACE);
      gl.disable(gl.DEPTH_TEST);
      sp.bind();
      if(!sp.tex) {
        sp.tex = 0;
      }
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, scene._fgnd._webgl.texture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, scene._fgnd._webgl.buffers[0]);
      gl.bindBuffer(gl.ARRAY_BUFFER, scene._fgnd._webgl.buffers[1]);
      gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(sp.position);
      try {
        gl.drawElements(scene._fgnd._webgl.primType, scene._fgnd._webgl.indexes.length, gl.UNSIGNED_SHORT, 0);
      } catch(e) {
        x3dom.debug.logException("Render background: " + e);
      }
      gl.disableVertexAttribArray(sp.position);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, null);
    };
  };
  Context.prototype.renderShadowPass = function(gl, scene, mat_light, mat_scene) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, scene._webgl.fboShadow.fbo);
    gl.viewport(0, 0, scene._webgl.fboShadow.width, scene._webgl.fboShadow.height);
    gl.clearColor(1.0, 1.0, 1.0, 1.0);
    gl.clearDepth(1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.depthFunc(gl.LEQUAL);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.disable(gl.BLEND);
    var sp = scene._webgl.shadowShader;
    sp.bind();
    var i, n = scene.drawableObjects.length;
    for(i = 0; i < n; i++) {
      var trafo = scene.drawableObjects[i][0];
      var shape = scene.drawableObjects[i][1];
      sp.modelViewMatrix = mat_light.mult(trafo).toGL();
      sp.modelViewProjectionMatrix = mat_scene.mult(trafo).toGL();
      for(var q = 0; q < shape._webgl.positions.length; q++) {
        if(sp.position !== undefined) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, shape._webgl.buffers[5 * q + 0]);
          gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 1]);
          gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.position);
        }
        try {
          if(shape._webgl.indexes && shape._webgl.indexes[q]) {
            if(shape._webgl.imageGeometry) {
              for(var v = 0, offset = 0; v < shape._cf.geometry.node._vf.vertexCount.length; v++) {
                gl.drawArrays(shape._webgl.primType[v], offset, shape._cf.geometry.node._vf.vertexCount[v]);
                offset += shape._cf.geometry.node._vf.vertexCount[v];
              }
            } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) {
              gl.drawElements(shape._webgl.primType[0], shape._webgl.indexLength, gl.UNSIGNED_SHORT, 0);
            } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedTriangleStripSet) && shape._webgl.primType == gl.TRIANGLE_STRIP) {
              var indOff = shape._cf.geometry.node._indexOffset;
              for(var io = 1; io < indOff.length; io++) {
                gl.drawElements(gl.TRIANGLE_STRIP, indOff[io] - indOff[io - 1], gl.UNSIGNED_SHORT, 2 * indOff[io - 1]);
              }
            } else {
              gl.drawElements(shape._webgl.primType, shape._webgl.indexes[q].length, gl.UNSIGNED_SHORT, 0);
            }
          }
        } catch(e) {
          x3dom.debug.logException(shape._DEF + " renderShadowPass(): " + e);
        }
        if(sp.position !== undefined) {
          gl.disableVertexAttribArray(sp.position);
        }
      }
    }
    gl.flush();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
  Context.prototype.renderPickingPass = function(gl, scene, mat_view, mat_scene, min, max, pickMode, lastX, lastY) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, scene._webgl.fboPick.fbo);
    gl.viewport(0, 0, scene._webgl.fboPick.width, scene._webgl.fboPick.height);
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clearDepth(1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.depthFunc(gl.LEQUAL);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.disable(gl.BLEND);
    var sp;
    if(pickMode === 0) {
      if(scene._webgl.imageGeometry) {
        sp = scene._webgl.pickShaderIG;
      } else {
        sp = scene._webgl.pickShader;
      }
    } else if(pickMode === 1) {
      sp = scene._webgl.pickColorShader;
    } else if(pickMode === 2) {
      sp = scene._webgl.pickTexCoordShader;
    }
    sp.bind();
    for(var i = 0; i < scene.drawableObjects.length; i++) {
      var trafo = scene.drawableObjects[i][0];
      var shape = scene.drawableObjects[i][1];
      if(shape._objectID < 1 || shape._webgl === undefined) {
        continue;
      }
      sp.modelMatrix = trafo.toGL();
      sp.modelViewProjectionMatrix = mat_scene.mult(trafo).toGL();
      sp.wcMin = min.toGL();
      sp.wcMax = max.toGL();
      sp.alpha = 1.0 - shape._objectID / 255.0;
      sp.imageGeometry = 0.0;
      if(shape._webgl.imageGeometry) {
        sp.imageGeometry = 1.0;
        sp.IG_bboxMin = shape._cf.geometry.node.getMin().toGL();
        sp.IG_bboxMax = shape._cf.geometry.node.getMax().toGL();
        sp.IG_coordTextureWidth = shape._webgl.coordTextureWidth;
        sp.IG_coordTextureHeight = shape._webgl.coordTextureHeight;
        sp.IG_implicitMeshSize = shape._cf.geometry.node._vf.implicitMeshSize.x;
        if(shape._webgl.indexedImageGeometry) {
          sp.indexed = 1.0;
          sp.IG_indexTextureWidth = shape._webgl.indexTextureWidth;
          sp.IG_indexTextureHeight = shape._webgl.indexTextureHeight;
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, shape._webgl.texture[1]);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, shape._webgl.texture[2]);
        } else {
          sp.indexed = 0.0;
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, shape._webgl.texture[1]);
        }
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        var texUnit = 0;
        if(shape._cf.geometry.node.getIndexTexture()) {
          if(!sp.IG_indexTexture) {
            sp.IG_indexTexture = texUnit++;
          }
        }
        if(shape._cf.geometry.node.getCoordinateTexture(0)) {
          if(!sp.IG_coordinateTexture) {
            sp.IG_coordinateTexture = texUnit++;
          }
        }
      }
      for(var q = 0; q < shape._webgl.positions.length; q++) {
        if(sp.position !== undefined) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, shape._webgl.buffers[5 * q + 0]);
          gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 1]);
          gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.position);
        }
        if(sp.color !== undefined) {
          gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 4]);
          gl.vertexAttribPointer(sp.color, shape._cf.geometry.node._mesh._numColComponents, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.color);
        }
        if(sp.texcoord !== undefined) {
          gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 3]);
          gl.vertexAttribPointer(sp.texcoord, shape._cf.geometry.node._mesh._numTexComponents, gl.FLOAT, false, 0, 0);
          gl.enableVertexAttribArray(sp.texcoord);
        }
        if(shape.isSolid()) {
          gl.enable(gl.CULL_FACE);
          if(shape.isCCW()) {
            gl.frontFace(gl.CCW);
          } else {
            gl.frontFace(gl.CW);
          }
        } else {
          gl.disable(gl.CULL_FACE);
        }
        try {
          if(shape._webgl.indexes && shape._webgl.indexes[q]) {
            if(shape._webgl.imageGeometry) {
              for(var v = 0, offset = 0; v < shape._cf.geometry.node._vf.vertexCount.length; v++) {
                gl.drawArrays(shape._webgl.primType[v], offset, shape._cf.geometry.node._vf.vertexCount[v]);
                offset += shape._cf.geometry.node._vf.vertexCount[v];
              }
            } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) {
              gl.drawElements(shape._webgl.primType[0], shape._webgl.indexLength, gl.UNSIGNED_SHORT, 0);
            } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedTriangleStripSet) && shape._webgl.primType == gl.TRIANGLE_STRIP) {
              var indOff = shape._cf.geometry.node._indexOffset;
              for(var io = 1; io < indOff.length; io++) {
                gl.drawElements(gl.TRIANGLE_STRIP, indOff[io] - indOff[io - 1], gl.UNSIGNED_SHORT, 2 * indOff[io - 1]);
              }
            } else {
              gl.drawElements(shape._webgl.primType, shape._webgl.indexes[q].length, gl.UNSIGNED_SHORT, 0);
            }
          }
        } catch(e) {
          x3dom.debug.logException(shape._DEF + " renderPickingPass(): " + e);
        }
        if(sp.position !== undefined) {
          gl.disableVertexAttribArray(sp.position);
        }
        if(sp.color !== undefined) {
          gl.disableVertexAttribArray(sp.color);
        }
        if(sp.texcoord !== undefined) {
          gl.disableVertexAttribArray(sp.texcoord);
        }
      }
    }
    gl.flush();
    try {
      var x = lastX * scene._webgl.pickScale,
        y = scene._webgl.fboPick.height - 1 - lastY * scene._webgl.pickScale;
      var data = new Uint8Array(4);
      gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);
      scene._webgl.fboPick.pixelData = data;
    } catch(se) {
      scene._webgl.fboPick.pixelData = [];
      x3dom.debug.logException(se + " (cannot pick)");
    }
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
  Context.prototype.renderShape = function(transform, shape, viewarea, slights, numLights, mat_view, mat_scene, mat_light, gl, activeTex, oneShadowExistsAlready) {
    if(shape._webgl === undefined) {
      return;
    }
    var tex = null;
    var scene = viewarea._scene;
    var sp = shape._webgl.shader;
    if(!sp) {
      shape._webgl.shader = getDefaultShaderProgram(gl, 'default');
      sp = shape._webgl.shader;
    }
    sp.bind();
    if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) {
      sp.useText = 1.0;
    } else {
      sp.useText = 0.0;
    }
    if(shape._webgl.imageGeometry) {
      sp.IG_bboxMin = shape._cf.geometry.node.getMin().toGL();
      sp.IG_bboxMax = shape._cf.geometry.node.getMax().toGL();
      sp.IG_coordTextureWidth = shape._webgl.coordTextureWidth;
      sp.IG_coordTextureHeight = shape._webgl.coordTextureHeight;
      sp.IG_implicitMeshSize = shape._cf.geometry.node._vf.implicitMeshSize.x;
      if(shape._webgl.indexedImageGeometry) {
        sp.IG_indexTextureWidth = shape._webgl.indexTextureWidth;
        sp.IG_indexTextureHeight = shape._webgl.indexTextureHeight;
      }
      var IG_texUnit = 1;
      if(shape._cf.geometry.node.getIndexTexture()) {
        sp.IG_indexTexture = IG_texUnit++;
      }
      for(var i = 0; i < shape._webgl.imageGeometry; i++) {
        if(shape._cf.geometry.node.getCoordinateTexture(i)) {
          sp['IG_coordinateTexture' + i] = IG_texUnit++;
        }
      }
      if(shape._cf.geometry.node.getNormalTexture(0)) {
        sp.IG_normalTexture = IG_texUnit++;
      }
      if(shape._cf.geometry.node.getTexCoordTexture()) {
        sp.IG_texCoordTexture = IG_texUnit++;
      }
      if(shape._cf.geometry.node.getColorTexture()) {
        sp.IG_colorTexture = IG_texUnit++;
      }
    }
    var fog = scene.getFog();
    if(fog) {
      if(x3dom.caps.MOBILE) {
        sp.fogColor = fog._vf.color.toGL();
        sp.fogRange = fog._vf.visibilityRange;
        sp.fogType = (fog._vf.fogType == "LINEAR") ? 0.0 : 1.0;
      } else {
        sp['fog.color'] = fog._vf.color.toGL();
        sp['fog.visibilityRange'] = fog._vf.visibilityRange;
        sp['fog.fogType'] = (fog._vf.fogType == "LINEAR") ? 0.0 : 1.0;
      }
    }
    var mat = shape._cf.appearance.node._cf.material.node;
    var shaderCSS = shape._cf.appearance.node._shader;
    if(shaderCSS !== null && x3dom.isa(shaderCSS, x3dom.nodeTypes.CommonSurfaceShader)) {
      sp['material.diffuseColor'] = shaderCSS._vf.diffuseFactor.toGL();
      sp['material.specularColor'] = shaderCSS._vf.specularFactor.toGL();
      sp['material.emissiveColor'] = shaderCSS._vf.emissiveFactor.toGL();
      sp['material.shininess'] = shaderCSS._vf.shininessFactor;
      sp['material.ambientIntensity'] = (shaderCSS._vf.ambientFactor.x + shaderCSS._vf.ambientFactor.y + shaderCSS._vf.ambientFactor.z) / 3;
      sp['material.transparency'] = 1.0 - shaderCSS._vf.alphaFactor;
    } else {
      shaderCSS = null;
      if(x3dom.caps.MOBILE) {
        sp.diffuseColor = mat._vf.diffuseColor.toGL();
        sp.specularColor = mat._vf.specularColor.toGL();
        sp.emissiveColor = mat._vf.emissiveColor.toGL();
        sp.shininess = mat._vf.shininess;
        sp.ambientIntensity = mat._vf.ambientIntensity;
        sp.transparency = mat._vf.transparency;
      } else {
        sp['material.diffuseColor'] = mat._vf.diffuseColor.toGL();
        sp['material.specularColor'] = mat._vf.specularColor.toGL();
        sp['material.emissiveColor'] = mat._vf.emissiveColor.toGL();
        sp['material.shininess'] = mat._vf.shininess;
        sp['material.ambientIntensity'] = mat._vf.ambientIntensity;
        sp['material.transparency'] = mat._vf.transparency;
      }
    }
    sp.alpha = 1.0 - mat._vf.transparency;
    if(numLights > 0) {
      if(numLights > 8) {
        x3dom.debug.logWarning("Too many lights! Only 8 lights supported!");
        numLights = 8;
      }
      for(var p = 0; p < numLights; p++) {
        if(x3dom.isa(slights[p], x3dom.nodeTypes.DirectionalLight)) {
          if(x3dom.caps.MOBILE) {
            sp['Light' + p + '_Type'] = 0.0;
            sp['Light' + p + '_On'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['Light' + p + '_Color'] = slights[p]._vf.color.toGL();
            sp['Light' + p + '_Intensity'] = slights[p]._vf.intensity;
            sp['Light' + p + '_AmbientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['Light' + p + '_Direction'] = mat_view.multMatrixVec(slights[p]._vf.direction).toGL();
            sp['Light' + p + '_Attenuation'] = [1.0, 1.0, 1.0];
            sp['Light' + p + '_Location'] = [1.0, 1.0, 1.0];
            sp['Light' + p + '_Radius'] = 0.0;
            sp['Light' + p + '_BeamWidth'] = 0.0;
            sp['Light' + p + '_CutOffAngle'] = 0.0;
            sp['Light' + p + '_shadowIntensity'] = slights[p]._vf.shadowIntensity;
          } else {
            sp['light[' + p + '].type'] = 0.0;
            sp['light[' + p + '].on'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['light[' + p + '].color'] = slights[p]._vf.color.toGL();
            sp['light[' + p + '].intensity'] = slights[p]._vf.intensity;
            sp['light[' + p + '].ambientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['light[' + p + '].direction'] = mat_view.multMatrixVec(slights[p]._vf.direction).toGL();
            sp['light[' + p + '].attenuation'] = [1.0, 1.0, 1.0];
            sp['light[' + p + '].location'] = [1.0, 1.0, 1.0];
            sp['light[' + p + '].radius'] = 0.0;
            sp['light[' + p + '].beamWidth'] = 0.0;
            sp['light[' + p + '].cutOffAngle'] = 0.0;
            sp['light[' + p + '].shadowIntensity'] = slights[p]._vf.shadowIntensity;
          }
        } else if(x3dom.isa(slights[p], x3dom.nodeTypes.PointLight)) {
          if(x3dom.caps.MOBILE) {
            sp['Light' + p + '_Type'] = 1.0;
            sp['Light' + p + '_On'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['Light' + p + '_Color'] = slights[p]._vf.color.toGL();
            sp['Light' + p + '_Intensity'] = slights[p]._vf.intensity;
            sp['Light' + p + '_AmbientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['Light' + p + '_Direction'] = [1.0, 1.0, 1.0];
            sp['Light' + p + '_Attenuation'] = slights[p]._vf.attenuation.toGL();
            sp['Light' + p + '_Location'] = mat_view.multMatrixPnt(slights[p]._vf.location).toGL();
            sp['Light' + p + '_Radius'] = slights[p]._vf.radius;
            sp['Light' + p + '_BeamWidth'] = 0.0;
            sp['Light' + p + '_CutOffAngle'] = 0.0;
            sp['Light' + p + '_shadowIntensity'] = slights[p]._vf.shadowIntensity;
          } else {
            sp['light[' + p + '].type'] = 1.0;
            sp['light[' + p + '].on'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['light[' + p + '].color'] = slights[p]._vf.color.toGL();
            sp['light[' + p + '].intensity'] = slights[p]._vf.intensity;
            sp['light[' + p + '].ambientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['light[' + p + '].direction'] = [1.0, 1.0, 1.0];
            sp['light[' + p + '].attenuation'] = slights[p]._vf.attenuation.toGL();
            sp['light[' + p + '].location'] = mat_view.multMatrixPnt(slights[p]._vf.location).toGL();
            sp['light[' + p + '].radius'] = slights[p]._vf.radius;
            sp['light[' + p + '].beamWidth'] = 0.0;
            sp['light[' + p + '].cutOffAngle'] = 0.0;
            sp['light[' + p + '].shadowIntensity'] = slights[p]._vf.shadowIntensity;
          }
        } else if(x3dom.isa(slights[p], x3dom.nodeTypes.SpotLight)) {
          if(x3dom.caps.MOBILE) {
            sp['Light' + p + '_Type'] = 2.0;
            sp['Light' + p + '_On'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['Light' + p + '_Color'] = slights[p]._vf.color.toGL();
            sp['Light' + p + '_Intensity'] = slights[p]._vf.intensity;
            sp['Light' + p + '_AmbientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['Light' + p + '_Direction'] = mat_view.multMatrixVec(slights[p]._vf.direction).toGL();
            sp['Light' + p + '_Attenuation'] = slights[p]._vf.attenuation.toGL();
            sp['Light' + p + '_Location'] = mat_view.multMatrixPnt(slights[p]._vf.location).toGL();
            sp['Light' + p + '_Radius'] = slights[p]._vf.radius;
            sp['Light' + p + '_BeamWidth'] = slights[p]._vf.beamWidth;
            sp['Light' + p + '_CutOffAngle'] = slights[p]._vf.cutOffAngle;
            sp['Light' + p + '_shadowIntensity'] = slights[p]._vf.shadowIntensity;
          } else {
            sp['light[' + p + '].type'] = 2.0;
            sp['light[' + p + '].on'] = (slights[p]._vf.on) ? 1.0 : 0.0;
            sp['light[' + p + '].color'] = slights[p]._vf.color.toGL();
            sp['light[' + p + '].intensity'] = slights[p]._vf.intensity;
            sp['light[' + p + '].ambientIntensity'] = slights[p]._vf.ambientIntensity;
            sp['light[' + p + '].direction'] = mat_view.multMatrixVec(slights[p]._vf.direction).toGL();
            sp['light[' + p + '].attenuation'] = slights[p]._vf.attenuation.toGL();
            sp['light[' + p + '].location'] = mat_view.multMatrixPnt(slights[p]._vf.location).toGL();
            sp['light[' + p + '].radius'] = slights[p]._vf.radius;
            sp['light[' + p + '].beamWidth'] = slights[p]._vf.beamWidth;
            sp['light[' + p + '].cutOffAngle'] = slights[p]._vf.cutOffAngle;
            sp['light[' + p + '].shadowIntensity'] = slights[p]._vf.shadowIntensity;
          }
        }
      }
    }
    var nav = scene.getNavigationInfo();
    if(nav._vf.headlight) {
      numLights = (numLights) ? numLights : 0;
      if(x3dom.caps.MOBILE) {
        sp['Light' + numLights + '_Type'] = 0.0;
        sp['Light' + numLights + '_On'] = 1.0;
        sp['Light' + numLights + '_Color'] = [1.0, 1.0, 1.0];
        sp['Light' + numLights + '_Intensity'] = 1.0;
        sp['Light' + numLights + '_AmbientIntensity'] = 0.0;
        sp['Light' + numLights + '_Direction'] = [0.0, 0.0, -1.0];
        sp['Light' + numLights + '_Attenuation'] = [1.0, 1.0, 1.0];
        sp['Light' + numLights + '_Location'] = [1.0, 1.0, 1.0];
        sp['Light' + numLights + '_Radius'] = 0.0;
        sp['Light' + numLights + '_BeamWidth'] = 0.0;
        sp['Light' + numLights + '_CutOffAngle'] = 0.0;
      } else {
        sp['light[' + numLights + '].type'] = 0.0;
        sp['light[' + numLights + '].on'] = 1.0;
        sp['light[' + numLights + '].color'] = [1.0, 1.0, 1.0];
        sp['light[' + numLights + '].intensity'] = 1.0;
        sp['light[' + numLights + '].ambientIntensity'] = 0.0;
        sp['light[' + numLights + '].direction'] = [0.0, 0.0, -1.0];
        sp['light[' + numLights + '].attenuation'] = [1.0, 1.0, 1.0];
        sp['light[' + numLights + '].location'] = [1.0, 1.0, 1.0];
        sp['light[' + numLights + '].radius'] = 0.0;
        sp['light[' + numLights + '].beamWidth'] = 0.0;
        sp['light[' + numLights + '].cutOffAngle'] = 0.0;
      }
    }
    var userShader = shape._cf.appearance.node._shader;
    if(userShader) {
      for(var fName in userShader._vf) {
        if(userShader._vf.hasOwnProperty(fName) && fName !== 'language') {
          var field = userShader._vf[fName];
          try {
            sp[fName] = field.toGL();
          } catch(noToGl) {
            sp[fName] = field;
          }
        }
      }
    }
    var model_view = mat_view.mult(transform);
    sp.modelViewMatrix = model_view.toGL();
    sp.normalMatrix = model_view.inverse().transpose().toGL();
    sp.viewMatrix = mat_view.toGL();
    sp.modelViewMatrixInverse = model_view.inverse().toGL();
    sp.modelViewProjectionMatrix = mat_scene.mult(transform).toGL();
    for(var cnt = 0; shape._webgl.texture !== undefined && cnt < shape._webgl.texture.length; cnt++) {
      if(shape._webgl.texture[cnt]) {
        if(shape._cf.appearance.node._cf.texture.node) {
          tex = shape._cf.appearance.node._cf.texture.node.getTexture(cnt);
        }
        if(tex) {
          sp.origChannelCount = tex._vf.origChannelCount;
        }
        var wrapS = gl.REPEAT,
          wrapT = gl.REPEAT;
        var minFilter = gl.LINEAR,
          magFilter = gl.LINEAR;
        var genMipMaps = false;
        if(shape._webgl.textureFilter) {
          minFilter = shape._webgl.textureFilter[cnt];
          magFilter = shape._webgl.textureFilter[cnt];
        }
        if(tex && tex._cf.textureProperties.node !== null) {
          var texProp = tex._cf.textureProperties.node;
          wrapS = shape._webgl._boundaryModesDic[texProp._vf.boundaryModeS.toUpperCase()];
          wrapT = shape._webgl._boundaryModesDic[texProp._vf.boundaryModeT.toUpperCase()];
          minFilter = shape._webgl._minFilterDic[texProp._vf.minificationFilter.toUpperCase()];
          magFilter = shape._webgl._magFilterDic[texProp._vf.magnificationFilter.toUpperCase()];
          if(texProp._vf.generateMipMaps === true) {
            if(minFilter == gl.NEAREST) minFilter = gl.NEAREST_MIPMAP_NEAREST;
            if(minFilter == gl.LINEAR) minFilter = gl.LINEAR_MIPMAP_LINEAR;
            genMipMaps = true;
          } else {
            if((minFilter == gl.LINEAR_MIPMAP_LINEAR) || (minFilter == gl.LINEAR_MIPMAP_NEAREST)) minFilter = gl.LINEAR;
            if((minFilter == gl.NEAREST_MIPMAP_LINEAR) || (minFilter == gl.NEAREST_MIPMAP_NEAREST)) minFilter = gl.NEAREST;
          }
        } else {
          if(tex && tex._vf.repeatS === false) {
            wrapS = gl.CLAMP_TO_EDGE;
          }
          if(tex && tex._vf.repeatT === false) {
            wrapT = gl.CLAMP_TO_EDGE;
          }
        }
        if(shape._webgl.texture[cnt].textureCubeReady && tex && x3dom.isa(tex, x3dom.nodeTypes.X3DEnvironmentTextureNode)) {
          gl.activeTexture(activeTex[cnt]);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, shape._webgl.texture[cnt]);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, wrapS);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, wrapT);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, magFilter);
          gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, minFilter);
          if(genMipMaps) {
            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
          }
        } else {
          gl.activeTexture(activeTex[cnt]);
          gl.bindTexture(gl.TEXTURE_2D, shape._webgl.texture[cnt]);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
          if(genMipMaps) {
            gl.generateMipmap(gl.TEXTURE_2D);
          }
        }
        if(shape._cf.appearance.node._cf.textureTransform.node !== null) {
          var texTrafo = shape._cf.appearance.node.texTransformMatrix();
          sp.texTrafoMatrix = texTrafo.toGL();
        }
        if(shaderCSS) {
          var texUnit = 0;
          if(shaderCSS.getDiffuseMap()) {
            if(!sp.tex) {
              sp.tex = texUnit++;
            }
          }
          if(shaderCSS.getNormalMap()) {
            if(!sp.bump) {
              sp.bump = texUnit++;
            }
          }
          if(shaderCSS.getSpecularMap()) {
            if(!sp.spec) {
              sp.spec = texUnit++;
            }
          }
        } else {
          if(!sp.tex) {
            sp.tex = 0;
          }
        }
      }
    }
    if(oneShadowExistsAlready) {
      if(!sp.sh_tex) {
        sp.sh_tex = cnt;
      }
      gl.activeTexture(activeTex[cnt]);
      gl.bindTexture(gl.TEXTURE_2D, scene._webgl.fboShadow.tex);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      sp.matPV = mat_light.mult(transform).toGL();
    }
    var attrib;
    for(var df = 0; df < shape._webgl.dynamicFields.length; df++) {
      attrib = shape._webgl.dynamicFields[df];
      if(sp[attrib.name] !== undefined) {
        gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buf);
        gl.vertexAttribPointer(sp[attrib.name], attrib.numComponents, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp[attrib.name]);
      }
    }
    if(shape.isSolid()) {
      gl.enable(gl.CULL_FACE);
      if(shape.isCCW()) {
        gl.frontFace(gl.CCW);
      } else {
        gl.frontFace(gl.CW);
      }
    } else {
      gl.disable(gl.CULL_FACE);
    }
    sp.solid = (shape.isSolid() ? 1.0 : 0.0);
    for(var q = 0; q < shape._webgl.positions.length; q++) {
      if(sp.position !== undefined) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, shape._webgl.buffers[5 * q + 0]);
        gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 1]);
        gl.vertexAttribPointer(sp.position, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.position);
      }
      if(sp.normal !== undefined) {
        gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 2]);
        gl.vertexAttribPointer(sp.normal, 3, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.normal);
      }
      if(sp.texcoord !== undefined) {
        gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 3]);
        gl.vertexAttribPointer(sp.texcoord, shape._cf.geometry.node._mesh._numTexComponents, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.texcoord);
      }
      if(sp.color !== undefined) {
        gl.bindBuffer(gl.ARRAY_BUFFER, shape._webgl.buffers[5 * q + 4]);
        gl.vertexAttribPointer(sp.color, shape._cf.geometry.node._mesh._numColComponents, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(sp.color);
      }
      try {
        if(viewarea._points !== undefined && viewarea._points > 0) {
          var polyMode = (viewarea._points == 1) ? gl.POINTS : gl.LINES;
          if(shape._webgl.imageGeometry) {
            for(var i = 0, offset = 0; i < shape._cf.geometry.node._vf.vertexCount.length; i++) {
              gl.drawArrays(polyMode, offset, shape._cf.geometry.node._vf.vertexCount[i]);
              offset += shape._cf.geometry.node._vf.vertexCount[i];
            }
          } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) {
            gl.drawElements(polyMode, shape._webgl.indexLength, gl.UNSIGNED_SHORT, 0);
          } else {
            gl.drawElements(polyMode, shape._webgl.indexes[q].length, gl.UNSIGNED_SHORT, 0);
          }
        } else {
          if(shape._webgl.primType == gl.POINTS) {
            gl.drawArrays(gl.POINTS, 0, shape._webgl.positions[q].length / 3);
          } else {
            if(shape._webgl.indexes && shape._webgl.indexes[q]) {
              if(shape._webgl.imageGeometry) {
                for(var i = 0, offset = 0; i < shape._cf.geometry.node._vf.vertexCount.length; i++) {
                  gl.drawArrays(shape._webgl.primType[i], offset, shape._cf.geometry.node._vf.vertexCount[i]);
                  offset += shape._cf.geometry.node._vf.vertexCount[i];
                }
              } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.BinaryGeometry)) {
                gl.drawElements(shape._webgl.primType[0], shape._webgl.indexLength, gl.UNSIGNED_SHORT, 0);
              } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedTriangleStripSet) && shape._webgl.primType == gl.TRIANGLE_STRIP) {
                var indOff = shape._cf.geometry.node._indexOffset;
                for(var io = 1; io < indOff.length; io++) {
                  gl.drawElements(gl.TRIANGLE_STRIP, indOff[io] - indOff[io - 1], gl.UNSIGNED_SHORT, 2 * indOff[io - 1]);
                }
              } else {
                gl.drawElements(shape._webgl.primType, shape._webgl.indexes[q].length, gl.UNSIGNED_SHORT, 0);
              }
            }
          }
        }
      } catch(e) {
        x3dom.debug.logException(shape._DEF + " renderScene(): " + e);
      }
      if(sp.position !== undefined) {
        gl.disableVertexAttribArray(sp.position);
      }
      if(sp.normal !== undefined) {
        gl.disableVertexAttribArray(sp.normal);
      }
      if(sp.texcoord !== undefined) {
        gl.disableVertexAttribArray(sp.texcoord);
      }
      if(sp.color !== undefined) {
        gl.disableVertexAttribArray(sp.color);
      }
    }
    if(shape._webgl.indexes && shape._webgl.indexes[0]) {
      if(shape._webgl.imageGeometry) {
        for(var i = 0; i < shape._cf.geometry.node._vf.vertexCount.length; i++) {
          if(shape._webgl.primType[i] == gl.TRIANGLE_STRIP) this.numFaces += (shape._cf.geometry.node._vf.vertexCount[i] - 2);
          else this.numFaces += (shape._cf.geometry.node._vf.vertexCount[i] / 3);
        }
      } else {
        this.numFaces += shape._cf.geometry.node._mesh._numFaces;
      }
    }
    if(shape._webgl.imageGeometry) {
      for(var i = 0; i < shape._cf.geometry.node._vf.vertexCount.length; i++)
      this.numCoords += shape._cf.geometry.node._vf.vertexCount[i];
      this.numDrawCalls += shape._cf.geometry.node._vf.vertexCount.length;
    } else {
      this.numCoords += shape._cf.geometry.node._mesh._numCoords;
      if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedTriangleStripSet) && shape._webgl.primType == gl.TRIANGLE_STRIP) {
        this.numDrawCalls += shape._cf.geometry.node._indexOffset.length;
      } else this.numDrawCalls += 1;
    }
    for(cnt = 0; shape._webgl.texture !== undefined && cnt < shape._webgl.texture.length; cnt++) {
      if(shape._webgl.texture[cnt]) {
        tex = null;
        if(shape._cf.appearance.node._cf.texture.node) {
          tex = shape._cf.appearance.node._cf.texture.node.getTexture(cnt);
        }
        if(shape._webgl.texture[cnt].textureCubeReady && tex && x3dom.isa(tex, x3dom.nodeTypes.X3DEnvironmentTextureNode)) {
          gl.activeTexture(activeTex[cnt]);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
        } else {
          gl.activeTexture(activeTex[cnt]);
          gl.bindTexture(gl.TEXTURE_2D, null);
        }
      }
    }
    if(oneShadowExistsAlready) {
      gl.activeTexture(activeTex[cnt]);
      gl.bindTexture(gl.TEXTURE_2D, null);
    }
    for(df = 0; df < shape._webgl.dynamicFields.length; df++) {
      attrib = shape._webgl.dynamicFields[df];
      if(sp[attrib.name] !== undefined) {
        gl.disableVertexAttribArray(sp[attrib.name]);
      }
    }
  };
  Context.prototype.pickValue = function(viewarea, x, y, viewMat, sceneMat) {
    var gl = this.ctx3d;
    var scene = viewarea._scene;
    if(gl === null || scene === null || !scene._webgl || scene.drawableObjects === undefined || !scene.drawableObjects || scene._vf.pickMode.toLowerCase() === "box") {
      return false;
    }
    var mat_view, mat_scene;
    if(arguments.length > 4) {
      mat_view = viewMat;
      mat_scene = sceneMat;
    } else {
      mat_view = viewarea._last_mat_view;
      mat_scene = viewarea._last_mat_scene;
    }
    var pickMode = (scene._vf.pickMode.toLowerCase() === "color") ? 1 : ((scene._vf.pickMode.toLowerCase() === "texcoord") ? 2 : 0);
    var min = scene._lastMin;
    var max = scene._lastMax;
    this.renderPickingPass(gl, scene, mat_view, mat_scene, min, max, pickMode, x, y);
    var index = 0;
    if(index >= 0 && index < scene._webgl.fboPick.pixelData.length) {
      var pickPos = new x3dom.fields.SFVec3f(0, 0, 0);
      var charMax = (pickMode > 0) ? 1 : 255;
      pickPos.x = scene._webgl.fboPick.pixelData[index + 0] / charMax;
      pickPos.y = scene._webgl.fboPick.pixelData[index + 1] / charMax;
      pickPos.z = scene._webgl.fboPick.pixelData[index + 2] / charMax;
      if(pickMode === 0) {
        pickPos = pickPos.multComponents(max.subtract(min)).add(min);
      }
      var objId = 255 - scene._webgl.fboPick.pixelData[index + 3];
      if(objId > 0) {
        viewarea._pickingInfo.pickPos = pickPos;
        viewarea._pickingInfo.pickObj = x3dom.nodeTypes.Shape.idMap.nodeID[objId];
      } else {
        viewarea._pickingInfo.pickObj = null;
        viewarea._pickingInfo.lastClickObj = null;
      }
    }
    return true;
  };
  Context.prototype.renderScene = function(viewarea) {
    var gl = this.ctx3d;
    var scene = viewarea._scene;
    if(gl === null || scene === null) {
      return;
    }
    var rentex = viewarea._doc._nodeBag.renderTextures;
    var rt_tex, rtl_i, rtl_n = rentex.length;
    if(!scene._webgl) {
      scene._webgl = {};
      this.setupFgnds(gl, scene);
      scene._webgl.pickScale = 0.5;
      scene._webgl._currFboWidth = Math.round(this.canvas.width * scene._webgl.pickScale);
      scene._webgl._currFboHeight = Math.round(this.canvas.height * scene._webgl.pickScale);
      scene._webgl.fboPick = this.initFbo(gl, scene._webgl._currFboWidth, scene._webgl._currFboHeight, true);
      scene._webgl.fboPick.pixelData = null;
      scene._webgl.pickShader = getDefaultShaderProgram(gl, 'pick');
      scene._webgl.pickShaderIG = this.getShaderProgram(gl, ['vs-x3d-pickIG', 'fs-x3d-pick']);
      scene._webgl.pickColorShader = getDefaultShaderProgram(gl, 'vertexcolorUnlit');
      scene._webgl.pickTexCoordShader = getDefaultShaderProgram(gl, 'texcoordUnlit');
      scene._webgl.fboShadow = this.initFbo(gl, 1024, 1024, false);
      scene._webgl.shadowShader = getDefaultShaderProgram(gl, 'shadow');
      for(rtl_i = 0; rtl_i < rtl_n; rtl_i++) {
        rt_tex = rentex[rtl_i];
        rt_tex._webgl = {};
        rt_tex._webgl.fbo = this.initFbo(gl, rt_tex._vf.dimensions[0], rt_tex._vf.dimensions[1], false);
      }
      var min = x3dom.fields.SFVec3f.MAX();
      var max = x3dom.fields.SFVec3f.MIN();
      scene.getVolume(min, max, true);
      scene._lastMin = min;
      scene._lastMax = max;
      viewarea._last_mat_view = x3dom.fields.SFMatrix4f.identity();
      viewarea._last_mat_scene = x3dom.fields.SFMatrix4f.identity();
    } else {
      var fboWidth = Math.round(this.canvas.width * scene._webgl.pickScale);
      var fboHeight = Math.round(this.canvas.height * scene._webgl.pickScale);
      if(scene._webgl._currFboWidth !== fboWidth || scene._webgl._currFboHeight !== fboHeight) {
        scene._webgl._currFboWidth = fboWidth;
        scene._webgl._currFboHeight = fboHeight;
        scene._webgl.fboPick = this.initFbo(gl, fboWidth, fboHeight, true);
        scene._webgl.fboPick.pixelData = null;
        x3dom.debug.logInfo("Refreshed picking FBO to size (" + (fboWidth) + ", " + (fboHeight) + ")");
      }
    }
    var bgnd = scene.getBackground();
    this.setupScene(gl, bgnd);
    var t0, t1;
    this.numFaces = 0;
    this.numCoords = 0;
    this.numDrawCalls = 0;
    scene.drawableObjects = null;
    scene.drawableObjects = [];
    scene.drawableObjects.LODs = [];
    scene.drawableObjects.Billboards = [];
    t0 = new Date().getTime();
    scene.collectDrawableObjects(x3dom.fields.SFMatrix4f.identity(), scene.drawableObjects);
    t1 = new Date().getTime() - t0;
    if(this.canvas.parent.statDiv) {
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("traverse: " + t1));
    }
    var mat_view = viewarea.getViewMatrix();
    if(!viewarea._last_mat_view.equals(mat_view)) {
      var e_viewpoint = viewarea._scene.getViewpoint();
      var e_eventType = "viewpointChanged";
      try {
        if(e_viewpoint._xmlNode && (e_viewpoint._xmlNode["on" + e_eventType] || e_viewpoint._xmlNode.hasAttribute("on" + e_eventType) || e_viewpoint._listeners[e_eventType])) {
          var e_viewtrafo = e_viewpoint.getCurrentTransform();
          e_viewtrafo = e_viewtrafo.inverse().mult(mat_view);
          var e_mat = e_viewtrafo.inverse();
          var e_rotation = new x3dom.fields.Quaternion(0, 0, 1, 0);
          e_rotation.setValue(e_mat);
          var e_translation = e_mat.e3();
          var e_event = {
            target: e_viewpoint._xmlNode,
            type: e_eventType,
            matrix: e_viewtrafo,
            position: e_translation,
            orientation: e_rotation.toAxisAngle(),
            cancelBubble: false,
            stopPropagation: function() {
              this.cancelBubble = true;
            }
          };
          e_viewpoint.callEvtHandler(e_eventType, e_event);
        }
      } catch(e_e) {
        x3dom.debug.logException(e_e);
      }
    }
    viewarea._last_mat_view = mat_view;
    var mat_scene = viewarea.getWCtoCCMatrix();
    viewarea._last_mat_scene = mat_scene;
    t0 = new Date().getTime();
    var zPos = [];
    var i, m, n = scene.drawableObjects.length;
    var center, trafo, obj3d;
    for(i = 0; i < n; i++) {
      trafo = scene.drawableObjects[i][0];
      obj3d = scene.drawableObjects[i][1];
      this.setupShape(gl, obj3d, viewarea);
      center = obj3d.getCenter();
      center = trafo.multMatrixPnt(center);
      center = mat_view.multMatrixPnt(center);
      zPos[i] = [i, center.z];
    }
    zPos.sort(function(a, b) {
      return a[1] - b[1];
    });
    m = scene.drawableObjects.Billboards.length;
    n = scene.drawableObjects.LODs.length;
    if(m || n) {
      center = new x3dom.fields.SFVec3f(0, 0, 0);
      center = mat_view.inverse().multMatrixPnt(center);
    }
    for(i = 0; i < n; i++) {
      trafo = scene.drawableObjects.LODs[i][0];
      obj3d = scene.drawableObjects.LODs[i][1];
      if(obj3d) {
        obj3d._eye = trafo.inverse().multMatrixPnt(center);
      }
    }
    for(i = 0; i < m; i++) {
      trafo = scene.drawableObjects.Billboards[i][0];
      obj3d = scene.drawableObjects.Billboards[i][1];
      if(obj3d) {
        var mat_view_model = mat_view.mult(trafo);
        obj3d._eye = trafo.inverse().multMatrixPnt(center);
        obj3d._eyeViewUp = new x3dom.fields.SFVec3f(mat_view_model._10, mat_view_model._11, mat_view_model._12);
        obj3d._eyeLook = new x3dom.fields.SFVec3f(mat_view_model._20, mat_view_model._21, mat_view_model._22);
      }
    }
    t1 = new Date().getTime() - t0;
    if(this.canvas.parent.statDiv) {
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("sort: " + t1));
    }
    var slights = viewarea.getLights();
    var numLights = slights.length;
    var oneShadowExistsAlready = false;
    var mat_light;
    for(var p = 0; p < numLights; p++) {
      if(slights[p]._vf.shadowIntensity > 0.0 && !oneShadowExistsAlready) {
        oneShadowExistsAlready = true;
        t0 = new Date().getTime();
        var lightMatrix = viewarea.getLightMatrix()[0];
        mat_light = viewarea.getWCtoLCMatrix(lightMatrix);
        this.renderShadowPass(gl, scene, lightMatrix, mat_light);
        t1 = new Date().getTime() - t0;
        if(this.canvas.parent.statDiv) {
          this.canvas.parent.statDiv.appendChild(document.createElement("br"));
          this.canvas.parent.statDiv.appendChild(document.createTextNode("shadow: " + t1));
        }
      }
    }
    for(rtl_i = 0; rtl_i < rtl_n; rtl_i++) {
      this.renderRTPass(gl, viewarea, rentex[rtl_i]);
    }
    t0 = new Date().getTime();
    gl.viewport(0, 0, this.canvas.width, this.canvas.height);
    bgnd._webgl.render(gl, mat_scene);
    gl.depthMask(true);
    gl.depthFunc(gl.LEQUAL);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
    gl.enable(gl.BLEND);
    var activeTex = [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3, gl.TEXTURE4, gl.TEXTURE5, gl.TEXTURE6, gl.TEXTURE7];
    for(i = 0, n = zPos.length; i < n; i++) {
      var obj = scene.drawableObjects[zPos[i][0]];
      var needEnableBlending = false;
      var needEnableDepthMask = false;
      if(obj[1]._cf.appearance.node._cf.blendMode.node && obj[1]._cf.appearance.node._cf.blendMode.node._vf.srcFactor.toLowerCase() === "none" && obj[1]._cf.appearance.node._cf.blendMode.node._vf.destFactor.toLowerCase() === "none") {
        needEnableBlending = true;
        gl.disable(gl.BLEND);
      }
      if(obj[1]._cf.appearance.node._cf.depthMode.node && obj[1]._cf.appearance.node._cf.depthMode.node._vf.readOnly === true) {
        needEnableDepthMask = true;
        gl.depthMask(false);
      }
      this.renderShape(obj[0], obj[1], viewarea, slights, numLights, mat_view, mat_scene, mat_light, gl, activeTex, oneShadowExistsAlready);
      if(needEnableBlending) {
        gl.enable(gl.BLEND);
      }
      if(needEnableDepthMask) {
        gl.depthMask(true);
      }
    }
    gl.disable(gl.BLEND);
    gl.disable(gl.DEPTH_TEST);
    if(viewarea._visDbgBuf !== undefined && viewarea._visDbgBuf) {
      if(scene._vf.pickMode.toLowerCase() === "idbuf" || scene._vf.pickMode.toLowerCase() === "color" || scene._vf.pickMode.toLowerCase() === "texcoord") {
        gl.viewport(0, 3 * this.canvas.height / 4, this.canvas.width / 4, this.canvas.height / 4);
        scene._fgnd._webgl.render(gl, scene._webgl.fboPick.tex);
      }
      if(oneShadowExistsAlready) {
        gl.viewport(this.canvas.width / 4, 3 * this.canvas.height / 4, this.canvas.width / 4, this.canvas.height / 4);
        scene._fgnd._webgl.render(gl, scene._webgl.fboShadow.tex);
      }
    }
    gl.flush();
    t1 = new Date().getTime() - t0;
    if(this.canvas.parent.statDiv) {
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("render: " + t1));
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("#Tris: " + this.numFaces));
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("#Pnts: " + this.numCoords));
      this.canvas.parent.statDiv.appendChild(document.createElement("br"));
      this.canvas.parent.statDiv.appendChild(document.createTextNode("#DrawCalls: " + this.numDrawCalls));
    }
  };
  Context.prototype.renderRTPass = function(gl, viewarea, rt) {
    var scene = viewarea._scene;
    var bgnd = null;
    var mat_view = rt.getViewMatrix();
    var mat_scene = rt.getWCtoCCMatrix();
    var lightMatrix = viewarea.getLightMatrix()[0];
    var mat_light = viewarea.getWCtoLCMatrix(lightMatrix);
    var i, n, m = rt._cf.excludeNodes.nodes.length;
    var arr = new Array(m);
    for(i = 0; i < m; i++) {
      var render = rt._cf.excludeNodes.nodes[i]._vf.render;
      if(render === undefined) {
        arr[i] = -1;
      } else {
        if(render === true) {
          arr[i] = 1;
        } else {
          arr[i] = 0;
        }
      }
      rt._cf.excludeNodes.nodes[i]._vf.render = false;
    }
    gl.bindFramebuffer(gl.FRAMEBUFFER, rt._webgl.fbo.fbo);
    gl.viewport(0, 0, rt._webgl.fbo.width, rt._webgl.fbo.height);
    if(rt._cf.background.node === null) {
      gl.clearColor(0, 0, 0, 1);
      gl.clearDepth(1.0);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
    } else if(rt._cf.background.node === scene.getBackground()) {
      bgnd = scene.getBackground();
      bgnd._webgl.render(gl, mat_scene);
    } else {
      bgnd = rt._cf.background.node;
      this.setupScene(gl, bgnd);
      bgnd._webgl.render(gl, mat_scene);
    }
    gl.depthFunc(gl.LEQUAL);
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);
    gl.enable(gl.BLEND);
    var slights = viewarea.getLights();
    var numLights = slights.length;
    var oneShadowExistsAlready = false;
    var activeTex = [gl.TEXTURE0, gl.TEXTURE1, gl.TEXTURE2, gl.TEXTURE3, gl.TEXTURE4, gl.TEXTURE5, gl.TEXTURE6, gl.TEXTURE7];
    var transform, shape;
    var locScene = rt._cf.scene.node;
    if(!locScene || locScene === scene) {
      n = scene.drawableObjects.length;
      for(i = 0; i < n; i++) {
        transform = scene.drawableObjects[i][0];
        shape = scene.drawableObjects[i][1];
        if(shape._vf.render !== undefined && shape._vf.render === false) {
          continue;
        }
        this.renderShape(transform, shape, viewarea, slights, numLights, mat_view, mat_scene, mat_light, gl, activeTex, oneShadowExistsAlready);
      }
    } else {
      locScene.drawableObjects = [];
      locScene.collectDrawableObjects(x3dom.fields.SFMatrix4f.identity(), locScene.drawableObjects);
      n = locScene.drawableObjects.length;
      for(i = 0; i < n; i++) {
        transform = locScene.drawableObjects[i][0];
        shape = locScene.drawableObjects[i][1];
        if(shape._vf.render !== undefined && shape._vf.render === false) {
          continue;
        }
        this.setupShape(gl, shape, viewarea);
        this.renderShape(transform, shape, viewarea, slights, numLights, mat_view, mat_scene, mat_light, gl, activeTex, oneShadowExistsAlready);
      }
    }
    gl.disable(gl.BLEND);
    gl.disable(gl.DEPTH_TEST);
    gl.flush();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    for(i = 0; i < m; i++) {
      if(arr[i] !== 0) {
        rt._cf.excludeNodes.nodes[i]._vf.render = true;
      }
    }
  };
  Context.prototype.shutdown = function(viewarea) {
    var gl = this.ctx3d;
    var attrib;
    var scene;
    if(gl === null || scene === null || !scene || scene.drawableObjects === null) {
      return;
    }
    scene = viewarea._scene;
    scene.collectDrawableObjects(x3dom.fields.SFMatrix4f.identity(), scene.drawableObjects);
    var bgnd = scene.getBackground();
    if(bgnd._webgl.texture !== undefined && bgnd._webgl.texture) {
      gl.deleteTexture(bgnd._webgl.texture);
    }
    if(bgnd._webgl.shader.position !== undefined) {
      gl.deleteBuffer(bgnd._webgl.buffers[1]);
      gl.deleteBuffer(bgnd._webgl.buffers[0]);
    }
    for(var i = 0, n = scene.drawableObjects.length; i < n; i++) {
      var shape = scene.drawableObjects[i][1];
      var sp = shape._webgl.shader;
      for(var cnt = 0; shape._webgl.texture !== undefined && cnt < shape._webgl.texture.length; cnt++) {
        if(shape._webgl.texture[cnt]) {
          gl.deleteTexture(shape._webgl.texture[cnt]);
        }
      }
      for(var q = 0; q < shape._webgl.positions.length; q++) {
        if(sp.position !== undefined) {
          gl.deleteBuffer(shape._webgl.buffers[5 * q + 1]);
          gl.deleteBuffer(shape._webgl.buffers[5 * q + 0]);
        }
        if(sp.normal !== undefined) {
          gl.deleteBuffer(shape._webgl.buffers[5 * q + 2]);
        }
        if(sp.texcoord !== undefined) {
          gl.deleteBuffer(shape._webgl.buffers[5 * q + 3]);
        }
        if(sp.color !== undefined) {
          gl.deleteBuffer(shape._webgl.buffers[5 * q + 4]);
        }
      }
      for(var df = 0; df < shape._webgl.dynamicFields.length; df++) {
        attrib = shape._webgl.dynamicFields[df];
        if(sp[attrib.name] !== undefined) {
          gl.deleteBuffer(attrib.buf);
        }
      }
      shape._webgl = null;
    }
  };
  Context.prototype.loadCubeMap = function(gl, url, doc, bgnd) {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
    var faces;
    if(bgnd) {
      faces = [gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X];
    } else {
      faces = [gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_X];
    }
    texture.pendingTextureLoads = -1;
    texture.textureCubeReady = false;
    for(var i = 0; i < faces.length; i++) {
      var face = faces[i];
      var image = new Image();
      image.crossOrigin = '';
      texture.pendingTextureLoads++;
      doc.downloadCount += 1;
      image.onload = function(texture, face, image, swap) {
        return function() {
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, swap);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
          gl.texImage2D(face, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
          gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
          texture.pendingTextureLoads--;
          doc.downloadCount -= 1;
          if(texture.pendingTextureLoads < 0) {
            texture.textureCubeReady = true;
            x3dom.debug.logInfo("Loading CubeMap finished...");
            doc.needRender = true;
          }
        };
      }(texture, face, image, (bgnd && (i <= 1 || i >= 4)));
      image.onerror = function() {
        doc.downloadCount -= 1;
        x3dom.debug.logError("Can't load CubeMap!");
      };
      image.src = url[i];
    }
    return texture;
  };
  Context.prototype.emptyTexImage2D = function(gl, internalFormat, width, height, format, type) {
    try {
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, null);
    } catch(e) {
      var bytes = 3;
      switch(internalFormat) {
      case gl.DEPTH_COMPONENT:
        bytes = 3;
        break;
      case gl.ALPHA:
        bytes = 1;
        break;
      case gl.RGB:
        bytes = 3;
        break;
      case gl.RGBA:
        bytes = 4;
        break;
      case gl.LUMINANCE:
        bytes = 1;
        break;
      case gl.LUMINANCE_ALPHA:
        bytes = 2;
        break;
      }
      var pixels = new Uint8Array(width * height * bytes);
      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, pixels);
    }
  };
  Context.prototype.initTex = function(gl, w, h, nearest) {
    var tex = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, tex);
    this.emptyTexImage2D(gl, gl.RGBA, w, h, gl.RGBA, gl.UNSIGNED_BYTE);
    if(nearest) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    }
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindTexture(gl.TEXTURE_2D, null);
    tex.width = w;
    tex.height = h;
    return tex;
  };
  Context.prototype.initFbo = function(gl, w, h, nearest) {
    var status = 0;
    var fbo = gl.createFramebuffer();
    var rb = gl.createRenderbuffer();
    var tex = this.initTex(gl, w, h, nearest);
    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
    gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    x3dom.debug.logInfo("FBO-Status: " + status);
    var r = {};
    r.fbo = fbo;
    r.rbo = rb;
    r.tex = tex;
    r.width = w;
    r.height = h;
    return r;
  };
  return setupContext;
})();
x3dom.bridge = {
  setFlashReady: function(driver, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.isFlashReady = true;
    x3dom.debug.logInfo('Flash is ready for rendering (' + driver + ')');
  },
  onMouseDown: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onMousePress(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onMouseUp: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onMouseRelease(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onMouseOver: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onMouseOver(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onMouseOut: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onMouseOut(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onDoubleClick: function(x, y, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onDoubleClick(x3dCanvas.gl, x, y);
    x3dCanvas.doc.needRender = true;
    x3dom.debug.logInfo("dblClick");
  },
  onMouseDrag: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onDrag(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onMouseMove: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onMove(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onMouseWheel: function(x, y, button, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    x3dCanvas.doc.onDrag(x3dCanvas.gl, x, y, button);
    x3dCanvas.doc.needRender = true;
  },
  onKeyDown: function(charCode, canvas) {
    var x3dCanvas = x3dom.canvases[canvas];
    var keysEnabled = x3dCanvas.x3dElem.getAttribute("keysEnabled");
    if(!keysEnabled || keysEnabled.toLowerCase() === "true") {
      x3dCanvas.doc.onKeyPress(charCode);
    }
    x3dCanvas.doc.needRender = true;
  }
};
x3dom.gfx_flash = (function() {
  function Context(object, name) {
    this.object = object;
    this.name = name;
  };

  function setupContext(object) {
    return new Context(object, 'flash');
  };
  Context.prototype.getName = function() {
    return this.name;
  };
  Context.prototype.renderScene = function(viewarea) {
    var scene = viewarea._scene;
    this.setupScene(scene, viewarea);
    var background = scene.getBackground();
    this.setupBackground(background);
    scene.drawableObjects = null;
    scene.drawableObjects = [];
    scene.drawableObjects.LODs = [];
    scene.drawableObjects.Billboards = [];
    scene.collectDrawableObjects(x3dom.fields.SFMatrix4f.identity(), scene.drawableObjects);
    var numDrawableObjects = scene.drawableObjects.length;
    if(numDrawableObjects > 0) {
      var RefList = [];
      for(var i = 0; i < numDrawableObjects; i++) {
        var trafo = scene.drawableObjects[i][0];
        var obj3d = scene.drawableObjects[i][1];
        if(RefList[obj3d._objectID] != undefined) {
          RefList[obj3d._objectID]++;
        } else {
          RefList[obj3d._objectID] = 0;
        }
        this.setupShape(obj3d, trafo, RefList[obj3d._objectID]);
      }
    }
    this.object.renderScene();
  };
  Context.prototype.setupScene = function(scene, viewarea) {
    var mat_view = viewarea.getViewMatrix();
    this.object.setViewMatrix({
      viewMatrix: mat_view.toGL()
    });
    var mat_proj = viewarea.getProjectionMatrix();
    this.object.setProjectionMatrix({
      projectionMatrix: mat_proj.toGL()
    });
    var nav = scene.getNavigationInfo();
    if(nav._vf.headlight) {
      this.object.setLights({
        idx: 0,
        type: 0,
        on: 1.0,
        color: [1.0, 1.0, 1.0],
        intensity: 1.0,
        ambientIntensity: 0.0,
        direction: [0.0, 0.0, 1.0],
        attenuation: [1.0, 1.0, 1.0],
        location: [1.0, 1.0, 1.0],
        radius: 0.0,
        beamWidth: 0.0,
        cutOffAngle: 0.0
      });
    }
    var lights = viewarea.getLights();
    for(var i = 0; i < lights.length; i++) {
      if(lights[i]._dirty) {
        if(x3dom.isa(lights[i], x3dom.nodeTypes.DirectionalLight)) {
          x3dom.debug.logInfo(lights[i]._lightID);
        } else if(x3dom.isa(lights[i], x3dom.nodeTypes.PointLight)) {} else if(x3dom.isa(lights[i], x3dom.nodeTypes.SpotLight)) {}
        lights[i]._dirty = false;
      }
    }
  };
  Context.prototype.setupBackground = function(background) {
    if(background._dirty) {
      this.object.setBackground({
        texURLs: background.getTexUrl(),
        skyAngle: background._vf.skyAngle,
        skyColor: background.getSkyColor().toGL(),
        groundAngle: background._vf.groundAngle,
        groundColor: background.getGroundColor().toGL(),
        transparency: background.getTransparency()
      });
      background._dirty = false;
    }
  };
  Context.prototype.setupShape = function(shape, trafo, refID) {
    if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.PointSet)) {
      x3dom.debug.logError("Flash backend don't support PointSets yet");
      return;
    } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.IndexedLineSet)) {
      x3dom.debug.logError("Flash backend don't support LineSets yet");
      return;
    } else if(x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.Text)) {
      this.setupText(shape, trafo, refID);
    } else {
      this.setupIndexedFaceSet(shape, trafo, refID);
    }
  };
  Context.prototype.setupIndexedFaceSet = function(shape, trafo, refID) {
    this.object.setMeshTransform({
      id: shape._objectID,
      refID: refID,
      transform: trafo.toGL()
    });
    if(refID == 0) {
      var isImageGeometry = x3dom.isa(shape._cf.geometry.node, x3dom.nodeTypes.ImageGeometry);
      if(shape._dirty.indexes === true) {
        if(!isImageGeometry) {
          for(var i = 0; i < shape._cf.geometry.node._mesh._indices.length; i++) {
            this.object.setMeshIndices({
              id: shape._objectID,
              idx: i,
              indices: shape._cf.geometry.node._mesh._indices[i]
            });
          }
        }
        shape._dirty.indexes = false;
      }
      if(shape._dirty.positions === true) {
        if(!isImageGeometry) {
          for(var i = 0; i < shape._cf.geometry.node._mesh._positions.length; i++) {
            this.object.setMeshVertices({
              id: shape._objectID,
              idx: i,
              vertices: shape._cf.geometry.node._mesh._positions[i]
            });
          }
        } else {
          this.object.setMeshVerticesTexture({
            id: shape._objectID,
            idx: 0,
            bboxMin: shape._cf.geometry.node.getMin().toGL(),
            bboxMax: shape._cf.geometry.node.getMax().toGL(),
            bboxCenter: shape._cf.geometry.node.getCenter(),
            primType: shape._cf.geometry.node._vf.primType,
            vertexCount: shape._cf.geometry.node._vf.vertexCount,
            coordinateTexture0: shape._cf.geometry.node.getCoordinateTextureURL(0),
            coordinateTexture1: shape._cf.geometry.node.getCoordinateTextureURL(1)
          });
        }
        shape._dirty.positions = false;
      }
      if(shape._dirty.normals === true) {
        if(!isImageGeometry) {
          if(shape._cf.geometry.node._mesh._normals[0].length) {
            for(var i = 0; i < shape._cf.geometry.node._mesh._normals.length; i++) {
              this.object.setMeshNormals({
                id: shape._objectID,
                idx: i,
                normals: shape._cf.geometry.node._mesh._normals[i]
              });
            }
          }
        } else {
          this.object.setMeshNormalsTexture({
            id: shape._objectID,
            idx: 0,
            normalTexture: shape._cf.geometry.node.getNormalTextureURL(0)
          });
        }
        shape._dirty.normals = false;
      }
      if(shape._dirty.colors === true) {
        if(!isImageGeometry) {
          if(shape._cf.geometry.node._mesh._colors[0].length) {
            for(var i = 0; i < shape._cf.geometry.node._mesh._colors.length; i++) {
              this.object.setMeshColors({
                id: shape._objectID,
                idx: i,
                colors: shape._cf.geometry.node._mesh._colors[i],
                components: shape._cf.geometry.node._mesh._numColComponents
              });
            }
          }
        } else {
          this.object.setMeshColorsTexture({
            id: shape._objectID,
            idx: 0,
            colorTexture: shape._cf.geometry.node.getColorTextureURL(),
            components: shape._cf.geometry.node._mesh._numColComponents
          });
        }
        shape._dirty.colors = false;
      }
      if(shape._dirty.texcoords === true) {
        if(!isImageGeometry) {
          if(shape._cf.geometry.node._mesh._texCoords[0].length) {
            for(var i = 0; i < shape._cf.geometry.node._mesh._texCoords.length; i++) {
              this.object.setMeshTexCoords({
                id: shape._objectID,
                idx: i,
                texCoords: shape._cf.geometry.node._mesh._texCoords[i]
              });
            }
          }
        } else {
          this.object.setMeshTexCoordsTexture({
            id: shape._objectID,
            idx: 0,
            texCoordTexture: shape._cf.geometry.node.getTexCoordTextureURL()
          });
        }
        shape._dirty.texcoords = false;
      }
      if(shape._dirty.material === true) {
        var material = shape._cf.appearance.node._cf.material.node;
        this.object.setMeshMaterial({
          id: shape._objectID,
          ambientIntensity: material._vf.ambientIntensity,
          diffuseColor: material._vf.diffuseColor.toGL(),
          emissiveColor: material._vf.emissiveColor.toGL(),
          shininess: material._vf.shininess,
          specularColor: material._vf.specularColor.toGL(),
          transparency: material._vf.transparency
        });
        shape._dirty.material = false;
      }
      if(shape._dirty.texture === true) {
        var texture = shape._cf.appearance.node._cf.texture.node;
        if(texture) {
          var childTex = (texture._video !== undefined && texture._video !== null && texture._needPerFrameUpdate !== undefined && texture._needPerFrameUpdate === true);
          if(x3dom.isa(texture, x3dom.nodeTypes.PixelTexture)) {
            this.object.setPixelTexture({
              id: shape._objectID,
              width: texture._vf.image.width,
              height: texture._vf.image.height,
              comp: texture._vf.image.comp,
              pixels: texture._vf.image.toGL()
            });
          } else if(texture._isCanvas && texture._canvas) {} else if(x3dom.isa(texture, x3dom.nodeTypes.ComposedCubeMapTexture)) {
            this.object.setCubeTexture({
              id: shape._objectID,
              texURLs: texture.getTexUrl()
            });
          } else if(x3dom.isa(texture, x3dom.nodeTypes.MultiTexture)) {
            x3dom.debug.logError("Flash backend don't support MultiTextures yet");
          } else if(x3dom.isa(texture, x3dom.nodeTypes.MovieTexture) || childTex) {
            x3dom.debug.logError("Flash backend don't support MovieTextures yet");
          } else {
            this.object.setMeshTexture({
              id: shape._objectID,
              origChannelCount: texture._vf.origChannelCount,
              repeatS: texture._vf.repeatS,
              repeatT: texture._vf.repeatT,
              url: texture._vf.url[0]
            });
          }
        }
        shape._dirty.texture = false;
      }
      this.object.setMeshSolid({
        id: shape._objectID,
        solid: shape.isSolid()
      });
      if(shape._cf.geometry.node._cf.texCoord !== undefined && shape._cf.geometry.node._cf.texCoord.node !== null && !x3dom.isa(shape._cf.geometry.node._cf.texCoord.node, x3dom.nodeTypes.X3DTextureNode) && shape._cf.geometry.node._cf.texCoord.node._vf.mode) {
        var texMode = shape._cf.geometry.node._cf.texCoord.node._vf.mode;
        if(texMode.toLowerCase() == "sphere") {
          this.object.setSphereMapping({
            id: shape._objectID,
            sphereMapping: 1
          });
        } else {
          this.object.setSphereMapping({
            id: shape._objectID,
            sphereMapping: 0
          });
        }
      } else {
        this.object.setSphereMapping({
          id: shape._objectID,
          sphereMapping: 0
        });
      }
    }
  };
  Context.prototype.setupText = function(shape, trafo, refID) {
    this.object.setMeshTransform({
      id: shape._objectID,
      refID: refID,
      transform: trafo.toGL()
    });
    if(refID == 0) {
      if(shape._dirty.text === true) {
        var fontStyleNode = shape._cf.geometry.node._cf.fontStyle.node;
        if(fontStyleNode === null) {
          this.object.setText({
            id: shape._objectID,
            text: shape._cf.geometry.node._vf.string,
            fontFamily: ['SERIF'],
            fontStyle: "PLAIN",
            fontAlign: "BEGIN",
            fontSize: 32,
            fontSpacing: 1.0,
            fontHorizontal: true,
            fontLanguage: "",
            fontLeftToRight: true,
            fontTopToBottom: true
          });
        } else {
          this.object.setText({
            id: shape._objectID,
            text: shape._cf.geometry.node._vf.string,
            fontFamily: fontStyleNode._vf.family.toString(),
            fontStyle: fontStyleNode._vf.style.toString(),
            fontAlign: fontStyleNode._vf.justify.toString(),
            fontSize: fontStyleNode._vf.size,
            fontSpacing: fontStyleNode._vf.spacing,
            fontHorizontal: fontStyleNode._vf.horizontal,
            fontLanguage: fontStyleNode._vf.language,
            fontLeftToRight: fontStyleNode._vf.leftToRight,
            fontTopToBottom: fontStyleNode._vf.topToBottom
          });
        }
        shape._dirty.text = false;
      }
      if(shape._dirty.material === true) {
        var material = shape._cf.appearance.node._cf.material.node;
        this.object.setMeshMaterial({
          id: shape._objectID,
          ambientIntensity: material._vf.ambientIntensity,
          diffuseColor: material._vf.diffuseColor.toGL(),
          emissiveColor: material._vf.emissiveColor.toGL(),
          shininess: material._vf.shininess,
          specularColor: material._vf.specularColor.toGL(),
          transparency: material._vf.transparency
        });
        shape._dirty.material = false;
      }
      this.object.setMeshSolid({
        id: shape._objectID,
        solid: shape.isSolid()
      });
    }
  };
  Context.prototype.pickValue = function(viewarea, x, y, viewMat, sceneMat) {
    var scene = viewarea._scene;
    if(this.object === null || scene === null || scene.drawableObjects === undefined || !scene.drawableObjects || scene._vf.pickMode.toLowerCase() === "box") {
      return false;
    }
    var pickMode = (scene._vf.pickMode.toLowerCase() === "color") ? 1 : ((scene._vf.pickMode.toLowerCase() === "texcoord") ? 2 : 0);
    var data = this.object.pickValue({
      pickMode: pickMode
    });
    if(data.objID > 0) {
      viewarea._pickingInfo.pickPos = new x3dom.fields.SFVec3f(data.pickPosX, data.pickPosY, data.pickPosZ);
      viewarea._pickingInfo.pickObj = x3dom.nodeTypes.Shape.idMap.nodeID[data.objID];
    } else {
      viewarea._pickingInfo.pickObj = null;
      viewarea._pickingInfo.lastClickObj = null;
    }
    return true;
  };
  Context.prototype.shutdown = function(viewarea) {};
  return setupContext;
})();
x3dom.X3DDocument = function(canvas, ctx, settings) {
  this.properties = settings;
  this.canvas = canvas;
  this.ctx = ctx;
  this.needRender = true;
  this._scene = null;
  this._viewarea = null;
  this._nodeBag = {
    timer: [],
    lights: [],
    clipPlanes: [],
    followers: [],
    trans: [],
    renderTextures: [],
    viewarea: []
  };
  this.downloadCount = 0;
  this.onload = function() {};
  this.onerror = function() {};
};
x3dom.X3DDocument.prototype.load = function(uri, sceneElemPos) {
  var uri_docs = {};
  var queued_uris = [uri];
  var doc = this;

  function next_step() {
    if(queued_uris.length === 0) {
      doc._setup(uri_docs[uri], uri_docs, sceneElemPos);
      doc.onload();
      return;
    }
    var next_uri = queued_uris.shift();
    if(x3dom.isX3DElement(next_uri) && (next_uri.localName.toLowerCase() === 'x3d' || next_uri.localName.toLowerCase() === 'websg')) {
      uri_docs[next_uri] = next_uri;
      next_step();
    }
  }
  next_step();
};
x3dom.findScene = function(x3dElem) {
  var sceneElems = [];
  for(var i = 0; i < x3dElem.childNodes.length; i++) {
    var sceneElem = x3dElem.childNodes[i];
    if(sceneElem && sceneElem.localName && sceneElem.localName.toLowerCase() === "scene") {
      sceneElems.push(sceneElem);
    }
  }
  if(sceneElems.length > 1) {
    x3dom.debug.logError("X3D element has more than one Scene child (has " + x3dElem.childNodes.length + ").");
  } else {
    return sceneElems[0];
  }
  return null;
};
x3dom.X3DDocument.prototype._setup = function(sceneDoc, uriDocs, sceneElemPos) {
  var doc = this;
  var domEventListener = {
    onAttrModified: function(e) {
      if('_x3domNode' in e.target) {
        var attrToString = {
          1: "MODIFICATION",
          2: "ADDITION",
          3: "REMOVAL"
        };
        e.target._x3domNode.updateField(e.attrName, e.newValue);
        doc.needRender = true;
      }
    },
    onNodeRemoved: function(e) {
      if('_x3domNode' in e.target.parentNode && '_x3domNode' in e.target) {
        var parent = e.target.parentNode._x3domNode;
        var child = e.target._x3domNode;
        if(parent) {
          parent.removeChild(child);
          doc.needRender = true;
        }
      }
    },
    onNodeInserted: function(e) {
      if('_x3domNode' in e.target.parentNode) {
        if(e.target.parentNode.tagName == 'Inline' || e.target.parentNode.tagName == 'INLINE' || e.target.parentNode.tagName == 'inline') {
          return;
        } else {
          var parent = e.target.parentNode._x3domNode;
          var child = e.target;
          if(parent._nameSpace) {
            var newNode = parent._nameSpace.setupTree(child);
            parent.addChild(newNode, child.getAttribute("containerField"));
            doc.needRender = true;
          } else {
            x3dom.debug.logWarning("No _nameSpace in onNodeInserted");
          }
        }
      }
    }
  };
  sceneDoc.addEventListener('DOMNodeRemoved', domEventListener.onNodeRemoved, true);
  sceneDoc.addEventListener('DOMNodeInserted', domEventListener.onNodeInserted, true);
  if((x3dom.userAgentFeature.supportsDOMAttrModified === true)) {
    sceneDoc.addEventListener('DOMAttrModified', domEventListener.onAttrModified, true);
  }
  var sceneElem = x3dom.findScene(sceneDoc);
  this._bindableBag = new x3dom.BindableBag(this);
  var nameSpace = new x3dom.NodeNameSpace("scene", doc);
  var scene = nameSpace.setupTree(sceneElem);
  this._scene = scene;
  this._bindableBag.setRefNode(scene);
  this._viewarea = new x3dom.Viewarea(this, scene);
  this._viewarea._width = this.canvas.width;
  this._viewarea._height = this.canvas.height;
};
x3dom.X3DDocument.prototype.advanceTime = function(t) {
  var that;
  var i;
  if(this._nodeBag.timer.length) {
    this.needRender = true;
    for(i = 0; i < this._nodeBag.timer.length; i++) {
      this._nodeBag.timer[i].onframe(t);
    }
  }
  if(this._nodeBag.followers.length) {
    that = this;
    for(i = 0; i < this._nodeBag.followers.length; i++) {
      this.needRender |= this._nodeBag.followers[i].tick(t);
    }
  }
  if(this._nodeBag.trans.length) {
    that = this;
    for(i = 0; i < this._nodeBag.trans.length; i++) {
      this.needRender |= this._nodeBag.trans[i].tick(t);
    }
  }
  if(this._nodeBag.viewarea.length) {
    that = this;
    for(i = 0; i < this._nodeBag.viewarea.length; i++) {
      this.needRender |= this._nodeBag.viewarea[i].tick(t);
    }
  }
};
x3dom.X3DDocument.prototype.render = function(ctx) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.renderScene(this._viewarea);
};
x3dom.X3DDocument.prototype.onMove = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onMove(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onMoveView = function(ctx, translation, rotation) {
  if(!ctx || !this._viewarea) {
    return;
  }
  this._viewarea.onMoveView(translation, rotation);
};
x3dom.X3DDocument.prototype.onDrag = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onDrag(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onMousePress = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  var min = x3dom.fields.SFVec3f.MAX();
  var max = x3dom.fields.SFVec3f.MIN();
  this._viewarea._scene.getVolume(min, max, true);
  this._viewarea._scene._lastMin = min;
  this._viewarea._scene._lastMax = max;
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onMousePress(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onMouseRelease = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onMouseRelease(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onMouseOver = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onMouseOver(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onMouseOut = function(ctx, x, y, buttonState) {
  if(!ctx || !this._viewarea) {
    return;
  }
  ctx.pickValue(this._viewarea, x, y);
  this._viewarea.onMouseOut(x, y, buttonState);
};
x3dom.X3DDocument.prototype.onDoubleClick = function(ctx, x, y) {
  if(!ctx || !this._viewarea) {
    return;
  }
  this._viewarea.onDoubleClick(x, y);
};
x3dom.X3DDocument.prototype.onTouchMove = function(ctx, touch) {
  if(!ctx || !this._viewarea) {
    return;
  }
  x3dom.debug.logWarning("onTouchMove not implemented");
};
x3dom.X3DDocument.prototype.onKeyDown = function(keyCode) {
  switch(keyCode) {
  case 37:
    this._viewarea.strafeLeft();
    break;
  case 38:
    this._viewarea.moveFwd();
    break;
  case 39:
    this._viewarea.strafeRight();
    break;
  case 40:
    this._viewarea.moveBwd();
    break;
  default:
  }
};
x3dom.X3DDocument.prototype.onKeyUp = function(keyCode) {
  var stack = null;
  switch(keyCode) {
  case 27:
    window.history.back();
    break;
  case 33:
    stack = this._scene.getViewpoint()._stack;
    if(stack) {
      stack.switchTo('next');
    } else {
      x3dom.debug.logError('No valid ViewBindable stack.');
    }
    break;
  case 34:
    stack = this._scene.getViewpoint()._stack;
    if(stack) {
      stack.switchTo('prev');
    } else {
      x3dom.debug.logError('No valid ViewBindable stack.');
    }
    break;
  case 37:
    break;
  case 38:
    break;
  case 39:
    break;
  case 40:
    break;
  default:
  }
};
x3dom.X3DDocument.prototype.onKeyPress = function(charCode) {
  var nav = this._scene.getNavigationInfo();
  switch(charCode) {
  case 32:
    var statDiv = this.canvas.parent.statDiv;
    if(statDiv) {
      statDiv.style.display = ((statDiv.style.display == 'none') ? 'inline' : 'none');
    }
    x3dom.debug.logInfo("a: show all | d: show helper buffers | s: light view | " + "m: toggle render mode | p: intersect type | r: reset view | " + "e: examine mode | f: fly mode | w: walk mode | " + "l: lookAt mode | g: game mode | u: upright position");
    break;
  case 43:
    nav._vf.speed = 2 * nav._vf.speed;
    x3dom.debug.logInfo("Changed navigation speed to " + nav._vf.speed);
    break;
  case 45:
    nav._vf.speed = 0.5 * nav._vf.speed;
    x3dom.debug.logInfo("Changed navigation speed to " + nav._vf.speed);
    break;
  case 97:
    this._viewarea.showAll();
    break;
  case 100:
    if(this._viewarea._visDbgBuf === undefined) {
      this._viewarea._visDbgBuf = true;
    } else {
      this._viewarea._visDbgBuf = !this._viewarea._visDbgBuf;
    }
    x3dom.debug.logContainer.style.display = (this._viewarea._visDbgBuf === true) ? "block" : "none";
    break;
  case 101:
    nav.setType("examine", this._viewarea);
    break;
  case 102:
    nav.setType("fly", this._viewarea);
    break;
  case 103:
    nav.setType("game", this._viewarea);
    break;
  case 108:
    nav.setType("lookat", this._viewarea);
    break;
  case 109:
    if(this._viewarea._points === undefined) {
      this._viewarea._points = 0;
    }
    this._viewarea._points = ++this._viewarea._points % 3;
    break;
  case 111:
    nav.setType("lookaround", this._viewarea);
    break;
  case 112:
    switch(this._scene._vf.pickMode.toLowerCase()) {
    case "idbuf":
      this._scene._vf.pickMode = "color";
      break;
    case "color":
      this._scene._vf.pickMode = "texCoord";
      break;
    case "texcoord":
      this._scene._vf.pickMode = "box";
      break;
    default:
      this._scene._vf.pickMode = "idBuf";
      break;
    };
    x3dom.debug.logInfo("Switch pickMode to '" + this._scene._vf.pickMode + "'.");
    break;
  case 114:
    this._viewarea.resetView();
    break;
  case 115:
    if(this._nodeBag.lights.length > 0) {
      this._viewarea.animateTo(this._viewarea.getLightMatrix()[0], this._scene.getViewpoint());
    }
    break;
  case 117:
    this._viewarea.uprightView();
    break;
  case 119:
    nav.setType("walk", this._viewarea);
    break;
  default:
  }
};
x3dom.X3DDocument.prototype.shutdown = function(ctx) {
  if(!ctx) {
    return;
  }
  ctx.shutdown(this._viewarea);
};
x3dom.MatrixMixer = function(beginTime, endTime) {
  if(arguments.length === 0) {
    this._beginTime = 0;
    this._endTime = 0;
  } else {
    this._beginTime = beginTime;
    this._endTime = endTime;
  }
  this._beginMat = x3dom.fields.SFMatrix4f.identity();
  this._beginInvMat = x3dom.fields.SFMatrix4f.identity();
  this._beginLogMat = x3dom.fields.SFMatrix4f.identity();
  this._endMat = x3dom.fields.SFMatrix4f.identity();
  this._endLogMat = x3dom.fields.SFMatrix4f.identity();
};
x3dom.MatrixMixer.prototype.calcFraction = function(time) {
  var fraction = (time - this._beginTime) / (this._endTime - this._beginTime);
  return(Math.sin((fraction * Math.PI) - (Math.PI / 2)) + 1) / 2.0;
};
x3dom.MatrixMixer.prototype.setBeginMatrix = function(mat) {
  this._beginMat.setValues(mat);
  this._beginInvMat = mat.inverse();
  this._beginLogMat = x3dom.fields.SFMatrix4f.zeroMatrix();
};
x3dom.MatrixMixer.prototype.setEndMatrix = function(mat) {
  this._endMat.setValues(mat);
  this._endLogMat = mat.mult(this._beginInvMat).log();
};
x3dom.MatrixMixer.prototype.mix = function(time) {
  var mat = x3dom.fields.SFMatrix4f.zeroMatrix();
  if(time <= this._beginTime) {
    mat.setValues(this._beginLogMat);
  } else {
    if(time >= this._endTime) {
      mat.setValues(this._endLogMat);
    } else {
      var fraction = this.calcFraction(time);
      mat = this._endLogMat.addScaled(this._beginLogMat, -1);
      mat = mat.multiply(fraction).add(this._beginLogMat);
    }
  }
  mat = mat.exp().mult(this._beginMat);
  return mat;
};
x3dom.Viewarea = function(document, scene) {
  this._doc = document;
  this._scene = scene;
  document._nodeBag.viewarea.push(this);
  this._pickingInfo = {
    pickPos: {},
    pickObj: null,
    lastObj: null,
    lastClickObj: null
  };
  this._rotMat = x3dom.fields.SFMatrix4f.identity();
  this._transMat = x3dom.fields.SFMatrix4f.identity();
  this._movement = new x3dom.fields.SFVec3f(0, 0, 0);
  this._needNavigationMatrixUpdate = true;
  this._deltaT = 0;
  this._pitch = 0;
  this._yaw = 0;
  this._eyePos = new x3dom.fields.SFVec3f(0, 0, 0);
  this._width = 400;
  this._height = 300;
  this._dx = 0;
  this._dy = 0;
  this._lastX = -1;
  this._lastY = -1;
  this._pressX = -1;
  this._pressY = -1;
  this._lastButton = 0;
  this._pick = new x3dom.fields.SFVec3f(0, 0, 0);
  this._lastTS = 0;
  this._mixer = new x3dom.MatrixMixer();
  this._geoCache = [];
};
x3dom.Viewarea.prototype.tick = function(timeStamp) {
  var needMixAnim = false;
  if(this._mixer._beginTime > 0) {
    needMixAnim = true;
    if(timeStamp >= this._mixer._beginTime) {
      if(timeStamp <= this._mixer._endTime) {
        var mat = this._mixer.mix(timeStamp);
        this._scene.getViewpoint().setView(mat);
      } else {
        this._mixer._beginTime = 0;
        this._mixer._endTime = 0;
        this._scene.getViewpoint().setView(this._mixer._endMat);
      }
    } else {
      this._scene.getViewpoint().setView(this._mixer._beginMat);
    }
  }
  var needNavAnim = this.navigateTo(timeStamp);
  this._lastTS = timeStamp;
  return(needMixAnim || needNavAnim);
};
x3dom.Viewarea.prototype.navigateTo = function(timeStamp) {
  var navi = this._scene.getNavigationInfo();
  var needNavAnim = (navi._vf.type[0].toLowerCase() === "game" || (this._lastButton > 0 && (navi._vf.type[0].toLowerCase() === "fly" || navi._vf.type[0].toLowerCase() === "walk" || navi._vf.type[0].toLowerCase().substr(0, 5) === "looka")));
  this._deltaT = timeStamp - this._lastTS;
  if(needNavAnim) {
    var avatarRadius = 0.25;
    var avatarHeight = 1.6;
    var avatarKnee = 0.75;
    if(navi._vf.avatarSize.length > 2) {
      avatarRadius = navi._vf.avatarSize[0];
      avatarHeight = navi._vf.avatarSize[1];
      avatarKnee = navi._vf.avatarSize[2];
    }
    var currViewMat = this.getViewMatrix();
    var dist = 0;
    var step = (this._lastButton & 2) ? -1 : 1;
    step *= (this._deltaT * navi._vf.speed);
    var phi = Math.PI * this._deltaT * (this._pressX - this._lastX) / this._width;
    var theta = Math.PI * this._deltaT * (this._pressY - this._lastY) / this._height;
    if(this._needNavigationMatrixUpdate === true) {
      this._needNavigationMatrixUpdate = false;
      this._rotMat = x3dom.fields.SFMatrix4f.identity();
      this._transMat = x3dom.fields.SFMatrix4f.identity();
      this._movement = new x3dom.fields.SFVec3f(0, 0, 0);
      var angleX = 0;
      var angleY = Math.asin(currViewMat._02);
      var C = Math.cos(angleY);
      if(Math.abs(C) > 0.0001) {
        angleX = Math.atan2(-currViewMat._12 / C, currViewMat._22 / C);
      }
      this._flyMat = currViewMat.inverse();
      this._from = this._flyMat.e3();
      this._at = this._from.subtract(this._flyMat.e2());
      this._up = new x3dom.fields.SFVec3f(0, 1, 0);
      this._pitch = angleX * 180 / Math.PI;
      this._yaw = angleY * 180 / Math.PI;
      this._eyePos = this._from.negate();
    }
    var tmpAt = null,
      tmpUp = null,
      tmpMat = null;
    if(navi._vf.type[0].toLowerCase() === "game") {
      this._pitch += this._dy;
      this._yaw += this._dx;
      if(this._pitch >= 89) this._pitch = 89;
      if(this._pitch <= -89) this._pitch = -89;
      if(this._yaw >= 360) this._yaw -= 360;
      if(this._yaw < 0) this._yaw = 360 + this._yaw;
      this._dx = 0;
      this._dy = 0;
      var xMat = x3dom.fields.SFMatrix4f.rotationX(this._pitch / 180 * Math.PI);
      var yMat = x3dom.fields.SFMatrix4f.rotationY(this._yaw / 180 * Math.PI);
      var fPos = x3dom.fields.SFMatrix4f.translation(this._eyePos);
      this._flyMat = xMat.mult(yMat).mult(fPos);
      var flyMat = this._flyMat.inverse();
      var tmpFrom = flyMat.e3();
      tmpUp = new x3dom.fields.SFVec3f(0, -1, 0);
      tmpAt = tmpFrom.add(tmpUp);
      tmpUp = flyMat.e0().cross(tmpUp).normalize();
      tmpMat = x3dom.fields.SFMatrix4f.lookAt(tmpFrom, tmpAt, tmpUp);
      tmpMat = tmpMat.inverse();
      this._scene._nameSpace.doc.ctx.pickValue(this, this._width / 2, this._height / 2, tmpMat, this.getProjectionMatrix().mult(tmpMat));
      if(this._pickingInfo.pickObj) {
        dist = this._pickingInfo.pickPos.subtract(tmpFrom).length();
        tmpFrom.y += (avatarHeight - dist);
        flyMat.setTranslate(tmpFrom);
        this._eyePos = flyMat.e3().negate();
        this._flyMat = flyMat.inverse();
        this._pickingInfo.pickObj = null;
      }
      this._scene.getViewpoint().setView(this._flyMat);
      return needNavAnim;
    }
    var q = x3dom.fields.Quaternion.axisAngle(this._up, phi);
    var temp = q.toMatrix();
    var fin = x3dom.fields.SFMatrix4f.translation(this._from);
    fin = fin.mult(temp);
    temp = x3dom.fields.SFMatrix4f.translation(this._from.negate());
    fin = fin.mult(temp);
    this._at = fin.multMatrixPnt(this._at);
    var lv = this._at.subtract(this._from).normalize();
    var sv = lv.cross(this._up).normalize();
    var up = sv.cross(lv).normalize();
    q = x3dom.fields.Quaternion.axisAngle(sv, theta);
    temp = q.toMatrix();
    fin = x3dom.fields.SFMatrix4f.translation(this._from);
    fin = fin.mult(temp);
    temp = x3dom.fields.SFMatrix4f.translation(this._from.negate());
    fin = fin.mult(temp);
    this._at = fin.multMatrixPnt(this._at);
    if(navi._vf.type[0].toLowerCase().substr(0, 5) !== "looka") {
      this._scene._nameSpace.doc.ctx.pickValue(this, this._width / 2, this._height / 2);
      if(this._pickingInfo.pickObj) {
        dist = this._pickingInfo.pickPos.subtract(this._from).length();
        if(step > 0 && dist <= avatarRadius) {
          step = 0;
        }
      }
      lv = this._at.subtract(this._from).normalize().multiply(step);
      this._at = this._at.add(lv);
      this._from = this._from.add(lv);
      if(navi._vf.type[0].toLowerCase() === "walk") {
        tmpAt = this._from.addScaled(up, -1.0);
        tmpUp = sv.cross(up.negate()).normalize();
        tmpMat = x3dom.fields.SFMatrix4f.lookAt(this._from, tmpAt, tmpUp);
        tmpMat = tmpMat.inverse();
        this._scene._nameSpace.doc.ctx.pickValue(this, this._width / 2, this._height / 2, tmpMat, this.getProjectionMatrix().mult(tmpMat));
        if(this._pickingInfo.pickObj) {
          dist = this._pickingInfo.pickPos.subtract(this._from).length();
          this._at = this._at.add(up.multiply(avatarHeight - dist));
          this._from = this._from.add(up.multiply(avatarHeight - dist));
        }
      }
      this._pickingInfo.pickObj = null;
    }
    this._flyMat = x3dom.fields.SFMatrix4f.lookAt(this._from, this._at, up);
    this._scene.getViewpoint().setView(this._flyMat.inverse());
  }
  return needNavAnim;
};
x3dom.Viewarea.prototype.moveFwd = function() {
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].toLowerCase() === "game") {
    var avatarRadius = 0.25;
    var avatarHeight = 1.6;
    if(navi._vf.avatarSize.length > 2) {
      avatarRadius = navi._vf.avatarSize[0];
      avatarHeight = navi._vf.avatarSize[1];
    }
    var speed = 5 * this._deltaT * navi._vf.speed;
    var yRotRad = (this._yaw / 180 * Math.PI);
    var xRotRad = (this._pitch / 180 * Math.PI);
    var dist = 0;
    var fMat = this._flyMat.inverse();
    this._scene._nameSpace.doc.ctx.pickValue(this, this._width / 2, this._height / 2);
    if(this._pickingInfo.pickObj) {
      dist = this._pickingInfo.pickPos.subtract(fMat.e3()).length();
      if(dist <= 2 * avatarRadius) {} else {
        this._eyePos.x -= Math.sin(yRotRad) * speed;
        this._eyePos.z += Math.cos(yRotRad) * speed;
        this._eyePos.y += Math.sin(xRotRad) * speed;
      }
    }
  }
};
x3dom.Viewarea.prototype.moveBwd = function() {
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].toLowerCase() === "game") {
    var speed = 5 * this._deltaT * navi._vf.speed;
    var yRotRad = (this._yaw / 180 * Math.PI);
    var xRotRad = (this._pitch / 180 * Math.PI);
    this._eyePos.x += Math.sin(yRotRad) * speed;
    this._eyePos.z -= Math.cos(yRotRad) * speed;
    this._eyePos.y -= Math.sin(xRotRad) * speed;
  }
};
x3dom.Viewarea.prototype.strafeRight = function() {
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].toLowerCase() === "game") {
    var speed = 5 * this._deltaT * navi._vf.speed;
    var yRotRad = (this._yaw / 180 * Math.PI);
    this._eyePos.x -= Math.cos(yRotRad) * speed;
    this._eyePos.z -= Math.sin(yRotRad) * speed;
  }
};
x3dom.Viewarea.prototype.strafeLeft = function() {
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].toLowerCase() === "game") {
    var speed = 5 * this._deltaT * navi._vf.speed;
    var yRotRad = (this._yaw / 180 * Math.PI);
    this._eyePos.x += Math.cos(yRotRad) * speed;
    this._eyePos.z += Math.sin(yRotRad) * speed;
  }
};
x3dom.Viewarea.prototype.animateTo = function(target, prev, dur) {
  var navi = this._scene.getNavigationInfo();
  if(x3dom.isa(target, x3dom.nodeTypes.X3DViewpointNode)) {
    target = target.getViewMatrix();
  }
  if(navi._vf.transitionType[0].toLowerCase() !== "teleport" && navi.getType() !== "game") {
    if(prev && x3dom.isa(prev, x3dom.nodeTypes.X3DViewpointNode)) {
      prev = prev.getCurrentTransform().mult(prev.getViewMatrix()).mult(this._transMat).mult(this._rotMat);
    } else {
      return;
    }
    this._mixer._beginTime = this._lastTS;
    if(arguments.length >= 3) {
      this._mixer._endTime = this._lastTS + dur;
    } else {
      this._mixer._endTime = this._lastTS + navi._vf.transitionTime;
    }
    this._mixer.setBeginMatrix(prev);
    this._mixer.setEndMatrix(target);
  } else {
    this._scene.getViewpoint().setView(target);
  }
  this._rotMat = x3dom.fields.SFMatrix4f.identity();
  this._transMat = x3dom.fields.SFMatrix4f.identity();
  this._movement = new x3dom.fields.SFVec3f(0, 0, 0);
  this._needNavigationMatrixUpdate = true;
};
x3dom.Viewarea.prototype.getLights = function() {
  return this._doc._nodeBag.lights;
};
x3dom.Viewarea.prototype.getLightsShadow = function() {
  var lights = this._doc._nodeBag.lights;
  for(var l = 0; l < lights.length; l++) {
    if(lights[l]._vf.shadowIntensity > 0.0) {
      return true;
    }
  }
};
x3dom.Viewarea.prototype.getViewpointMatrix = function() {
  var viewpoint = this._scene.getViewpoint();
  var mat_viewpoint = viewpoint.getCurrentTransform();
  return viewpoint.getViewMatrix().mult(mat_viewpoint.inverse());
};
x3dom.Viewarea.prototype.getViewMatrix = function() {
  return this.getViewpointMatrix().mult(this._transMat).mult(this._rotMat);
};
x3dom.Viewarea.prototype.getLightMatrix = function() {
  var lights = this._doc._nodeBag.lights;
  var i, n = lights.length;
  if(n > 0) {
    var min = x3dom.fields.SFVec3f.MAX();
    var max = x3dom.fields.SFVec3f.MIN();
    var ok = this._scene.getVolume(min, max, true);
    if(ok) {
      var l_arr = [];
      var viewpoint = this._scene.getViewpoint();
      var fov = viewpoint.getFieldOfView();
      var dia = max.subtract(min);
      var dist1 = (dia.y / 2.0) / Math.tan(fov / 2.0) + (dia.z / 2.0);
      var dist2 = (dia.x / 2.0) / Math.tan(fov / 2.0) + (dia.z / 2.0);
      dia = min.add(dia.multiply(0.5));
      for(i = 0; i < n; i++) {
        if(x3dom.isa(lights[i], x3dom.nodeTypes.PointLight)) {
          dia = dia.subtract(lights[i]._vf.location).normalize();
        } else {
          var dir = lights[i]._vf.direction.normalize().negate();
          dia = dia.add(dir.multiply(1.2 * (dist1 > dist2 ? dist1 : dist2)));
        }
        l_arr[i] = lights[i].getViewMatrix(dia);
      }
      return l_arr;
    }
  }
  return [this.getViewMatrix()];
};
x3dom.Viewarea.prototype.getWCtoLCMatrix = function(lMat) {
  var proj = this.getProjectionMatrix();
  var view;
  if(arguments.length === 0) {
    view = this.getLightMatrix()[0];
  } else {
    view = lMat;
  }
  return proj.mult(view);
};
x3dom.Viewarea.prototype.getProjectionMatrix = function() {
  var viewpoint = this._scene.getViewpoint();
  return viewpoint.getProjectionMatrix(this._width / this._height);
};
x3dom.Viewarea.prototype.getWCtoCCMatrix = function() {
  var view = this.getViewMatrix();
  var proj = this.getProjectionMatrix();
  return proj.mult(view);
};
x3dom.Viewarea.prototype.getCCtoWCMatrix = function() {
  var mat = this.getWCtoCCMatrix();
  return mat.inverse();
};
x3dom.Viewarea.prototype.calcViewRay = function(x, y) {
  var cctowc = this.getCCtoWCMatrix();
  var rx = x / (this._width - 1.0) * 2.0 - 1.0;
  var ry = (this._height - 1.0 - y) / (this._height - 1.0) * 2.0 - 1.0;
  var from = cctowc.multFullMatrixPnt(new x3dom.fields.SFVec3f(rx, ry, -1));
  var at = cctowc.multFullMatrixPnt(new x3dom.fields.SFVec3f(rx, ry, 1));
  var dir = at.subtract(from);
  return new x3dom.fields.Line(from, dir);
};
x3dom.Viewarea.prototype.showAll = function(axis) {
  var min = x3dom.fields.SFVec3f.MAX();
  var max = x3dom.fields.SFVec3f.MIN();
  var ok = this._scene.getVolume(min, max, true);
  if(ok) {
    var x = "x",
      y = "y",
      z = "z";
    var sign = 1;
    var to, from = new x3dom.fields.SFVec3f(0, 0, -1);
    switch(axis) {
    case "posX":
      sign = -1;
    case "negX":
      z = "x";
      x = "y";
      y = "z";
      to = new x3dom.fields.SFVec3f(sign, 0, 0);
      break;
    case "posY":
      sign = -1;
    case "negY":
      z = "y";
      x = "z";
      y = "x";
      to = new x3dom.fields.SFVec3f(0, sign, 0);
      break;
    case "posZ":
      sign = -1;
    case "negZ":
    default:
      to = new x3dom.fields.SFVec3f(0, 0, -sign);
      break;
    }
    var quat = x3dom.fields.Quaternion.rotateFromTo(from, to);
    var viewmat = quat.toMatrix();
    var viewpoint = this._scene.getViewpoint();
    var fov = viewpoint.getFieldOfView();
    var dia = max.subtract(min);
    var dist1 = (dia[y] / 2.0) / Math.tan(fov / 2.0) - sign * (dia[z] / 2.0);
    var dist2 = (dia[x] / 2.0) / Math.tan(fov / 2.0) - sign * (dia[z] / 2.0);
    dia = min.add(dia.multiply(0.5));
    dia[z] += sign * (dist1 > dist2 ? dist1 : dist2) * 1.001;
    viewmat = viewmat.mult(x3dom.fields.SFMatrix4f.translation(dia.multiply(-1)));
    this.animateTo(viewmat, viewpoint);
  }
};
x3dom.Viewarea.prototype.resetView = function() {
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.transitionType[0].toLowerCase() !== "teleport" && navi.getType() !== "game") {
    this._mixer._beginTime = this._lastTS;
    this._mixer._endTime = this._lastTS + navi._vf.transitionTime;
    this._mixer.setBeginMatrix(this.getViewMatrix());
    this._scene.getViewpoint().resetView();
    this._mixer.setEndMatrix(this._scene.getViewpoint().getViewMatrix());
  } else {
    this._scene.getViewpoint().resetView();
  }
  this._rotMat = x3dom.fields.SFMatrix4f.identity();
  this._transMat = x3dom.fields.SFMatrix4f.identity();
  this._movement = new x3dom.fields.SFVec3f(0, 0, 0);
  this._needNavigationMatrixUpdate = true;
};
x3dom.Viewarea.prototype.uprightView = function() {
  var mat = this.getViewMatrix().inverse();
  var from = mat.e3();
  var at = from.subtract(mat.e2());
  var up = new x3dom.fields.SFVec3f(0, 1, 0);
  var s = mat.e2().cross(up).normalize();
  var v = s.cross(up).normalize();
  at = from.add(v);
  mat = x3dom.fields.SFMatrix4f.lookAt(from, at, up);
  mat = mat.inverse();
  this.animateTo(mat, this._scene.getViewpoint());
};
x3dom.Viewarea.prototype.callEvtHandler = function(node, eventType, event) {
  event.target = node._xmlNode;
  var attrib = node._xmlNode[eventType];
  try {
    if(typeof(attrib) === "function") {
      attrib.call(node._xmlNode, event);
    } else {
      var funcStr = node._xmlNode.getAttribute(eventType);
      var func = new Function('event', funcStr);
      func.call(node._xmlNode, event);
    }
    var list = node._listeners[event.type];
    if(list) {
      for(var it = 0; it < list.length; it++) {
        list[it].call(node._xmlNode, event);
      }
    }
  } catch(ex) {
    x3dom.debug.logException(ex);
  }
  return event.cancelBubble;
};
x3dom.Viewarea.prototype.checkEvents = function(obj, x, y, buttonState, eventType) {
  var that = this;
  var needRecurse = true;
  var event = {
    target: {},
    type: eventType.substr(2, eventType.length - 2),
    button: buttonState,
    layerX: x,
    layerY: y,
    worldX: that._pick.x,
    worldY: that._pick.y,
    worldZ: that._pick.z,
    hitPnt: that._pick.toGL(),
    hitObject: obj._xmlNode ? obj._xmlNode : null,
    cancelBubble: false,
    stopPropagation: function() {
      this.cancelBubble = true;
    }
  };
  try {
    var anObj = obj;
    if(!anObj._xmlNode[eventType] && !anObj._xmlNode.hasAttribute(eventType) && !anObj._listeners[event.type]) {
      anObj = anObj._cf.geometry.node;
    }
    if(that.callEvtHandler(anObj, eventType, event) === true) {
      needRecurse = false;
    }
  } catch(e) {
    x3dom.debug.logException(e);
  }
  var recurse = function(obj) {
      Array.forEach(obj._parentNodes, function(node) {
        if(node._xmlNode && (node._xmlNode[eventType] || node._xmlNode.hasAttribute(eventType) || node._listeners[event.type])) {
          if(that.callEvtHandler(node, eventType, event) === true) {
            needRecurse = false;
          }
        }
        if(x3dom.isa(node, x3dom.nodeTypes.Anchor) && eventType === 'onclick') {
          node.handleTouch();
          needRecurse = false;
        } else if(needRecurse) {
          recurse(node);
        }
      });
    };
  if(needRecurse) {
    recurse(obj);
  }
};
x3dom.Viewarea.prototype.initMouseState = function() {
  this._deltaT = 0;
  this._dx = 0;
  this._dy = 0;
  this._lastX = -1;
  this._lastY = -1;
  this._pressX = -1;
  this._pressY = -1;
  this._lastButton = 0;
  this._needNavigationMatrixUpdate = true;
}
x3dom.Viewarea.prototype.onMousePress = function(x, y, buttonState) {
  this._needNavigationMatrixUpdate = true;
  this.prepareEvents(x, y, buttonState, "onmousedown");
  this._pickingInfo.lastClickObj = this._pickingInfo.pickObj;
  this._dx = 0;
  this._dy = 0;
  this._lastX = x;
  this._lastY = y;
  this._pressX = x;
  this._pressY = y;
  this._lastButton = buttonState;
};
x3dom.Viewarea.prototype.onMouseRelease = function(x, y, buttonState) {
  var tDist = 3.0;
  var dir;
  var navi = this._scene.getNavigationInfo();
  if(this._scene._vf.pickMode.toLowerCase() !== "box") {
    this.prepareEvents(x, y, buttonState, "onmouseup");
    if(this._pickingInfo.pickObj && this._pickingInfo.pickObj === this._pickingInfo.lastClickObj) {
      this.prepareEvents(x, y, buttonState, "onclick");
    }
  } else {
    var t0 = new Date().getTime();
    var line = this.calcViewRay(x, y);
    var isect = this._scene.doIntersect(line);
    var obj = line.hitObject;
    if(isect && obj) {
      this._pick.setValues(line.hitPoint);
      this.checkEvents(obj, x, y, buttonState, "onclick");
      x3dom.debug.logInfo("Hit '" + obj._xmlNode.localName + "/ " + obj._DEF + "' at dist=" + line.dist.toFixed(4));
      x3dom.debug.logInfo("Ray hit at position " + this._pick);
    }
    var t1 = new Date().getTime() - t0;
    x3dom.debug.logInfo("Picking time (box): " + t1 + "ms");
    if(!isect) {
      dir = this.getViewMatrix().e2().negate();
      var u = dir.dot(line.pos.negate()) / dir.dot(line.dir);
      this._pick = line.pos.add(line.dir.multiply(u));
    }
  }
  if(this._pickingInfo.pickObj && navi._vf.type[0].toLowerCase() === "lookat" && this._pressX === x && this._pressY === y) {
    var step = (this._lastButton & 2) ? -1 : 1;
    var dist = this._pickingInfo.pickPos.subtract(this._from).length() / tDist;
    var laMat = new x3dom.fields.SFMatrix4f();
    laMat.setValues(this.getViewMatrix());
    laMat = laMat.inverse();
    var from = laMat.e3();
    var at = from.subtract(laMat.e2());
    var up = laMat.e1();
    dir = this._pickingInfo.pickPos.subtract(from);
    var len = dir.length();
    dir = dir.normalize();
    var newUp = new x3dom.fields.SFVec3f(0, 1, 0);
    var newAt = from.addScaled(dir, len);
    var s = dir.cross(newUp).normalize();
    dir = s.cross(newUp).normalize();
    if(step < 0) {
      dist = (0.5 + len + dist) * 2;
    }
    var newFrom = newAt.addScaled(dir, dist);
    laMat = x3dom.fields.SFMatrix4f.lookAt(newFrom, newAt, newUp);
    laMat = laMat.inverse();
    dist = newFrom.subtract(from).length();
    var dur = Math.log(dist / navi._vf.speed);
    this.animateTo(laMat, this._scene.getViewpoint(), dur);
  }
  this._dx = 0;
  this._dy = 0;
  this._lastX = x;
  this._lastY = y;
  this._lastButton = buttonState;
};
x3dom.Viewarea.prototype.onMouseOver = function(x, y, buttonState) {
  this._dx = 0;
  this._dy = 0;
  this._lastButton = 0;
  this._lastX = x;
  this._lastY = y;
  this._deltaT = 0;
};
x3dom.Viewarea.prototype.onMouseOut = function(x, y, buttonState) {
  this._dx = 0;
  this._dy = 0;
  this._lastButton = 0;
  this._lastX = x;
  this._lastY = y;
  this._deltaT = 0;
};
x3dom.Viewarea.prototype.onDoubleClick = function(x, y) {
  if(this._doc.properties.getProperty('disableDoubleClick', 'false') === 'true') {
    return;
  }
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].length <= 1 || navi._vf.type[0].toLowerCase() == "none") {
    return;
  }
  if((this._scene._vf.pickMode.toLowerCase() === "color" || this._scene._vf.pickMode.toLowerCase() === "texcoord")) {
    return;
  }
  var viewpoint = this._scene.getViewpoint();
  viewpoint._vf.centerOfRotation.setValues(this._pick);
  x3dom.debug.logInfo("New center of Rotation:  " + this._pick);
  var mat = this.getViewMatrix().inverse();
  var from = mat.e3();
  var at = this._pick;
  var up = mat.e1();
  var norm = mat.e0().cross(up).normalize();
  var dist = norm.dot(this._pick.subtract(from));
  from = at.addScaled(norm, -dist);
  mat = x3dom.fields.SFMatrix4f.lookAt(from, at, up);
  x3dom.debug.logInfo("New camera position:  " + from);
  this.animateTo(mat.inverse(), viewpoint);
};
x3dom.Viewarea.prototype.handleMoveEvt = function(x, y, buttonState) {
  this.prepareEvents(x, y, buttonState, "onmousemove");
  if(this._pickingInfo.pickObj !== this._pickingInfo.lastObj) {
    if(this._pickingInfo.lastObj) {
      var obj = this._pickingInfo.pickObj;
      this._pickingInfo.pickObj = this._pickingInfo.lastObj;
      this.prepareEvents(x, y, buttonState, "onmouseout");
      this._pickingInfo.pickObj = obj;
    }
    if(this._pickingInfo.pickObj) {
      this.prepareEvents(x, y, buttonState, "onmouseover");
    }
    this._pickingInfo.lastObj = this._pickingInfo.pickObj;
  }
};
x3dom.Viewarea.prototype.onMove = function(x, y, buttonState) {
  this.handleMoveEvt(x, y, buttonState);
  if(this._lastX < 0 || this._lastY < 0) {
    this._lastX = x;
    this._lastY = y;
  }
  this._dx = x - this._lastX;
  this._dy = y - this._lastY;
  this._lastX = x;
  this._lastY = y;
};
x3dom.Viewarea.prototype.onMoveView = function(translation, rotation) {
  var navi = this._scene.getNavigationInfo();
  var viewpoint = this._scene.getViewpoint();
  if(navi._vf.type[0].toLowerCase() === "examine") {
    if(translation) {
      var distance = 10;
      if(this._scene._lastMin !== undefined && this._scene._lastMax !== undefined) {
        distance = (this._scene._lastMax.subtract(this._scene._lastMin)).length();
        distance = (distance < x3dom.fields.Eps) ? 1 : distance;
      }
      translation = translation.multiply(distance);
      this._movement = this._movement.add(translation);
      this._transMat = viewpoint.getViewMatrix().inverse().mult(x3dom.fields.SFMatrix4f.translation(this._movement)).mult(viewpoint.getViewMatrix());
    }
    if(rotation) {
      this._rotMat = rotation.mult(this._rotMat);
    }
  }
};
x3dom.Viewarea.prototype.onDrag = function(x, y, buttonState) {
  this.handleMoveEvt(x, y, buttonState);
  var navi = this._scene.getNavigationInfo();
  if(navi._vf.type[0].length <= 1 || navi._vf.type[0].toLowerCase() === "none") {
    return;
  }
  var dx = x - this._lastX;
  var dy = y - this._lastY;
  var min, max, ok, d, vec;
  var viewpoint = this._scene.getViewpoint();
  if(navi._vf.type[0].toLowerCase() === "examine") {
    if(buttonState & 1) {
      var alpha = (dy * 2 * Math.PI) / this._width;
      var beta = (dx * 2 * Math.PI) / this._height;
      var mat = this.getViewMatrix();
      var mx = x3dom.fields.SFMatrix4f.rotationX(alpha);
      var my = x3dom.fields.SFMatrix4f.rotationY(beta);
      var center = viewpoint.getCenterOfRotation();
      mat.setTranslate(new x3dom.fields.SFVec3f(0, 0, 0));
      this._rotMat = this._rotMat.mult(x3dom.fields.SFMatrix4f.translation(center)).mult(mat.inverse()).mult(mx).mult(my).mult(mat).mult(x3dom.fields.SFMatrix4f.translation(center.negate()));
    }
    if(buttonState & 4) {
      if(this._scene._lastMin !== undefined && this._scene._lastMax !== undefined) {
        d = (this._scene._lastMax.subtract(this._scene._lastMin)).length();
        d = (d < x3dom.fields.Eps) ? 1 : d;
      } else {
        min = x3dom.fields.SFVec3f.MAX();
        max = x3dom.fields.SFVec3f.MIN();
        ok = this._scene.getVolume(min, max, true);
        d = ok ? (max.subtract(min)).length() : 10;
        d = (d < x3dom.fields.Eps) ? 1 : d;
      }
      vec = new x3dom.fields.SFVec3f(d * dx / this._width, d * (-dy) / this._height, 0);
      this._movement = this._movement.add(vec);
      this._transMat = viewpoint.getViewMatrix().inverse().mult(x3dom.fields.SFMatrix4f.translation(this._movement)).mult(viewpoint.getViewMatrix());
    }
    if(buttonState & 2) {
      if(this._scene._lastMin !== undefined && this._scene._lastMax !== undefined) {
        d = (this._scene._lastMax.subtract(this._scene._lastMin)).length();
        d = (d < x3dom.fields.Eps) ? 1 : d;
      } else {
        min = x3dom.fields.SFVec3f.MAX();
        max = x3dom.fields.SFVec3f.MIN();
        ok = this._scene.getVolume(min, max, true);
        d = ok ? (max.subtract(min)).length() : 10;
        d = (d < x3dom.fields.Eps) ? 1 : d;
      }
      vec = new x3dom.fields.SFVec3f(0, 0, d * (dx + dy) / this._height);
      this._movement = this._movement.add(vec);
      this._transMat = viewpoint.getViewMatrix().inverse().mult(x3dom.fields.SFMatrix4f.translation(this._movement)).mult(viewpoint.getViewMatrix());
    }
  }
  this._dx = dx;
  this._dy = dy;
  this._lastX = x;
  this._lastY = y;
};
x3dom.Viewarea.prototype.prepareEvents = function(x, y, buttonState, eventType) {
  var avoidTraversal = (this._scene._vf.pickMode.toLowerCase() === "idbuf" || this._scene._vf.pickMode.toLowerCase() === "color" || this._scene._vf.pickMode.toLowerCase() === "texcoord");
  if(avoidTraversal) {
    var obj = this._pickingInfo.pickObj;
    if(obj) {
      this._pick.setValues(this._pickingInfo.pickPos);
      this.checkEvents(obj, x, y, buttonState, eventType);
      if(eventType === "onclick") {
        x3dom.debug.logInfo("Hit \"" + obj._xmlNode.localName + "/ " + obj._DEF + "\"");
        x3dom.debug.logInfo("Ray hit at position " + this._pick);
      }
    }
  }
};
x3dom.Mesh = function(parent) {
  this._parent = parent;
  this._min = new x3dom.fields.SFVec3f(0, 0, 0);
  this._max = new x3dom.fields.SFVec3f(0, 0, 0);
  this._invalidate = true;
  this._numFaces = 0;
  this._numCoords = 0;
  this._primType = 'TRIANGLES';
  this._positions = [];
  this._normals = [];
  this._texCoords = [];
  this._colors = [];
  this._indices = [];
  this._positions[0] = [];
  this._normals[0] = [];
  this._texCoords[0] = [];
  this._colors[0] = [];
  this._indices[0] = [];
};
x3dom.Mesh.prototype._dynamicFields = {};
x3dom.Mesh.prototype._numTexComponents = 2;
x3dom.Mesh.prototype._numColComponents = 3;
x3dom.Mesh.prototype._lit = true;
x3dom.Mesh.prototype._min = {};
x3dom.Mesh.prototype._max = {};
x3dom.Mesh.prototype._invalidate = true;
x3dom.Mesh.prototype._numFaces = 0;
x3dom.Mesh.prototype._numCoords = 0;
x3dom.Mesh.prototype.setMeshData = function(positions, normals, texCoords, colors, indices) {
  this._positions[0] = positions;
  this._normals[0] = normals;
  this._texCoords[0] = texCoords;
  this._colors[0] = colors;
  this._indices[0] = indices;
  this._invalidate = true;
  this._numFaces = this._indices[0].length / 3;
  this._numCoords = this._positions[0].length / 3;
};
x3dom.Mesh.prototype.getBBox = function(min, max, invalidate) {
  if(this._invalidate === true && invalidate === true) {
    var coords = this._positions[0];
    var n = coords.length;
    if(n > 3) {
      this._min = new x3dom.fields.SFVec3f(coords[0], coords[1], coords[2]);
      this._max = new x3dom.fields.SFVec3f(coords[0], coords[1], coords[2]);
    } else {
      this._min = new x3dom.fields.SFVec3f(0, 0, 0);
      this._max = new x3dom.fields.SFVec3f(0, 0, 0);
    }
    for(var i = 3; i < n; i += 3) {
      if(this._min.x > coords[i + 0]) {
        this._min.x = coords[i + 0];
      }
      if(this._min.y > coords[i + 1]) {
        this._min.y = coords[i + 1];
      }
      if(this._min.z > coords[i + 2]) {
        this._min.z = coords[i + 2];
      }
      if(this._max.x < coords[i + 0]) {
        this._max.x = coords[i + 0];
      }
      if(this._max.y < coords[i + 1]) {
        this._max.y = coords[i + 1];
      }
      if(this._max.z < coords[i + 2]) {
        this._max.z = coords[i + 2];
      }
    }
    this._invalidate = false;
  }
  min.setValues(this._min);
  max.setValues(this._max);
};
x3dom.Mesh.prototype.getCenter = function() {
  var min = new x3dom.fields.SFVec3f(0, 0, 0);
  var max = new x3dom.fields.SFVec3f(0, 0, 0);
  this.getBBox(min, max, true);
  var center = min.add(max).multiply(0.5);
  return center;
};
x3dom.Mesh.prototype.doIntersect = function(line) {
  var min = new x3dom.fields.SFVec3f(0, 0, 0);
  var max = new x3dom.fields.SFVec3f(0, 0, 0);
  this.getBBox(min, max, true);
  var isect = line.intersect(min, max);
  if(isect && line.enter < line.dist) {
    line.dist = line.enter;
    line.hitObject = this._parent;
    line.hitPoint = line.pos.add(line.dir.multiply(line.enter));
  }
  return isect;
};
x3dom.Mesh.prototype.calcNormals = function(creaseAngle) {
  var i = 0,
    j = 0,
    num = 0;
  var multInd = (this._multiIndIndices !== undefined && this._multiIndIndices.length);
  var coords = this._positions[0];
  var idxs = multInd ? this._multiIndIndices : this._indices[0];
  var vertNormals = [];
  var vertFaceNormals = [];
  var a, b, n = null;
  num = (this._posSize !== undefined && this._posSize > coords.length) ? this._posSize / 3 : coords.length / 3;
  num = 3 * ((num - Math.floor(num) > 0) ? Math.floor(num + 1) : num);
  for(i = 0; i < num; ++i) {
    vertFaceNormals[i] = [];
  }
  num = idxs.length;
  for(i = 0; i < num; i += 3) {
    if(!multInd) {
      a = new x3dom.fields.SFVec3f(coords[idxs[i] * 3], coords[idxs[i] * 3 + 1], coords[idxs[i] * 3 + 2]).subtract(new x3dom.fields.SFVec3f(coords[idxs[i + 1] * 3], coords[idxs[i + 1] * 3 + 1], coords[idxs[i + 1] * 3 + 2]));
      b = new x3dom.fields.SFVec3f(coords[idxs[i + 1] * 3], coords[idxs[i + 1] * 3 + 1], coords[idxs[i + 1] * 3 + 2]).subtract(new x3dom.fields.SFVec3f(coords[idxs[i + 2] * 3], coords[idxs[i + 2] * 3 + 1], coords[idxs[i + 2] * 3 + 2]));
    } else {
      a = new x3dom.fields.SFVec3f(coords[i * 3], coords[i * 3 + 1], coords[i * 3 + 2]).subtract(new x3dom.fields.SFVec3f(coords[(i + 1) * 3], coords[(i + 1) * 3 + 1], coords[(i + 1) * 3 + 2]));
      b = new x3dom.fields.SFVec3f(coords[(i + 1) * 3], coords[(i + 1) * 3 + 1], coords[(i + 1) * 3 + 2]).subtract(new x3dom.fields.SFVec3f(coords[(i + 2) * 3], coords[(i + 2) * 3 + 1], coords[(i + 2) * 3 + 2]));
    }
    n = a.cross(b).normalize();
    if(creaseAngle <= x3dom.fields.Eps) {
      vertNormals[i * 3] = vertNormals[(i + 1) * 3] = vertNormals[(i + 2) * 3] = n.x;
      vertNormals[i * 3 + 1] = vertNormals[(i + 1) * 3 + 1] = vertNormals[(i + 2) * 3 + 1] = n.y;
      vertNormals[i * 3 + 2] = vertNormals[(i + 1) * 3 + 2] = vertNormals[(i + 2) * 3 + 2] = n.z;
    } else {
      vertFaceNormals[idxs[i]].push(n);
      vertFaceNormals[idxs[i + 1]].push(n);
      vertFaceNormals[idxs[i + 2]].push(n);
    }
  }
  if(creaseAngle > x3dom.fields.Eps) {
    for(i = 0; i < coords.length; i += 3) {
      n = new x3dom.fields.SFVec3f(0, 0, 0);
      if(!multInd) {
        num = vertFaceNormals[i / 3].length;
        for(j = 0; j < num; ++j) {
          n = n.add(vertFaceNormals[i / 3][j]);
        }
      } else {
        num = vertFaceNormals[idxs[i / 3]].length;
        for(j = 0; j < num; ++j) {
          n = n.add(vertFaceNormals[idxs[i / 3]][j]);
        }
      }
      n = n.normalize();
      vertNormals[i] = n.x;
      vertNormals[i + 1] = n.y;
      vertNormals[i + 2] = n.z;
    }
  }
  if(multInd) {
    this._multiIndIndices = [];
  }
  this._normals[0] = vertNormals;
};
x3dom.Mesh.prototype.splitMesh = function() {
  var MAX = 65535;
  if(this._positions[0].length / 3 <= MAX) {
    return;
  }
  var positions = this._positions[0];
  var normals = this._normals[0];
  var texCoords = this._texCoords[0];
  var colors = this._colors[0];
  var indices = this._indices[0];
  var i = 0;
  do {
    this._positions[i] = [];
    this._normals[i] = [];
    this._texCoords[i] = [];
    this._colors[i] = [];
    this._indices[i] = [];
    var k = ((indices.length - ((i + 1) * MAX) < 0) ? false : true);
    if(k) {
      this._indices[i] = indices.slice(i * MAX, (i + 1) * MAX);
    } else {
      this._indices[i] = indices.slice(i * MAX);
    }
    if(i) {
      var m = i * MAX;
      for(var j = 0, l = this._indices[i].length; j < l; j++) {
        this._indices[i][j] -= m;
      }
    }
    if(k) {
      this._positions[i] = positions.slice(i * MAX * 3, 3 * (i + 1) * MAX);
    } else {
      this._positions[i] = positions.slice(i * MAX * 3);
    }
    if(normals.length) {
      if(k) {
        this._normals[i] = normals.slice(i * MAX * 3, 3 * (i + 1) * MAX);
      } else {
        this._normals[i] = normals.slice(i * MAX * 3);
      }
    }
    if(texCoords.length) {
      if(k) {
        this._texCoords[i] = texCoords.slice(i * MAX * this._numTexComponents, this._numTexComponents * (i + 1) * MAX);
      } else {
        this._texCoords[i] = texCoords.slice(i * MAX * this._numTexComponents);
      }
    }
    if(colors.length) {
      if(k) {
        this._colors[i] = colors.slice(i * MAX * this._numColComponents, this._numColComponents * (i + 1) * MAX);
      } else {
        this._colors[i] = colors.slice(i * MAX * this._numColComponents);
      }
    }
  }
  while (positions.length > ++i * MAX * 3);
};
x3dom.Mesh.prototype.calcTexCoords = function(mode) {
  this._texCoords[0] = [];
  if(mode.toLowerCase() === "sphere-local") {
    for(var i = 0, j = 0, n = this._normals[0].length; i < n; i += 3) {
      this._texCoords[0][j++] = 0.5 + this._normals[0][i] / 2.0;
      this._texCoords[0][j++] = 0.5 + this._normals[0][i + 1] / 2.0;
    }
  } else {
    var min = new x3dom.fields.SFVec3f(0, 0, 0),
      max = new x3dom.fields.SFVec3f(0, 0, 0);
    this.getBBox(min, max, true);
    var dia = max.subtract(min);
    var S = 0,
      T = 1;
    if(dia.x >= dia.y) {
      if(dia.x >= dia.z) {
        S = 0;
        T = dia.y >= dia.z ? 1 : 2;
      } else {
        S = 2;
        T = 0;
      }
    } else {
      if(dia.y >= dia.z) {
        S = 1;
        T = dia.x >= dia.z ? 0 : 2;
      } else {
        S = 2;
        T = 1;
      }
    }
    var sDenom = 1,
      tDenom = 1;
    var sMin = 0,
      tMin = 0;
    switch(S) {
    case 0:
      sDenom = dia.x;
      sMin = min.x;
      break;
    case 1:
      sDenom = dia.y;
      sMin = min.y;
      break;
    case 2:
      sDenom = dia.z;
      sMin = min.z;
      break;
    }
    switch(T) {
    case 0:
      tDenom = dia.x;
      tMin = min.x;
      break;
    case 1:
      tDenom = dia.y;
      tMin = min.y;
      break;
    case 2:
      tDenom = dia.z;
      tMin = min.z;
      break;
    }
    for(var k = 0, l = 0, m = this._positions[0].length; k < m; k += 3) {
      this._texCoords[0][l++] = (this._positions[0][k + S] - sMin) / sDenom;
      this._texCoords[0][l++] = (this._positions[0][k + T] - tMin) / tDenom;
    }
  }
};
x3dom.fields = {};
x3dom.fields.Eps = 0.000001;
x3dom.fields.SFMatrix4f = function(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33) {
  if(arguments.length === 0) {
    this._00 = 1;
    this._01 = 0;
    this._02 = 0;
    this._03 = 0;
    this._10 = 0;
    this._11 = 1;
    this._12 = 0;
    this._13 = 0;
    this._20 = 0;
    this._21 = 0;
    this._22 = 1;
    this._23 = 0;
    this._30 = 0;
    this._31 = 0;
    this._32 = 0;
    this._33 = 1;
  } else {
    this._00 = _00;
    this._01 = _01;
    this._02 = _02;
    this._03 = _03;
    this._10 = _10;
    this._11 = _11;
    this._12 = _12;
    this._13 = _13;
    this._20 = _20;
    this._21 = _21;
    this._22 = _22;
    this._23 = _23;
    this._30 = _30;
    this._31 = _31;
    this._32 = _32;
    this._33 = _33;
  }
};
x3dom.fields.SFMatrix4f.prototype.e0 = function() {
  var baseVec = new x3dom.fields.SFVec3f(this._00, this._10, this._20);
  return baseVec.normalize();
};
x3dom.fields.SFMatrix4f.prototype.e1 = function() {
  var baseVec = new x3dom.fields.SFVec3f(this._01, this._11, this._21);
  return baseVec.normalize();
};
x3dom.fields.SFMatrix4f.prototype.e2 = function() {
  var baseVec = new x3dom.fields.SFVec3f(this._02, this._12, this._22);
  return baseVec.normalize();
};
x3dom.fields.SFMatrix4f.prototype.e3 = function() {
  return new x3dom.fields.SFVec3f(this._03, this._13, this._23);
};
x3dom.fields.SFMatrix4f.identity = function() {
  return new x3dom.fields.SFMatrix4f(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.zeroMatrix = function() {
  return new x3dom.fields.SFMatrix4f(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
};
x3dom.fields.SFMatrix4f.translation = function(vec) {
  return new x3dom.fields.SFMatrix4f(1, 0, 0, vec.x, 0, 1, 0, vec.y, 0, 0, 1, vec.z, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.rotationX = function(a) {
  var c = Math.cos(a);
  var s = Math.sin(a);
  return new x3dom.fields.SFMatrix4f(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.rotationY = function(a) {
  var c = Math.cos(a);
  var s = Math.sin(a);
  return new x3dom.fields.SFMatrix4f(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.rotationZ = function(a) {
  var c = Math.cos(a);
  var s = Math.sin(a);
  return new x3dom.fields.SFMatrix4f(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.scale = function(vec) {
  return new x3dom.fields.SFMatrix4f(vec.x, 0, 0, 0, 0, vec.y, 0, 0, 0, 0, vec.z, 0, 0, 0, 0, 1);
};
x3dom.fields.SFMatrix4f.lookAt = function(from, at, up) {
  var view = from.subtract(at).normalize();
  var right = up.normalize().cross(view);
  if(right.dot(right) < x3dom.fields.Eps) {
    x3dom.debug.logWarning("View matrix is linearly dependent.");
    return x3dom.fields.SFMatrix4f.translation(from);
  }
  var newUp = view.cross(right.normalize()).normalize();
  var tmp = x3dom.fields.SFMatrix4f.identity();
  tmp.setValue(right, newUp, view, from);
  return tmp;
};
x3dom.fields.SFMatrix4f.prototype.setTranslate = function(vec) {
  this._03 = vec.x;
  this._13 = vec.y;
  this._23 = vec.z;
};
x3dom.fields.SFMatrix4f.prototype.setScale = function(vec) {
  this._00 = vec.x;
  this._11 = vec.y;
  this._22 = vec.z;
};
x3dom.fields.SFMatrix4f.parseRotation = function(str) {
  var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
  var x = +m[1],
    y = +m[2],
    z = +m[3],
    a = +m[4];
  var d = Math.sqrt(x * x + y * y + z * z);
  if(d === 0) {
    x = 1;
    y = z = 0;
  } else {
    x /= d;
    y /= d;
    z /= d;
  }
  var c = Math.cos(a);
  var s = Math.sin(a);
  var t = 1 - c;
  return new x3dom.fields.SFMatrix4f(t * x * x + c, t * x * y + s * z, t * x * z - s * y, 0, t * x * y - s * z, t * y * y + c, t * y * z + s * x, 0, t * x * z + s * y, t * y * z - s * x, t * z * z + c, 0, 0, 0, 0, 1).transpose();
};
x3dom.fields.SFMatrix4f.parse = function(str) {
  var needTranspose = false;
  var val = /matrix.*\((.+)\)/;
  if(val.exec(str)) {
    str = RegExp.$1;
    needTranspose = true;
  }
  var arr = Array.map(str.split(/[,\s]+/), function(n) {
    return +n;
  });
  if(arr.length >= 16) {
    if(!needTranspose) {
      return new x3dom.fields.SFMatrix4f(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15]);
    } else {
      return new x3dom.fields.SFMatrix4f(arr[0], arr[4], arr[8], arr[12], arr[1], arr[5], arr[9], arr[13], arr[2], arr[6], arr[10], arr[14], arr[3], arr[7], arr[11], arr[15]);
    }
  } else if(arr.length === 6) {
    return new x3dom.fields.SFMatrix4f(arr[0], arr[1], 0, arr[4], arr[2], arr[3], 0, arr[5], 0, 0, 1, 0, 0, 0, 0, 1);
  } else {
    x3dom.debug.logWarning("SFMatrix4f - can't parse string: " + str);
    return x3dom.fields.SFMatrix4f.identity();
  }
};
x3dom.fields.SFMatrix4f.prototype.mult = function(that) {
  return new x3dom.fields.SFMatrix4f(this._00 * that._00 + this._01 * that._10 + this._02 * that._20 + this._03 * that._30, this._00 * that._01 + this._01 * that._11 + this._02 * that._21 + this._03 * that._31, this._00 * that._02 + this._01 * that._12 + this._02 * that._22 + this._03 * that._32, this._00 * that._03 + this._01 * that._13 + this._02 * that._23 + this._03 * that._33, this._10 * that._00 + this._11 * that._10 + this._12 * that._20 + this._13 * that._30, this._10 * that._01 + this._11 * that._11 + this._12 * that._21 + this._13 * that._31, this._10 * that._02 + this._11 * that._12 + this._12 * that._22 + this._13 * that._32, this._10 * that._03 + this._11 * that._13 + this._12 * that._23 + this._13 * that._33, this._20 * that._00 + this._21 * that._10 + this._22 * that._20 + this._23 * that._30, this._20 * that._01 + this._21 * that._11 + this._22 * that._21 + this._23 * that._31, this._20 * that._02 + this._21 * that._12 + this._22 * that._22 + this._23 * that._32, this._20 * that._03 + this._21 * that._13 + this._22 * that._23 + this._23 * that._33, this._30 * that._00 + this._31 * that._10 + this._32 * that._20 + this._33 * that._30, this._30 * that._01 + this._31 * that._11 + this._32 * that._21 + this._33 * that._31, this._30 * that._02 + this._31 * that._12 + this._32 * that._22 + this._33 * that._32, this._30 * that._03 + this._31 * that._13 + this._32 * that._23 + this._33 * that._33);
};
x3dom.fields.SFMatrix4f.prototype.multMatrixPnt = function(vec) {
  return new x3dom.fields.SFVec3f(this._00 * vec.x + this._01 * vec.y + this._02 * vec.z + this._03, this._10 * vec.x + this._11 * vec.y + this._12 * vec.z + this._13, this._20 * vec.x + this._21 * vec.y + this._22 * vec.z + this._23);
};
x3dom.fields.SFMatrix4f.prototype.multMatrixVec = function(vec) {
  return new x3dom.fields.SFVec3f(this._00 * vec.x + this._01 * vec.y + this._02 * vec.z, this._10 * vec.x + this._11 * vec.y + this._12 * vec.z, this._20 * vec.x + this._21 * vec.y + this._22 * vec.z);
};
x3dom.fields.SFMatrix4f.prototype.multFullMatrixPnt = function(vec) {
  var w = this._30 * vec.x + this._31 * vec.y + this._32 * vec.z + this._33;
  if(w) {
    w = 1.0 / w;
  }
  return new x3dom.fields.SFVec3f((this._00 * vec.x + this._01 * vec.y + this._02 * vec.z + this._03) * w, (this._10 * vec.x + this._11 * vec.y + this._12 * vec.z + this._13) * w, (this._20 * vec.x + this._21 * vec.y + this._22 * vec.z + this._23) * w);
};
x3dom.fields.SFMatrix4f.prototype.transpose = function() {
  return new x3dom.fields.SFMatrix4f(this._00, this._10, this._20, this._30, this._01, this._11, this._21, this._31, this._02, this._12, this._22, this._32, this._03, this._13, this._23, this._33);
};
x3dom.fields.SFMatrix4f.prototype.negate = function() {
  return new x3dom.fields.SFMatrix4f(-this._00, -this._01, -this._02, -this._03, -this._10, -this._11, -this._12, -this._13, -this._20, -this._21, -this._22, -this._23, -this._30, -this._31, -this._32, -this._33);
};
x3dom.fields.SFMatrix4f.prototype.multiply = function(s) {
  return new x3dom.fields.SFMatrix4f(s * this._00, s * this._01, s * this._02, s * this._03, s * this._10, s * this._11, s * this._12, s * this._13, s * this._20, s * this._21, s * this._22, s * this._23, s * this._30, s * this._31, s * this._32, s * this._33);
};
x3dom.fields.SFMatrix4f.prototype.add = function(that) {
  return new x3dom.fields.SFMatrix4f(this._00 + that._00, this._01 + that._01, this._02 + that._02, this._03 + that._03, this._10 + that._10, this._11 + that._11, this._12 + that._12, this._13 + that._13, this._20 + that._20, this._21 + that._21, this._22 + that._22, this._23 + that._23, this._30 + that._30, this._31 + that._31, this._32 + that._32, this._33 + that._33);
};
x3dom.fields.SFMatrix4f.prototype.addScaled = function(that, s) {
  return new x3dom.fields.SFMatrix4f(this._00 + s * that._00, this._01 + s * that._01, this._02 + s * that._02, this._03 + s * that._03, this._10 + s * that._10, this._11 + s * that._11, this._12 + s * that._12, this._13 + s * that._13, this._20 + s * that._20, this._21 + s * that._21, this._22 + s * that._22, this._23 + s * that._23, this._30 + s * that._30, this._31 + s * that._31, this._32 + s * that._32, this._33 + s * that._33);
};
x3dom.fields.SFMatrix4f.prototype.setValues = function(that) {
  this._00 = that._00;
  this._01 = that._01;
  this._02 = that._02;
  this._03 = that._03;
  this._10 = that._10;
  this._11 = that._11;
  this._12 = that._12;
  this._13 = that._13;
  this._20 = that._20;
  this._21 = that._21;
  this._22 = that._22;
  this._23 = that._23;
  this._30 = that._30;
  this._31 = that._31;
  this._32 = that._32;
  this._33 = that._33;
};
x3dom.fields.SFMatrix4f.prototype.setValue = function(v1, v2, v3, v4) {
  this._00 = v1.x;
  this._01 = v2.x;
  this._02 = v3.x;
  this._10 = v1.y;
  this._11 = v2.y;
  this._12 = v3.y;
  this._20 = v1.z;
  this._21 = v2.z;
  this._22 = v3.z;
  this._30 = 0;
  this._31 = 0;
  this._32 = 0;
  if(arguments.length > 3) {
    this._03 = v4.x;
    this._13 = v4.y;
    this._23 = v4.z;
    this._33 = 1;
  }
};
x3dom.fields.SFMatrix4f.prototype.toGL = function() {
  return [this._00, this._10, this._20, this._30, this._01, this._11, this._21, this._31, this._02, this._12, this._22, this._32, this._03, this._13, this._23, this._33];
};
x3dom.fields.SFMatrix4f.prototype.at = function(i, j) {
  var field = "_" + i + j;
  return this[field];
};
x3dom.fields.SFMatrix4f.prototype.sqrt = function() {
  var iX = x3dom.fields.SFMatrix4f.identity(),
    Y = x3dom.fields.SFMatrix4f.identity(),
    iY = x3dom.fields.SFMatrix4f.identity(),
    result = x3dom.fields.SFMatrix4f.identity();
  var i, g, ig;
  result.setValues(this);
  for(i = 0; i < 6; i++) {
    iX = result.inverse();
    iY = Y.inverse();
    g = Math.abs(Math.pow(result.det() * Y.det(), -0.125));
    ig = 1.0 / g;
    result = result.multiply(g);
    result = result.addScaled(iY, ig);
    result = result.multiply(0.5);
    Y = Y.multiply(g);
    Y = Y.addScaled(iX, ig);
    Y = Y.multiply(0.5);
  }
  return result;
};
x3dom.fields.SFMatrix4f.prototype.normInfinity = function() {
  var t = 0,
    m = 0;
  if((t = Math.abs(this._00)) > m) {
    m = t;
  }
  if((t = Math.abs(this._01)) > m) {
    m = t;
  }
  if((t = Math.abs(this._02)) > m) {
    m = t;
  }
  if((t = Math.abs(this._03)) > m) {
    m = t;
  }
  if((t = Math.abs(this._10)) > m) {
    m = t;
  }
  if((t = Math.abs(this._11)) > m) {
    m = t;
  }
  if((t = Math.abs(this._12)) > m) {
    m = t;
  }
  if((t = Math.abs(this._13)) > m) {
    m = t;
  }
  if((t = Math.abs(this._20)) > m) {
    m = t;
  }
  if((t = Math.abs(this._21)) > m) {
    m = t;
  }
  if((t = Math.abs(this._22)) > m) {
    m = t;
  }
  if((t = Math.abs(this._23)) > m) {
    m = t;
  }
  if((t = Math.abs(this._30)) > m) {
    m = t;
  }
  if((t = Math.abs(this._31)) > m) {
    m = t;
  }
  if((t = Math.abs(this._32)) > m) {
    m = t;
  }
  if((t = Math.abs(this._33)) > m) {
    m = t;
  }
  return m;
};
x3dom.fields.SFMatrix4f.prototype.norm1_3x3 = function() {
  var max, t = 0;
  max = Math.abs(this._00) + Math.abs(this._10) + Math.abs(this._20);
  if((t = Math.abs(this._01) + Math.abs(this._11) + Math.abs(this._21)) > max) {
    max = t;
  }
  if((t = Math.abs(this._02) + Math.abs(this._12) + Math.abs(this._22)) > max) {
    max = t;
  }
  return max;
};
x3dom.fields.SFMatrix4f.prototype.normInf_3x3 = function() {
  var max, t = 0;
  max = Math.abs(this._00) + Math.abs(this._01) + Math.abs(this._02);
  if((t = Math.abs(this._10) + Math.abs(this._11) + Math.abs(this._12)) > max) {
    max = t;
  }
  if((t = Math.abs(this._20) + Math.abs(this._21) + Math.abs(this._22)) > max) {
    max = t;
  }
  return max;
};
x3dom.fields.SFMatrix4f.prototype.adjointT_3x3 = function() {
  var result = x3dom.fields.SFMatrix4f.identity();
  result._00 = this._11 * this._22 - this._12 * this._21;
  result._01 = this._12 * this._20 - this._10 * this._22;
  result._02 = this._10 * this._21 - this._11 * this._20;
  result._10 = this._21 * this._02 - this._22 * this._01;
  result._11 = this._22 * this._00 - this._20 * this._02;
  result._12 = this._20 * this._01 - this._21 * this._00;
  result._20 = this._01 * this._12 - this._02 * this._11;
  result._21 = this._02 * this._10 - this._00 * this._12;
  result._22 = this._00 * this._11 - this._01 * this._10;
  return result;
};
x3dom.fields.SFMatrix4f.prototype.equals = function(that) {
  var eps = 0.000000000001;
  return Math.abs(this._00 - that._00) < eps && Math.abs(this._01 - that._01) < eps && Math.abs(this._02 - that._02) < eps && Math.abs(this._03 - that._03) < eps && Math.abs(this._10 - that._10) < eps && Math.abs(this._11 - that._11) < eps && Math.abs(this._12 - that._12) < eps && Math.abs(this._13 - that._13) < eps && Math.abs(this._20 - that._20) < eps && Math.abs(this._21 - that._21) < eps && Math.abs(this._22 - that._22) < eps && Math.abs(this._23 - that._23) < eps && Math.abs(this._30 - that._30) < eps && Math.abs(this._31 - that._31) < eps && Math.abs(this._32 - that._32) < eps && Math.abs(this._33 - that._33) < eps;
};
x3dom.fields.SFMatrix4f.prototype.getTransform = function(translation, rotation, scaleFactor, scaleOrientation, center) {
  var m = x3dom.fields.SFMatrix4f.identity();
  if(arguments.length > 4) {
    m = x3dom.fields.SFMatrix4f.translation(center.negate());
    m = m.mult(this);
    var c = x3dom.fields.SFMatrix4f.translation(center);
    m = m.mult(c);
  } else {
    m.setValues(this);
  }
  var flip = m.decompose(translation, rotation, scaleFactor, scaleOrientation);
  scaleFactor = scaleFactor.multiply(flip);
};
x3dom.fields.SFMatrix4f.prototype.decompose = function(t, r, s, so) {
  var A = x3dom.fields.SFMatrix4f.identity();
  A.setValues(this);
  var Q = x3dom.fields.SFMatrix4f.identity(),
    S = x3dom.fields.SFMatrix4f.identity(),
    SO = x3dom.fields.SFMatrix4f.identity();
  t.x = A._03;
  t.y = A._13;
  t.z = A._23;
  A._03 = 0.0;
  A._13 = 0.0;
  A._23 = 0.0;
  A._30 = 0.0;
  A._31 = 0.0;
  A._32 = 0.0;
  var det = A.polarDecompose(Q, S);
  var f = 1.0;
  if(det < 0.0) {
    Q = Q.negate();
    f = -1.0;
  } else {
    f = 1.0;
  }
  r.setValue(Q);
  S.spectralDecompose(SO, s);
  so.setValue(SO);
  return f;
};
x3dom.fields.SFMatrix4f.prototype.polarDecompose = function(Q, S) {
  var TOL = 1.0e-6;
  var Mk = this.transpose();
  var Ek = x3dom.fields.SFMatrix4f.identity();
  var MkAdjT;
  var Mk_one = Mk.norm1_3x3();
  var Mk_inf = Mk.normInf_3x3();
  var MkAdjT_one, MkAdjT_inf;
  var Ek_one, Mk_det;
  do {
    MkAdjT = Mk.adjointT_3x3();
    Mk_det = Mk._00 * MkAdjT._00 + Mk._01 * MkAdjT._01 + Mk._02 * MkAdjT._02;
    if(Mk_det === 0) {
      x3dom.debug.logWarning("polarDecompose: Mk_det == 0.0");
      break;
    }
    MkAdjT_one = MkAdjT.norm1_3x3();
    MkAdjT_inf = MkAdjT.normInf_3x3();
    var gamma = Math.sqrt(Math.sqrt((MkAdjT_one * MkAdjT_inf) / (Mk_one * Mk_inf)) / Math.abs(Mk_det));
    var g1 = 0.5 * gamma;
    var g2 = 0.5 / (gamma * Mk_det);
    Ek.setValues(Mk);
    Mk = Mk.multiply(g1);
    Mk = Mk.addScaled(MkAdjT, g2);
    Ek = Ek.addScaled(Mk, -1.0);
    Ek_one = Ek.norm1_3x3();
    Mk_one = Mk.norm1_3x3();
    Mk_inf = Mk.normInf_3x3();
  } while (Ek_one > (Mk_one * TOL));
  var Q = Mk.transpose();
  var S = Mk.mult(this);
  var i, j;
  for(i = 0; i < 3; ++i) {
    for(j = i; j < 3; ++j) {
      S['_' + j + i] = 0.5 * (S['_' + j + i] + S['_' + i + j]);
      S['_' + i + j] = 0.5 * (S['_' + j + i] + S['_' + i + j]);
    }
  }
  return Mk_det;
};
x3dom.fields.SFMatrix4f.prototype.spectralDecompose = function(SO, k) {
  var next = [1, 2, 0];
  var maxIterations = 20;
  var iter, i, j;
  var diag = [],
    offDiag = [];
  diag[0] = this._00;
  diag[1] = this._11;
  diag[2] = this._22;
  offDiag[0] = this._12;
  offDiag[1] = this._20;
  offDiag[2] = this._01;
  for(iter = 0; iter < maxIterations; ++iter) {
    var sm = Math.abs(offDiag[0]) + Math.abs(offDiag[1]) + Math.abs(offDiag[2]);
    if(sm === 0) {
      break;
    }
    for(i = 2; i >= 0; --i) {
      var p = next[i];
      var q = next[p];
      var absOffDiag = Math.abs(offDiag[i]);
      var g = 100.0 * absOffDiag;
      if(absOffDiag > 0.0) {
        var t, h = diag[q] - diag[p];
        var absh = Math.abs(h);
        if(absh + g == absh) {
          t = offDiag[i] / h;
        } else {
          var theta = 0.5 * h / offDiag[i];
          t = 1.0 / (Math.abs(theta) + Math.sqrt(theta * theta + 1.0));
          t = theta < 0.0 ? -t : t;
        }
        var c = 1.0 / Math.sqrt(t * t + 1.0);
        var s = t * c;
        var tau = s / (c + 1.0);
        var ta = t * offDiag[i];
        offDiag[i] = 0.0;
        diag[p] -= ta;
        diag[q] += ta;
        var offDiagq = offDiag[q];
        offDiag[q] -= s * (offDiag[p] + tau * offDiagq);
        offDiag[p] += s * (offDiagq - tau * offDiag[p]);
        for(j = 2; j >= 0; --j) {
          var a = SO['_' + j + p];
          var b = SO['_' + j + q];
          SO['_' + j + p] -= s * (b + tau * a);
          SO['_' + j + q] += s * (a - tau * b);
        }
      }
    }
  }
  k.x = diag[0];
  k.y = diag[1];
  k.z = diag[2];
};
x3dom.fields.SFMatrix4f.prototype.log = function() {
  var maxiter = 12;
  var k = 0,
    i = 0;
  var eps = 0.000000000001;
  var A = x3dom.fields.SFMatrix4f.identity(),
    Z = x3dom.fields.SFMatrix4f.identity(),
    result = x3dom.fields.SFMatrix4f.identity();
  A.setValues(this);
  Z.setValues(this);
  Z._00 -= 1;
  Z._11 -= 1;
  Z._22 -= 1;
  Z._33 -= 1;
  while(Z.normInfinity() > 0.5) {
    A = A.sqrt();
    Z.setValues(A);
    Z._00 -= 1;
    Z._11 -= 1;
    Z._22 -= 1;
    Z._33 -= 1;
    k++;
  }
  A._00 -= 1;
  A._11 -= 1;
  A._22 -= 1;
  A._33 -= 1;
  A = A.negate();
  result.setValues(A);
  Z.setValues(A);
  i = 1;
  while(Z.normInfinity() > eps && i < maxiter) {
    Z = Z.mult(A);
    i++;
    result = result.addScaled(Z, (1.0 / i));
  }
  result = result.multiply((-1.0) * (1 << k));
  return result;
};
x3dom.fields.SFMatrix4f.prototype.exp = function() {
  var q = 6;
  var A = x3dom.fields.SFMatrix4f.identity(),
    D = x3dom.fields.SFMatrix4f.identity(),
    N = x3dom.fields.SFMatrix4f.identity(),
    result = x3dom.fields.SFMatrix4f.identity();
  var j = 1,
    k = 0,
    c = 1.0;
  A.setValues(this);
  j += Math.floor(Math.log(A.normInfinity() / 0.693));
  if(j < 0) {
    j = 0;
  }
  A = A.multiply(1.0 / (1 << j));
  for(k = 1; k <= q; k++) {
    c *= (q - k + 1) / (k * (2 * q - k + 1));
    result = A.mult(result);
    N = N.addScaled(result, c);
    if(k % 2) {
      D = D.addScaled(result, -c);
    } else {
      D = D.addScaled(result, c);
    }
  }
  result = D.inverse().mult(N);
  for(k = 0; k < j; k++) {
    result = result.mult(result);
  }
  return result;
};
x3dom.fields.SFMatrix4f.prototype.det3 = function(a1, a2, a3, b1, b2, b3, c1, c2, c3) {
  var d = (a1 * b2 * c3) + (a2 * b3 * c1) + (a3 * b1 * c2) - (a1 * b3 * c2) - (a2 * b1 * c3) - (a3 * b2 * c1);
  return d;
};
x3dom.fields.SFMatrix4f.prototype.det = function() {
  var a1, a2, a3, a4, b1, b2, b3, b4, c1, c2, c3, c4, d1, d2, d3, d4;
  a1 = this._00;
  b1 = this._10;
  c1 = this._20;
  d1 = this._30;
  a2 = this._01;
  b2 = this._11;
  c2 = this._21;
  d2 = this._31;
  a3 = this._02;
  b3 = this._12;
  c3 = this._22;
  d3 = this._32;
  a4 = this._03;
  b4 = this._13;
  c4 = this._23;
  d4 = this._33;
  var d = +a1 * this.det3(b2, b3, b4, c2, c3, c4, d2, d3, d4) - b1 * this.det3(a2, a3, a4, c2, c3, c4, d2, d3, d4) + c1 * this.det3(a2, a3, a4, b2, b3, b4, d2, d3, d4) - d1 * this.det3(a2, a3, a4, b2, b3, b4, c2, c3, c4);
  return d;
};
x3dom.fields.SFMatrix4f.prototype.inverse = function() {
  var a1, a2, a3, a4, b1, b2, b3, b4, c1, c2, c3, c4, d1, d2, d3, d4;
  a1 = this._00;
  b1 = this._10;
  c1 = this._20;
  d1 = this._30;
  a2 = this._01;
  b2 = this._11;
  c2 = this._21;
  d2 = this._31;
  a3 = this._02;
  b3 = this._12;
  c3 = this._22;
  d3 = this._32;
  a4 = this._03;
  b4 = this._13;
  c4 = this._23;
  d4 = this._33;
  var rDet = this.det();
  if(Math.abs(rDet) === 0) {
    x3dom.debug.logWarning("Invert matrix: singular matrix, no inverse!");
    return x3dom.fields.SFMatrix4f.identity();
  }
  rDet = 1.0 / rDet;
  return new x3dom.fields.SFMatrix4f(+this.det3(b2, b3, b4, c2, c3, c4, d2, d3, d4) * rDet, -this.det3(a2, a3, a4, c2, c3, c4, d2, d3, d4) * rDet, +this.det3(a2, a3, a4, b2, b3, b4, d2, d3, d4) * rDet, -this.det3(a2, a3, a4, b2, b3, b4, c2, c3, c4) * rDet, -this.det3(b1, b3, b4, c1, c3, c4, d1, d3, d4) * rDet, +this.det3(a1, a3, a4, c1, c3, c4, d1, d3, d4) * rDet, -this.det3(a1, a3, a4, b1, b3, b4, d1, d3, d4) * rDet, +this.det3(a1, a3, a4, b1, b3, b4, c1, c3, c4) * rDet, +this.det3(b1, b2, b4, c1, c2, c4, d1, d2, d4) * rDet, -this.det3(a1, a2, a4, c1, c2, c4, d1, d2, d4) * rDet, +this.det3(a1, a2, a4, b1, b2, b4, d1, d2, d4) * rDet, -this.det3(a1, a2, a4, b1, b2, b4, c1, c2, c4) * rDet, -this.det3(b1, b2, b3, c1, c2, c3, d1, d2, d3) * rDet, +this.det3(a1, a2, a3, c1, c2, c3, d1, d2, d3) * rDet, -this.det3(a1, a2, a3, b1, b2, b3, d1, d2, d3) * rDet, +this.det3(a1, a2, a3, b1, b2, b3, c1, c2, c3) * rDet);
};
x3dom.fields.SFMatrix4f.prototype.toString = function() {
  return '[SFMatrix4f \n' + this._00.toFixed(6) + ', ' + this._01.toFixed(6) + ', ' + this._02.toFixed(6) + ', ' + this._03.toFixed(6) + ', \n' + this._10.toFixed(6) + ', ' + this._11.toFixed(6) + ', ' + this._12.toFixed(6) + ', ' + this._13.toFixed(6) + ', \n' + this._20.toFixed(6) + ', ' + this._21.toFixed(6) + ', ' + this._22.toFixed(6) + ', ' + this._23.toFixed(6) + ', \n' + this._30.toFixed(6) + ', ' + this._31.toFixed(6) + ', ' + this._32.toFixed(6) + ', ' + this._33.toFixed(6) + ']';
};
x3dom.fields.SFMatrix4f.prototype.setValueByStr = function(str) {
  var needTranspose = false;
  var val = /matrix.*\((.+)\)/;
  if(val.exec(str)) {
    str = RegExp.$1;
    needTranspose = true;
  }
  var arr = Array.map(str.split(/[,\s]+/), function(n) {
    return +n;
  });
  if(arr.length >= 16) {
    if(!needTranspose) {
      this._00 = arr[0];
      this._01 = arr[1];
      this._02 = arr[2];
      this._03 = arr[3];
      this._10 = arr[4];
      this._11 = arr[5];
      this._12 = arr[6];
      this._13 = arr[7];
      this._20 = arr[8];
      this._21 = arr[9];
      this._22 = arr[10];
      this._23 = arr[11];
      this._30 = arr[12];
      this._31 = arr[13];
      this._32 = arr[14];
      this._33 = arr[15];
    } else {
      this._00 = arr[0];
      this._01 = arr[4];
      this._02 = arr[8];
      this._03 = arr[12];
      this._10 = arr[1];
      this._11 = arr[5];
      this._12 = arr[9];
      this._13 = arr[13];
      this._20 = arr[2];
      this._21 = arr[6];
      this._22 = arr[10];
      this._23 = arr[14];
      this._30 = arr[3];
      this._31 = arr[7];
      this._32 = arr[11];
      this._33 = arr[15];
    }
  } else if(arr.length === 6) {
    this._00 = arr[0];
    this._01 = arr[1];
    this._02 = 0;
    this._03 = arr[4];
    this._10 = arr[2];
    this._11 = arr[3];
    this._12 = 0;
    this._13 = arr[5];
    this._20 = 0;
    this._21 = 0;
    this._22 = 1;
    this._23 = 0;
    this._30 = 0;
    this._31 = 0;
    this._32 = 0;
    this._33 = 1;
  } else {
    x3dom.debug.logWarning("SFMatrix4f - can't parse string: " + str);
  }
  return this;
};
x3dom.fields.SFVec2f = function(x, y) {
  if(arguments.length === 0) {
    this.x = this.y = 0;
  } else {
    this.x = x;
    this.y = y;
  }
};
x3dom.fields.SFVec2f.parse = function(str) {
  var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
  return new x3dom.fields.SFVec2f(+m[1], +m[2]);
};
x3dom.fields.SFVec2f.prototype.setValues = function(that) {
  this.x = that.x;
  this.y = that.y;
};
x3dom.fields.SFVec2f.prototype.add = function(that) {
  return new x3dom.fields.SFVec2f(this.x + that.x, this.y + that.y);
};
x3dom.fields.SFVec2f.prototype.subtract = function(that) {
  return new x3dom.fields.SFVec2f(this.x - that.x, this.y - that.y);
};
x3dom.fields.SFVec2f.prototype.negate = function() {
  return new x3dom.fields.SFVec2f(-this.x, -this.y);
};
x3dom.fields.SFVec2f.prototype.dot = function(that) {
  return this.x * that.x + this.y * that.y;
};
x3dom.fields.SFVec2f.prototype.reflect = function(n) {
  var d2 = this.dot(n) * 2;
  return new x3dom.fields.SFVec2f(this.x - d2 * n.x, this.y - d2 * n.y);
};
x3dom.fields.SFVec2f.prototype.normalize = function(that) {
  var n = this.length();
  if(n) {
    n = 1.0 / n;
  }
  return new x3dom.fields.SFVec2f(this.x * n, this.y * n);
};
x3dom.fields.SFVec2f.prototype.multComponents = function(that) {
  return new x3dom.fields.SFVec2f(this.x * that.x, this.y * that.y);
};
x3dom.fields.SFVec2f.prototype.multiply = function(n) {
  return new x3dom.fields.SFVec2f(this.x * n, this.y * n);
};
x3dom.fields.SFVec2f.prototype.divide = function(n) {
  var denom = n ? (1.0 / n) : 1.0;
  return new x3dom.fields.SFVec2f(this.x * denom, this.y * denom);
};
x3dom.fields.SFVec2f.prototype.equals = function(that, eps) {
  return Math.abs(this.x - that.x) < eps && Math.abs(this.y - that.y) < eps;
};
x3dom.fields.SFVec2f.prototype.length = function() {
  return Math.sqrt((this.x * this.x) + (this.y * this.y));
};
x3dom.fields.SFVec2f.prototype.toGL = function() {
  return [this.x, this.y];
};
x3dom.fields.SFVec2f.prototype.toString = function() {
  return "{ x " + this.x + " y " + this.y + " }";
};
x3dom.fields.SFVec2f.prototype.setValueByStr = function(str) {
  var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
  this.x = +m[1];
  this.y = +m[2];
  return this;
};
x3dom.fields.SFVec3f = function(x, y, z) {
  if(arguments.length === 0) {
    this.x = this.y = this.z = 0;
  } else {
    this.x = x;
    this.y = y;
    this.z = z;
  }
};
x3dom.fields.SFVec3f.copy = function(v) {
  return new x3dom.fields.SFVec3f(v.x, v.y, v.z);
};
x3dom.fields.SFVec3f.MIN = function() {
  return new x3dom.fields.SFVec3f(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);
};
x3dom.fields.SFVec3f.MAX = function() {
  return new x3dom.fields.SFVec3f(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
};
x3dom.fields.SFVec3f.parse = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    return new x3dom.fields.SFVec3f(+m[1], +m[2], +m[3]);
  } catch(e) {
    var c = x3dom.fields.SFColor.colorParse(str);
    return new x3dom.fields.SFVec3f(c.r, c.g, c.b);
  }
};
x3dom.fields.SFVec3f.prototype.setValues = function(that) {
  this.x = that.x;
  this.y = that.y;
  this.z = that.z;
};
x3dom.fields.SFVec3f.prototype.add = function(that) {
  return new x3dom.fields.SFVec3f(this.x + that.x, this.y + that.y, this.z + that.z);
};
x3dom.fields.SFVec3f.prototype.addScaled = function(that, s) {
  return new x3dom.fields.SFVec3f(this.x + s * that.x, this.y + s * that.y, this.z + s * that.z);
};
x3dom.fields.SFVec3f.prototype.subtract = function(that) {
  return new x3dom.fields.SFVec3f(this.x - that.x, this.y - that.y, this.z - that.z);
};
x3dom.fields.SFVec3f.prototype.negate = function() {
  return new x3dom.fields.SFVec3f(-this.x, -this.y, -this.z);
};
x3dom.fields.SFVec3f.prototype.dot = function(that) {
  return(this.x * that.x + this.y * that.y + this.z * that.z);
};
x3dom.fields.SFVec3f.prototype.cross = function(that) {
  return new x3dom.fields.SFVec3f(this.y * that.z - this.z * that.y, this.z * that.x - this.x * that.z, this.x * that.y - this.y * that.x);
};
x3dom.fields.SFVec3f.prototype.reflect = function(n) {
  var d2 = this.dot(n) * 2;
  return new x3dom.fields.SFVec3f(this.x - d2 * n.x, this.y - d2 * n.y, this.z - d2 * n.z);
};
x3dom.fields.SFVec3f.prototype.length = function() {
  return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));
};
x3dom.fields.SFVec3f.prototype.normalize = function(that) {
  var n = this.length();
  if(n) {
    n = 1.0 / n;
  }
  return new x3dom.fields.SFVec3f(this.x * n, this.y * n, this.z * n);
};
x3dom.fields.SFVec3f.prototype.multComponents = function(that) {
  return new x3dom.fields.SFVec3f(this.x * that.x, this.y * that.y, this.z * that.z);
};
x3dom.fields.SFVec3f.prototype.multiply = function(n) {
  return new x3dom.fields.SFVec3f(this.x * n, this.y * n, this.z * n);
};
x3dom.fields.SFVec3f.prototype.divide = function(n) {
  var denom = n ? (1.0 / n) : 1.0;
  return new x3dom.fields.SFVec3f(this.x * denom, this.y * denom, this.z * denom);
};
x3dom.fields.SFVec3f.prototype.equals = function(that, eps) {
  return Math.abs(this.x - that.x) < eps && Math.abs(this.y - that.y) < eps && Math.abs(this.z - that.z) < eps;
};
x3dom.fields.SFVec3f.prototype.toGL = function() {
  return [this.x, this.y, this.z];
};
x3dom.fields.SFVec3f.prototype.toString = function() {
  return "{ x " + this.x + " y " + this.y + " z " + this.z + " }";
};
x3dom.fields.SFVec3f.prototype.setValueByStr = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    this.x = +m[1];
    this.y = +m[2];
    this.z = +m[3];
  } catch(e) {
    var c = x3dom.fields.SFColor.colorParse(str);
    this.x = c.r;
    this.y = c.g;
    this.z = c.b;
  }
  return this;
};
x3dom.fields.Quaternion = function(x, y, z, w) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
};
x3dom.fields.Quaternion.prototype.multiply = function(that) {
  return new x3dom.fields.Quaternion(this.w * that.x + this.x * that.w + this.y * that.z - this.z * that.y, this.w * that.y + this.y * that.w + this.z * that.x - this.x * that.z, this.w * that.z + this.z * that.w + this.x * that.y - this.y * that.x, this.w * that.w - this.x * that.x - this.y * that.y - this.z * that.z);
};
x3dom.fields.Quaternion.parseAxisAngle = function(str) {
  var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
  return x3dom.fields.Quaternion.axisAngle(new x3dom.fields.SFVec3f(+m[1], +m[2], +m[3]), +m[4]);
};
x3dom.fields.Quaternion.axisAngle = function(axis, a) {
  var t = axis.length();
  if(t > x3dom.fields.Eps) {
    var s = Math.sin(a / 2) / t;
    var c = Math.cos(a / 2);
    return new x3dom.fields.Quaternion(axis.x * s, axis.y * s, axis.z * s, c);
  } else {
    return new x3dom.fields.Quaternion(0, 0, 0, 1);
  }
};
x3dom.fields.Quaternion.prototype.toMatrix = function() {
  var xx = this.x * this.x;
  var xy = this.x * this.y;
  var xz = this.x * this.z;
  var yy = this.y * this.y;
  var yz = this.y * this.z;
  var zz = this.z * this.z;
  var wx = this.w * this.x;
  var wy = this.w * this.y;
  var wz = this.w * this.z;
  return new x3dom.fields.SFMatrix4f(1 - 2 * (yy + zz), 2 * (xy - wz), 2 * (xz + wy), 0, 2 * (xy + wz), 1 - 2 * (xx + zz), 2 * (yz - wx), 0, 2 * (xz - wy), 2 * (yz + wx), 1 - 2 * (xx + yy), 0, 0, 0, 0, 1);
};
x3dom.fields.Quaternion.prototype.toAxisAngle = function() {
  var x = 0,
    y = 0,
    z = 0;
  var s = 0,
    a = 0;
  var that = this;
  if(this.w > 1) {
    that = x3dom.fields.Quaternion.normalize(this);
  }
  a = 2 * Math.acos(that.w);
  s = Math.sqrt(1 - that.w * that.w);
  if(s === 0) {
    x = that.x;
    y = that.y;
    z = that.z;
  } else {
    x = that.x / s;
    y = that.y / s;
    z = that.z / s;
  }
  return [new x3dom.fields.SFVec3f(x, y, z), a];
};
x3dom.fields.Quaternion.prototype.angle = function() {
  return 2 * Math.acos(this.w);
};
x3dom.fields.Quaternion.prototype.setValue = function(matrix) {
  var tr, s = 1;
  var qt = [0, 0, 0];
  var i = 0,
    j = 0,
    k = 0;
  var nxt = [1, 2, 0];
  tr = matrix._00 + matrix._11 + matrix._22;
  if(tr > 0.0) {
    s = Math.sqrt(tr + 1.0);
    this.w = s * 0.5;
    s = 0.5 / s;
    this.x = (matrix._21 - matrix._12) * s;
    this.y = (matrix._02 - matrix._20) * s;
    this.z = (matrix._10 - matrix._01) * s;
  } else {
    if(matrix._11 > matrix._00) {
      i = 1;
    } else {
      i = 0;
    }
    if(matrix._22 > matrix.at(i, i)) {
      i = 2;
    }
    j = nxt[i];
    k = nxt[j];
    s = Math.sqrt(matrix.at(i, i) - (matrix.at(j, j) + matrix.at(k, k)) + 1.0);
    qt[i] = s * 0.5;
    s = 0.5 / s;
    this.w = (matrix.at(k, j) - matrix.at(j, k)) * s;
    qt[j] = (matrix.at(j, i) + matrix.at(i, j)) * s;
    qt[k] = (matrix.at(k, i) + matrix.at(i, k)) * s;
    this.x = qt[0];
    this.y = qt[1];
    this.z = qt[2];
  }
  if(this.w > 1.0 || this.w < -1.0) {
    var errThreshold = 1 + (x3dom.fields.Eps * 100);
    if(this.w > errThreshold || this.w < -errThreshold) {
      x3dom.debug.logInfo("MatToQuat: BUG: |quat[4]| (" + this.w + ") >> 1.0 !");
    }
    if(this.w > 1.0) {
      this.w = 1.0;
    } else {
      this.w = -1.0;
    }
  }
};
x3dom.fields.Quaternion.prototype.dot = function(that) {
  return this.x * that.x + this.y * that.y + this.z * that.z + this.w * that.w;
};
x3dom.fields.Quaternion.prototype.add = function(that) {
  return new x3dom.fields.Quaternion(this.x + that.x, this.y + that.y, this.z + that.z, this.w + that.w);
};
x3dom.fields.Quaternion.prototype.subtract = function(that) {
  return new x3dom.fields.Quaternion(this.x - that.x, this.y - that.y, this.z - that.z, this.w - that.w);
};
x3dom.fields.Quaternion.prototype.setValues = function(that) {
  this.x = that.x;
  this.y = that.y;
  this.z = that.z;
  this.w = that.w;
};
x3dom.fields.Quaternion.prototype.equals = function(that, eps) {
  return Math.abs(this.x - that.x) < eps && Math.abs(this.y - that.y) < eps && Math.abs(this.z - that.z) < eps && Math.abs(this.w - that.w) < eps;
};
x3dom.fields.Quaternion.prototype.multScalar = function(s) {
  return new x3dom.fields.Quaternion(this.x * s, this.y * s, this.z * s, this.w * s);
};
x3dom.fields.Quaternion.prototype.normalize = function(that) {
  var d2 = this.dot(that);
  var id = 1.0;
  if(d2) {
    id = 1.0 / Math.sqrt(d2);
  }
  return new x3dom.fields.Quaternion(this.x * id, this.y * id, this.z * id, this.w * id);
};
x3dom.fields.Quaternion.prototype.negate = function() {
  return new x3dom.fields.Quaternion(-this.x, -this.y, -this.z, -this.w);
};
x3dom.fields.Quaternion.prototype.inverse = function() {
  return new x3dom.fields.Quaternion(-this.x, -this.y, -this.z, this.w);
};
x3dom.fields.Quaternion.prototype.slerp = function(that, t) {
  var cosom = this.dot(that);
  var rot1;
  if(cosom < 0.0) {
    cosom = -cosom;
    rot1 = that.negate();
  } else {
    rot1 = new x3dom.fields.Quaternion(that.x, that.y, that.z, that.w);
  }
  var scalerot0, scalerot1;
  if((1.0 - cosom) > 0.00001) {
    var omega = Math.acos(cosom);
    var sinom = Math.sin(omega);
    scalerot0 = Math.sin((1.0 - t) * omega) / sinom;
    scalerot1 = Math.sin(t * omega) / sinom;
  } else {
    scalerot0 = 1.0 - t;
    scalerot1 = t;
  }
  return this.multScalar(scalerot0).add(rot1.multScalar(scalerot1));
};
x3dom.fields.Quaternion.rotateFromTo = function(fromVec, toVec) {
  var from = fromVec.normalize();
  var to = toVec.normalize();
  var cost = from.dot(to);
  if(cost > 0.99999) {
    return new x3dom.fields.Quaternion(0, 0, 0, 1);
  } else if(cost < -0.99999) {
    var cAxis = new x3dom.fields.SFVec3f(1, 0, 0);
    var tmp = from.cross(cAxis);
    if(tmp.length() < 0.00001) {
      cAxis.x = 0;
      cAxis.y = 1;
      cAxis.z = 0;
      tmp = from.cross(cAxis);
    }
    tmp = tmp.normalize();
    return x3dom.fields.Quaternion.axisAngle(tmp, Math.PI);
  }
  var axis = fromVec.cross(toVec);
  axis = axis.normalize();
  var s = Math.sqrt(0.5 * (1.0 - cost));
  axis = axis.multiply(s);
  s = Math.sqrt(0.5 * (1.0 + cost));
  return new x3dom.fields.Quaternion(axis.x, axis.y, axis.z, s);
};
x3dom.fields.Quaternion.prototype.toString = function() {
  return '((' + this.x + ', ' + this.y + ', ' + this.z + '), ' + this.w + ')';
};
x3dom.fields.Quaternion.prototype.setValueByStr = function(str) {
  var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
  var quat = x3dom.fields.Quaternion.axisAngle(new x3dom.fields.SFVec3f(+m[1], +m[2], +m[3]), +m[4]);
  this.x = quat.x;
  this.y = quat.y;
  this.z = quat.z;
  this.w = quat.w;
  return this;
};
x3dom.fields.SFColor = function(r, g, b) {
  if(arguments.length === 0) {
    this.r = this.g = this.b = 0;
  } else {
    this.r = r;
    this.g = g;
    this.b = b;
  }
};
x3dom.fields.SFColor.parse = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    return new x3dom.fields.SFColor(+m[1], +m[2], +m[3]);
  } catch(e) {
    return x3dom.fields.SFColor.colorParse(str);
  }
};
x3dom.fields.SFColor.prototype.setHSV = function(h, s, v) {
  x3dom.debug.logWarning("SFColor.setHSV() NYI");
};
x3dom.fields.SFColor.prototype.getHSV = function() {
  var h = 0,
    s = 0,
    v = 0;
  x3dom.debug.logWarning("SFColor.getHSV() NYI");
  return [h, s, v];
};
x3dom.fields.SFColor.prototype.setValues = function(color) {
  this.r = color.r;
  this.g = color.g;
  this.b = color.b;
};
x3dom.fields.SFColor.prototype.equals = function(that, eps) {
  return Math.abs(this.r - that.r) < eps && Math.abs(this.g - that.g) < eps && Math.abs(this.b - that.b) < eps;
};
x3dom.fields.SFColor.prototype.add = function(that) {
  return new x3dom.fields.SFColor(this.r + that.r, this.g + that.g, this.b + that.b);
};
x3dom.fields.SFColor.prototype.subtract = function(that) {
  return new x3dom.fields.SFColor(this.r - that.r, this.g - that.g, this.b - that.b);
};
x3dom.fields.SFColor.prototype.multiply = function(n) {
  return new x3dom.fields.SFColor(this.r * n, this.g * n, this.b * n);
};
x3dom.fields.SFColor.prototype.toGL = function() {
  return [this.r, this.g, this.b];
};
x3dom.fields.SFColor.prototype.toString = function() {
  return "{ r " + this.r + " g " + this.g + " b " + this.b + " }";
};
x3dom.fields.SFColor.prototype.setValueByStr = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    this.r = +m[1];
    this.g = +m[2];
    this.b = +m[3];
  } catch(e) {
    var c = x3dom.fields.SFColor.colorParse(str);
    this.r = c.r;
    this.g = c.g;
    this.b = c.b;
  }
  return this;
};
x3dom.fields.SFColor.colorParse = function(color) {
  var red = 0,
    green = 0,
    blue = 0;
  var color_names = {
    aliceblue: 'f0f8ff',
    antiquewhite: 'faebd7',
    aqua: '00ffff',
    aquamarine: '7fffd4',
    azure: 'f0ffff',
    beige: 'f5f5dc',
    bisque: 'ffe4c4',
    black: '000000',
    blanchedalmond: 'ffebcd',
    blue: '0000ff',
    blueviolet: '8a2be2',
    brown: 'a52a2a',
    burlywood: 'deb887',
    cadetblue: '5f9ea0',
    chartreuse: '7fff00',
    chocolate: 'd2691e',
    coral: 'ff7f50',
    cornflowerblue: '6495ed',
    cornsilk: 'fff8dc',
    crimson: 'dc143c',
    cyan: '00ffff',
    darkblue: '00008b',
    darkcyan: '008b8b',
    darkgoldenrod: 'b8860b',
    darkgray: 'a9a9a9',
    darkgreen: '006400',
    darkkhaki: 'bdb76b',
    darkmagenta: '8b008b',
    darkolivegreen: '556b2f',
    darkorange: 'ff8c00',
    darkorchid: '9932cc',
    darkred: '8b0000',
    darksalmon: 'e9967a',
    darkseagreen: '8fbc8f',
    darkslateblue: '483d8b',
    darkslategray: '2f4f4f',
    darkturquoise: '00ced1',
    darkviolet: '9400d3',
    deeppink: 'ff1493',
    deepskyblue: '00bfff',
    dimgray: '696969',
    dodgerblue: '1e90ff',
    feldspar: 'd19275',
    firebrick: 'b22222',
    floralwhite: 'fffaf0',
    forestgreen: '228b22',
    fuchsia: 'ff00ff',
    gainsboro: 'dcdcdc',
    ghostwhite: 'f8f8ff',
    gold: 'ffd700',
    goldenrod: 'daa520',
    gray: '808080',
    green: '008000',
    greenyellow: 'adff2f',
    honeydew: 'f0fff0',
    hotpink: 'ff69b4',
    indianred: 'cd5c5c',
    indigo: '4b0082',
    ivory: 'fffff0',
    khaki: 'f0e68c',
    lavender: 'e6e6fa',
    lavenderblush: 'fff0f5',
    lawngreen: '7cfc00',
    lemonchiffon: 'fffacd',
    lightblue: 'add8e6',
    lightcoral: 'f08080',
    lightcyan: 'e0ffff',
    lightgoldenrodyellow: 'fafad2',
    lightgrey: 'd3d3d3',
    lightgreen: '90ee90',
    lightpink: 'ffb6c1',
    lightsalmon: 'ffa07a',
    lightseagreen: '20b2aa',
    lightskyblue: '87cefa',
    lightslateblue: '8470ff',
    lightslategray: '778899',
    lightsteelblue: 'b0c4de',
    lightyellow: 'ffffe0',
    lime: '00ff00',
    limegreen: '32cd32',
    linen: 'faf0e6',
    magenta: 'ff00ff',
    maroon: '800000',
    mediumaquamarine: '66cdaa',
    mediumblue: '0000cd',
    mediumorchid: 'ba55d3',
    mediumpurple: '9370d8',
    mediumseagreen: '3cb371',
    mediumslateblue: '7b68ee',
    mediumspringgreen: '00fa9a',
    mediumturquoise: '48d1cc',
    mediumvioletred: 'c71585',
    midnightblue: '191970',
    mintcream: 'f5fffa',
    mistyrose: 'ffe4e1',
    moccasin: 'ffe4b5',
    navajowhite: 'ffdead',
    navy: '000080',
    oldlace: 'fdf5e6',
    olive: '808000',
    olivedrab: '6b8e23',
    orange: 'ffa500',
    orangered: 'ff4500',
    orchid: 'da70d6',
    palegoldenrod: 'eee8aa',
    palegreen: '98fb98',
    paleturquoise: 'afeeee',
    palevioletred: 'd87093',
    papayawhip: 'ffefd5',
    peachpuff: 'ffdab9',
    peru: 'cd853f',
    pink: 'ffc0cb',
    plum: 'dda0dd',
    powderblue: 'b0e0e6',
    purple: '800080',
    red: 'ff0000',
    rosybrown: 'bc8f8f',
    royalblue: '4169e1',
    saddlebrown: '8b4513',
    salmon: 'fa8072',
    sandybrown: 'f4a460',
    seagreen: '2e8b57',
    seashell: 'fff5ee',
    sienna: 'a0522d',
    silver: 'c0c0c0',
    skyblue: '87ceeb',
    slateblue: '6a5acd',
    slategray: '708090',
    snow: 'fffafa',
    springgreen: '00ff7f',
    steelblue: '4682b4',
    tan: 'd2b48c',
    teal: '008080',
    thistle: 'd8bfd8',
    tomato: 'ff6347',
    turquoise: '40e0d0',
    violet: 'ee82ee',
    violetred: 'd02090',
    wheat: 'f5deb3',
    white: 'ffffff',
    whitesmoke: 'f5f5f5',
    yellow: 'ffff00',
    yellowgreen: '9acd32'
  };
  if(color_names[color]) {
    color = "#" + color_names[color];
  }
  if(color.substr && color.substr(0, 1) === "#") {
    color = color.substr(1);
    var len = color.length;
    if(len === 6) {
      red = parseInt("0x" + color.substr(0, 2), 16) / 255.0;
      green = parseInt("0x" + color.substr(2, 2), 16) / 255.0;
      blue = parseInt("0x" + color.substr(4, 2), 16) / 255.0;
    } else if(len === 3) {
      red = parseInt("0x" + color.substr(0, 1), 16) / 15.0;
      green = parseInt("0x" + color.substr(1, 1), 16) / 15.0;
      blue = parseInt("0x" + color.substr(2, 1), 16) / 15.0;
    }
  }
  return new x3dom.fields.SFColor(red, green, blue);
};
x3dom.fields.SFImage = function(w, h, c, arr) {
  if(arguments.length === 0) {
    this.width = this.height = this.comp = 0;
    this.array = [];
  } else {
    this.width = w;
    this.height = h;
    this.comp = c;
    arr.map(function(v) {
      this.array.push(v);
    }, this.array);
  }
};
x3dom.fields.SFImage.parse = function(str) {
  var img = new x3dom.fields.SFImage();
  img.setValueByStr(str);
  return img;
};
x3dom.fields.SFImage.prototype.setValueByStr = function(str) {
  var mc = str.match(/(\w+)/g);
  var n = mc.length;
  var c2 = 0;
  var hex = "0123456789ABCDEF";
  this.array = [];
  if(n > 2) {
    this.width = +mc[0];
    this.height = +mc[1];
    this.comp = +mc[2];
    c2 = 2 * this.comp;
  } else {
    this.width = 0;
    this.height = 0;
    this.comp = 0;
    return;
  }
  var len, i;
  for(i = 3; i < n; i++) {
    if(!mc[i].substr) {
      continue;
    }
    if(mc[i].substr(1, 1).toLowerCase() !== "x") {
      var out = "";
      var inp = parseInt(mc[i], 10);
      while(inp !== 0) {
        out = hex.charAt(inp % 16) + out;
        inp = inp >> 4;
      }
      len = out.length;
      while(out.length < c2) {
        out = "0" + out;
      }
      mc[i] = "0x" + out;
    }
    if(mc[i].substr(1, 1).toLowerCase() === "x") {
      mc[i] = mc[i].substr(2);
      len = mc[i].length;
      var r, g, b, a;
      if(len === c2) {
        if(this.comp === 1) {
          r = parseInt("0x" + mc[i].substr(0, 2), 16);
          this.array.push(r);
        } else if(this.comp === 2) {
          r = parseInt("0x" + mc[i].substr(0, 2), 16);
          g = parseInt("0x" + mc[i].substr(2, 2), 16);
          this.array.push(r, g);
        } else if(this.comp === 3) {
          r = parseInt("0x" + mc[i].substr(0, 2), 16);
          g = parseInt("0x" + mc[i].substr(2, 2), 16);
          b = parseInt("0x" + mc[i].substr(4, 2), 16);
          this.array.push(r, g, b);
        } else if(this.comp === 4) {
          r = parseInt("0x" + mc[i].substr(0, 2), 16);
          g = parseInt("0x" + mc[i].substr(2, 2), 16);
          b = parseInt("0x" + mc[i].substr(4, 2), 16);
          a = parseInt("0x" + mc[i].substr(6, 2), 16);
          this.array.push(r, g, b, a);
        }
      }
    }
  }
};
x3dom.fields.SFImage.prototype.toGL = function() {
  var a = [];
  Array.map(this.array, function(c) {
    a.push(c);
  });
  return a;
};
x3dom.fields.MFColor = function(colorArray) {
  if(arguments.length === 0) {} else {
    var that = this;
    colorArray.map(function(c) {
      that.push(c);
    }, this);
  }
};
x3dom.fields.MFColor.prototype = x3dom.extend([]);
x3dom.fields.MFColor.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var colors = [];
  for(var i = 0, n = mc.length; i < n; i += 3) {
    colors.push(new x3dom.fields.SFColor(+mc[i + 0], +mc[i + 1], +mc[i + 2]));
  }
  return new x3dom.fields.MFColor(colors);
};
x3dom.fields.MFColor.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i += 3) {
    this.push(new x3dom.fields.SFColor(+mc[i + 0], +mc[i + 1], +mc[i + 2]));
  }
};
x3dom.fields.MFColor.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(c) {
    a.push(c.r);
    a.push(c.g);
    a.push(c.b);
  });
  return a;
};
x3dom.fields.SFColorRGBA = function(r, g, b, a) {
  if(arguments.length === 0) {
    this.r = this.g = this.b = this.a = 0;
  } else {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }
};
x3dom.fields.SFColorRGBA.parse = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    return new x3dom.fields.SFColorRGBA(+m[1], +m[2], +m[3], +m[4]);
  } catch(e) {
    return x3dom.fields.SFColorRGBA.colorParse(str);
  }
};
x3dom.fields.SFColorRGBA.prototype.setValues = function(color) {
  this.r = color.r;
  this.g = color.g;
  this.b = color.b;
  this.a = color.a;
};
x3dom.fields.SFColorRGBA.prototype.equals = function(that, eps) {
  return Math.abs(this.r - that.r) < eps && Math.abs(this.g - that.g) < eps && Math.abs(this.b - that.b) < eps && Math.abs(this.a - that.a) < eps;
};
x3dom.fields.SFColorRGBA.prototype.toGL = function() {
  return [this.r, this.g, this.b, this.a];
};
x3dom.fields.SFColorRGBA.prototype.toString = function() {
  return "{ r " + this.r + " g " + this.g + " b " + this.b + " a " + this.a + " }";
};
x3dom.fields.SFColorRGBA.prototype.setValueByStr = function(str) {
  try {
    var m = /^([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)\s*,?\s*([+\-]?\d*\.*\d*[eE]?[+\-]?\d*?)$/.exec(str);
    this.r = +m[1];
    this.g = +m[2];
    this.b = +m[3];
    this.a = +m[4];
  } catch(e) {
    var c = x3dom.fields.SFColorRGBA.colorParse(str);
    this.r = c.r;
    this.g = c.g;
    this.b = c.b;
    this.a = c.a;
  }
  return this;
};
x3dom.fields.MFColorRGBA = function(colorArray) {
  if(arguments.length === 0) {} else {
    var that = this;
    colorArray.map(function(c) {
      that.push(c);
    }, this);
  }
};
x3dom.fields.MFColorRGBA.prototype = x3dom.extend([]);
x3dom.fields.MFColorRGBA.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var colors = [];
  for(var i = 0, n = mc.length; i < n; i += 4) {
    colors.push(new x3dom.fields.SFColorRGBA(+mc[i + 0], +mc[i + 1], +mc[i + 2], +mc[i + 3]));
  }
  return new x3dom.fields.MFColorRGBA(colors);
};
x3dom.fields.MFColorRGBA.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i += 4) {
    this.push(new x3dom.fields.SFColor(+mc[i + 0], +mc[i + 1], +mc[i + 2], +mc[i + 3]));
  }
};
x3dom.fields.MFColorRGBA.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(c) {
    a.push(c.r);
    a.push(c.g);
    a.push(c.b);
    a.push(c.a);
  });
  return a;
};
x3dom.fields.MFRotation = function(rotArray) {
  if(arguments.length === 0) {} else {
    var that = this;
    rotArray.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFRotation.prototype = x3dom.extend([]);
x3dom.fields.MFRotation.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var vecs = [];
  for(var i = 0, n = mc.length; i < n; i += 4) {
    vecs.push(x3dom.fields.Quaternion.axisAngle(new x3dom.fields.SFVec3f(+mc[i + 0], +mc[i + 1], +mc[i + 2]), +mc[i + 3]));
  }
  return new x3dom.fields.MFRotation(vecs);
};
x3dom.fields.MFRotation.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i += 4) {
    this.push(x3dom.fields.Quaternion.axisAngle(new x3dom.fields.SFVec3f(+mc[i + 0], +mc[i + 1], +mc[i + 2]), +mc[i + 3]));
  }
};
x3dom.fields.MFRotation.prototype.toGL = function() {
  var a = [];
  return a;
};
x3dom.fields.MFVec3f = function(vec3Array) {
  if(arguments.length === 0) {} else {
    var that = this;
    vec3Array.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFVec3f.copy = function(vec3Array) {
  var destination = new x3dom.fields.MFVec3f();
  vec3Array.map(function(v) {
    destination.push(x3dom.fields.SFVec3f.copy(v));
  }, this);
  return destination;
};
x3dom.fields.MFVec3f.prototype = x3dom.extend([]);
x3dom.fields.MFVec3f.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var vecs = [];
  for(var i = 0, n = mc.length; i < n; i += 3) {
    vecs.push(new x3dom.fields.SFVec3f(+mc[i + 0], +mc[i + 1], +mc[i + 2]));
  }
  return new x3dom.fields.MFVec3f(vecs);
};
x3dom.fields.MFVec3f.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i += 3) {
    this.push(new x3dom.fields.SFVec3f(+mc[i + 0], +mc[i + 1], +mc[i + 2]));
  }
};
x3dom.fields.MFVec3f.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(c) {
    a.push(c.x);
    a.push(c.y);
    a.push(c.z);
  });
  return a;
};
x3dom.fields.MFVec2f = function(vec2Array) {
  if(arguments.length === 0) {} else {
    var that = this;
    vec2Array.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFVec2f.prototype = x3dom.extend([]);
x3dom.fields.MFVec2f.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var vecs = [];
  for(var i = 0, n = mc.length; i < n; i += 2) {
    vecs.push(new x3dom.fields.SFVec2f(+mc[i + 0], +mc[i + 1]));
  }
  return new x3dom.fields.MFVec2f(vecs);
};
x3dom.fields.MFVec2f.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i += 2) {
    this.push(new x3dom.fields.SFVec2f(+mc[i + 0], +mc[i + 1]));
  }
};
x3dom.fields.MFVec2f.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(v) {
    a.push(v.x);
    a.push(v.y);
  });
  return a;
};
x3dom.fields.MFInt32 = function(array) {
  if(arguments.length === 0) {} else {
    var that = this;
    array.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFInt32.prototype = x3dom.extend([]);
x3dom.fields.MFInt32.parse = function(str) {
  var mc = str.match(/([+\-]?\d+\s*){1},?\s*/g);
  var vals = [];
  for(var i = 0, n = mc.length; i < n; ++i) {
    vals.push(parseInt(mc[i], 10));
  }
  return new x3dom.fields.MFInt32(vals);
};
x3dom.fields.MFInt32.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-]?\d+\s*){1},?\s*/g);
  for(var i = 0, n = mc.length; i < n; ++i) {
    this.push(parseInt(mc[i], 10));
  }
};
x3dom.fields.MFInt32.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(v) {
    a.push(v);
  });
  return a;
};
x3dom.fields.MFFloat = function(array) {
  if(arguments.length === 0) {} else {
    var that = this;
    array.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFFloat.prototype = x3dom.extend([]);
x3dom.fields.MFFloat.parse = function(str) {
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  var vals = [];
  for(var i = 0, n = mc.length; i < n; i++) {
    vals.push(+mc[i]);
  }
  return new x3dom.fields.MFFloat(vals);
};
x3dom.fields.MFFloat.prototype.setValueByStr = function(str) {
  while(this.length) {
    this.pop();
  }
  var mc = str.match(/([+\-0-9eE\.]+)/g);
  for(var i = 0, n = mc.length; i < n; i++) {
    this.push(+mc[i]);
  }
};
x3dom.fields.MFFloat.prototype.toGL = function() {
  var a = [];
  Array.map(this, function(v) {
    a.push(v);
  });
  return a;
};
x3dom.fields.MFString = function(strArray) {
  if(arguments.length === 0) {} else {
    var that = this;
    strArray.map(function(v) {
      that.push(v);
    }, this);
  }
};
x3dom.fields.MFString.parse = function(str) {
  var arr = [];
  if(str.length && str[0] == '"') {
    var m, re = /"((?:[^\\"]|\\\\|\\")*)"/g;
    while((m = re.exec(str))) {
      var s = m[1].replace(/\\([\\"])/, "$1");
      if(s !== undefined) {
        arr.push(s);
      }
    }
  } else {
    arr.push(str);
  }
  return new x3dom.fields.MFString(arr);
};
x3dom.fields.MFString.prototype = x3dom.extend([]);
x3dom.fields.MFString.prototype.setValueByStr = function(str) {
  var arr = this;
  while(arr.length) {
    arr.pop();
  }
  if(str.length && str[0] == '"') {
    var m, re = /"((?:[^\\"]|\\\\|\\")*)"/g;
    while((m = re.exec(str))) {
      var s = m[1].replace(/\\([\\"])/, "$1");
      if(s !== undefined) {
        arr.push(s);
      }
    }
  } else {
    arr.push(str);
  }
  return this;
};
x3dom.fields.MFString.prototype.toString = function() {
  var str = "";
  for(var i = 0; i < this.length; i++) {
    str = str + this[i] + " ";
  }
  return str;
};
x3dom.fields.SFNode = function(type) {
  this.type = type;
  this.node = null;
};
x3dom.fields.SFNode.prototype.hasLink = function(node) {
  return(node ? (this.node === node) : this.node);
};
x3dom.fields.SFNode.prototype.addLink = function(node) {
  this.node = node;
  return true;
};
x3dom.fields.SFNode.prototype.rmLink = function(node) {
  if(this.node === node) {
    this.node = null;
    return true;
  } else {
    return false;
  }
};
x3dom.fields.MFNode = function(type) {
  this.type = type;
  this.nodes = [];
};
x3dom.fields.MFNode.prototype.hasLink = function(node) {
  if(node) {
    for(var i = 0, n = this.nodes.length; i < n; i++) {
      if(this.nodes[i] === node) {
        return true;
      }
    }
  } else {
    return(this.length > 0);
  }
  return false;
};
x3dom.fields.MFNode.prototype.addLink = function(node) {
  this.nodes.push(node);
  return true;
};
x3dom.fields.MFNode.prototype.rmLink = function(node) {
  for(var i = 0, n = this.nodes.length; i < n; i++) {
    if(this.nodes[i] === node) {
      this.nodes.splice(i, 1);
      return true;
    }
  }
  return false;
};
x3dom.fields.MFNode.prototype.length = function() {
  return this.nodes.length;
};
x3dom.fields.Line = function(pos, dir) {
  if(arguments.length === 0) {
    this.pos = new x3dom.fields.SFVec3f(0, 0, 0);
    this.dir = new x3dom.fields.SFVec3f(0, 0, 1);
  } else {
    this.pos = new x3dom.fields.SFVec3f(pos.x, pos.y, pos.z);
    var n = dir.length();
    if(n) {
      n = 1.0 / n;
    }
    this.dir = new x3dom.fields.SFVec3f(dir.x * n, dir.y * n, dir.z * n);
  }
  this.enter = 0;
  this.exit = 0;
  this.hitObject = null;
  this.hitPoint = {};
  this.dist = Number.MAX_VALUE;
};
x3dom.fields.Line.prototype.toString = function() {
  var str = 'Line: [' + this.pos.toString() + '; ' + this.dir.toString() + ']';
  return str;
};
x3dom.fields.Line.prototype.intersect = function(low, high) {
  var isect = 0.0;
  var out = Number.MAX_VALUE;
  var r, te, tl;
  if(this.dir.x > x3dom.fields.Eps) {
    r = 1.0 / this.dir.x;
    te = (low.x - this.pos.x) * r;
    tl = (high.x - this.pos.x) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
  } else if(this.dir.x < -x3dom.fields.Eps) {
    r = 1.0 / this.dir.x;
    te = (high.x - this.pos.x) * r;
    tl = (low.x - this.pos.x) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
  } else if(this.pos.x < low.x || this.pos.x > high.x) {
    return false;
  }
  if(this.dir.y > x3dom.fields.Eps) {
    r = 1.0 / this.dir.y;
    te = (low.y - this.pos.y) * r;
    tl = (high.y - this.pos.y) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
    if(isect - out >= x3dom.fields.Eps) {
      return false;
    }
  } else if(this.dir.y < -x3dom.fields.Eps) {
    r = 1.0 / this.dir.y;
    te = (high.y - this.pos.y) * r;
    tl = (low.y - this.pos.y) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
    if(isect - out >= x3dom.fields.Eps) {
      return false;
    }
  } else if(this.pos.y < low.y || this.pos.y > high.y) {
    return false;
  }
  if(this.dir.z > x3dom.fields.Eps) {
    r = 1.0 / this.dir.z;
    te = (low.z - this.pos.z) * r;
    tl = (high.z - this.pos.z) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
  } else if(this.dir.z < -x3dom.fields.Eps) {
    r = 1.0 / this.dir.z;
    te = (high.z - this.pos.z) * r;
    tl = (low.z - this.pos.z) * r;
    if(tl < out) {
      out = tl;
    }
    if(te > isect) {
      isect = te;
    }
  } else if(this.pos.z < low.z || this.pos.z > high.z) {
    return false;
  }
  this.enter = isect;
  this.exit = out;
  return(isect - out < x3dom.fields.Eps);
};
x3dom.NodeNameSpace = function(name, document) {
  this.name = name;
  this.doc = document;
  this.baseURL = "";
  this.defMap = {};
  this.parent = null;
  this.childSpaces = [];
};
x3dom.NodeNameSpace.prototype.addNode = function(node, name) {
  this.defMap[name] = node;
  node._nameSpace = this;
};
x3dom.NodeNameSpace.prototype.removeNode = function(name) {
  var node = this.defMap.name;
  delete this.defMap.name;
  if(node) {
    node._nameSpace = null;
  }
};
x3dom.NodeNameSpace.prototype.getNamedNode = function(name) {
  return this.defMap[name];
};
x3dom.NodeNameSpace.prototype.getNamedElement = function(name) {
  var node = this.defMap[name];
  return(node ? node._xmlNode : null);
};
x3dom.NodeNameSpace.prototype.addSpace = function(space) {
  this.childSpaces.push(space);
  space.parent = this;
};
x3dom.NodeNameSpace.prototype.removeSpace = function(space) {
  this.childSpaces.push(space);
  space.parent = null;
};
x3dom.NodeNameSpace.prototype.setBaseURL = function(url) {
  var i = url.lastIndexOf("/");
  this.baseURL = (i >= 0) ? url.substr(0, i + 1) : "";
  x3dom.debug.logInfo("setBaseURL: " + this.baseURL);
};
x3dom.NodeNameSpace.prototype.getURL = function(url) {
  if(url === undefined || !url.length) {
    return "";
  } else {
    return((url[0] === '/') || (url.indexOf(":") >= 0)) ? url : (this.baseURL + url);
  }
};
x3dom.getElementAttribute = function(attrName) {
  var attrib = this.__getAttribute(attrName);
  if((attrib !== undefined) || !this._x3domNode) return attrib;
  else return this._x3domNode._vf[attrName];
};
x3dom.setElementAttribute = function(attrName, newVal) {
  this.__setAttribute(attrName, newVal);
  this._x3domNode.updateField(attrName, newVal);
  this._x3domNode._nameSpace.doc.needRender = true;
};
x3dom.NodeNameSpace.prototype.setupTree = function(domNode) {
  var n, t;
  if(x3dom.isX3DElement(domNode)) {
    if(domNode._x3domNode) {
      x3dom.debug.logWarning('Tree is already initialized');
      return;
    }
    if((domNode.tagName !== undefined) && (!domNode.__addEventListener) && (!domNode.__removeEventListener)) {
      domNode.__addEventListener = domNode.addEventListener;
      domNode.addEventListener = function(type, func, phase) {
        if(!this._x3domNode._listeners[type]) {
          this._x3domNode._listeners[type] = [];
        }
        this._x3domNode._listeners[type].push(func);
        x3dom.debug.logInfo('addEventListener for ' + this.tagName + ".on" + type);
        this.__addEventListener(type, func, phase);
      };
      domNode.__removeEventListener = domNode.removeEventListener;
      domNode.removeEventListener = function(type, func, phase) {
        var list = this._x3domNode._listeners[type];
        if(list) {
          for(var it = 0; it < list.length; it++) {
            if(list[it] == func) {
              list.splice(it, 1);
              x3dom.debug.logInfo('removeEventListener for ' + this.tagName + ".on" + type);
            }
          }
        }
        this.__removeEventListener(type, func, phase);
      };
    }
    if(domNode.hasAttribute('USE')) {
      n = this.defMap[domNode.getAttribute('USE')];
      if(n === null) {
        x3dom.debug.logWarning('Could not USE: ' + domNode.getAttribute('USE'));
      }
      return n;
    } else {
      if(domNode.localName.toLowerCase() === 'route') {
        var route = domNode;
        var fromNode = this.defMap[route.getAttribute('fromNode')];
        var toNode = this.defMap[route.getAttribute('toNode')];
        if(!(fromNode && toNode)) {
          x3dom.debug.logWarning("Broken route - can't find all DEFs for " + route.getAttribute('fromNode') + " -> " + route.getAttribute('toNode'));
          return null;
        }
        fromNode.setupRoute(route.getAttribute('fromField'), toNode, route.getAttribute('toField'));
        return null;
      }
      var nodeType = x3dom.nodeTypesLC[domNode.localName.toLowerCase()];
      if(nodeType === undefined) {
        x3dom.debug.logInfo("Unrecognised X3D element &lt;" + domNode.localName + "&gt;.");
      } else {
        var ctx = {
          doc: this.doc,
          xmlNode: domNode
        };
        n = new nodeType(ctx);
        n._nameSpace = this;
        if((x3dom.userAgentFeature.supportsDOMAttrModified === false) && (domNode.tagName !== undefined)) {
          if(!domNode.__setAttribute) {
            domNode.__setAttribute = domNode.setAttribute;
            domNode.setAttribute = x3dom.setElementAttribute;
          }
          if(!domNode.__getAttribute) {
            domNode.__getAttribute = domNode.getAttribute;
            domNode.getAttribute = x3dom.getElementAttribute;
          }
        }
        if(domNode.hasAttribute('DEF')) {
          n._DEF = domNode.getAttribute('DEF');
          this.defMap[n._DEF] = n;
        } else {
          if(domNode.hasAttribute('id')) {
            n._DEF = domNode.getAttribute('id');
            this.defMap[n._DEF] = n;
          }
        }
        if(domNode.highlight === undefined) {
          domNode.highlight = function(enable, colorStr) {
            var color = x3dom.fields.SFColor.parse(colorStr);
            this._x3domNode.highlight(enable, color);
            this._x3domNode._nameSpace.doc.needRender = true;
          };
        }
        n._xmlNode = domNode;
        domNode._x3domNode = n;
        var that = this;
        Array.forEach(domNode.childNodes, function(childDomNode) {
          var c = that.setupTree(childDomNode);
          if(c) {
            n.addChild(c, childDomNode.getAttribute("containerField"));
          }
        });
        n.nodeChanged();
        return n;
      }
    }
  } else if(domNode.localName) {
    x3dom.debug.logInfo("Unrecognised X3D element &lt;" + domNode.localName + "&gt;.");
    n = null;
  }
  return n;
};
x3dom.registerNodeType("X3DNode", "Core", defineClass(null, function(ctx) {
  this._DEF = null;
  this._nameSpace = null;
  this._vf = {};
  this._cf = {};
  this._fieldWatchers = {};
  this._parentNodes = [];
  this._listeners = {};
  this._childNodes = [];
  this.addField_SFNode('metadata', x3dom.nodeTypes.X3DMetadataObject);
}, {
  type: function() {
    return this.constructor;
  },
  typeName: function() {
    return this.constructor._typeName;
  },
  addChild: function(node, containerFieldName) {
    if(node) {
      var field = null;
      if(containerFieldName) {
        field = this._cf[containerFieldName];
      } else {
        for(var fieldName in this._cf) {
          if(this._cf.hasOwnProperty(fieldName)) {
            var testField = this._cf[fieldName];
            if(x3dom.isa(node, testField.type)) {
              field = testField;
              break;
            }
          }
        }
      }
      if(field && field.addLink(node)) {
        node._parentNodes.push(this);
        this._childNodes.push(node);
        node.parentAdded(this);
        return true;
      }
    }
    return false;
  },
  removeChild: function(node) {
    if(node) {
      for(var fieldName in this._cf) {
        if(this._cf.hasOwnProperty(fieldName)) {
          var field = this._cf[fieldName];
          if(field.rmLink(node)) {
            for(var i = 0, n = node._parentNodes.length; i < n; i++) {
              if(node._parentNodes[i] === this) {
                node._parentNodes.splice(i, 1);
                node.parentRemoved(this);
              }
            }
            for(var j = 0, m = this._childNodes.length; j < m; j++) {
              if(this._childNodes[j] === node) {
                this._childNodes.splice(j, 1);
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  },
  parentAdded: function(parent) {},
  parentRemoved: function(parent) {
    for(var i = 0, n = this._childNodes.length; i < n; i++) {
      if(this._childNodes[i]) {
        this._childNodes[i].parentRemoved(this);
      }
    }
  },
  getCurrentTransform: function() {
    if(this._parentNodes.length >= 1) {
      return this.transformMatrix(this._parentNodes[0].getCurrentTransform());
    } else {
      return x3dom.fields.SFMatrix4f.identity();
    }
  },
  transformMatrix: function(transform) {
    return transform;
  },
  getVolume: function(min, max, invalidate) {
    var valid = false;
    for(var i = 0, n = this._childNodes.length; i < n; i++) {
      if(this._childNodes[i]) {
        var childMin = x3dom.fields.SFVec3f.MAX();
        var childMax = x3dom.fields.SFVec3f.MIN();
        valid = this._childNodes[i].getVolume(childMin, childMax, invalidate) || valid;
        if(valid) {
          if(min.x > childMin.x) {
            min.x = childMin.x;
          }
          if(min.y > childMin.y) {
            min.y = childMin.y;
          }
          if(min.z > childMin.z) {
            min.z = childMin.z;
          }
          if(max.x < childMax.x) {
            max.x = childMax.x;
          }
          if(max.y < childMax.y) {
            max.y = childMax.y;
          }
          if(max.z < childMax.z) {
            max.z = childMax.z;
          }
        }
      }
    }
    return valid;
  },
  highlight: function(enable, color) {
    if(this._vf.hasOwnProperty("diffuseColor")) {
      if(enable) {
        if(this._actDiffuseColor === undefined) {
          this._actDiffuseColor = new x3dom.fields.SFColor();
          this._highlightOn = false;
        }
        if(!this._highlightOn) {
          this._actDiffuseColor.setValues(this._vf.diffuseColor);
          this._vf.diffuseColor.setValues(color);
          this._highlightOn = true;
        }
      } else {
        if(this._actDiffuseColor !== undefined) {
          this._vf.diffuseColor.setValues(this._actDiffuseColor);
          this._highlightOn = false;
        }
      }
    }
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) this._childNodes[i].highlight(enable, color);
    }
  },
  find: function(type) {
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        if(this._childNodes[i].constructor == type) {
          return this._childNodes[i];
        }
        var c = this._childNodes[i].find(type);
        if(c) {
          return c;
        }
      }
    }
    return null;
  },
  findAll: function(type) {
    var found = [];
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        if(this._childNodes[i].constructor == type) {
          found.push(this._childNodes[i]);
        }
        found = found.concat(this._childNodes[i].findAll(type));
      }
    }
    return found;
  },
  findParentProperty: function(propertyName, checkDOMNode) {
    var value = this[propertyName];
    if(!value && checkDOMNode && this._xmlNode) {
      value = this._xmlNode[propertyName];
    }
    if(!value) {
      for(var i = 0, n = this._parentNodes.length; i < n; i++) {
        if((value = this._parentNodes[i].findParentProperty(propertyName, checkDOMNode))) {
          break;
        }
      }
    }
    return value;
  },
  findX3DDoc: function() {
    return this._nameSpace.doc;
  },
  collectDrawableObjects: function(transform, out) {
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        var childTransform = this._childNodes[i].transformMatrix(transform);
        this._childNodes[i].collectDrawableObjects(childTransform, out);
      }
    }
  },
  doIntersect: function(line) {
    var isect = false;
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        isect = this._childNodes[i].doIntersect(line) || isect;
      }
    }
    return isect;
  },
  postMessage: function(field, msg) {
    this._vf[field] = msg;
    var listeners = this._fieldWatchers[field];
    var thisp = this;
    if(listeners) {
      Array.forEach(listeners, function(l) {
        l.call(thisp, msg);
      });
    }
  },
  updateField: function(field, msg) {
    var f = this._vf[field];
    if(f === undefined) {
      f = {};
      this._vf[field] = f;
    }
    if(f !== null) {
      try {
        this._vf[field].setValueByStr(msg);
      } catch(exc1) {
        try {
          switch((typeof(this._vf[field])).toString()) {
          case "number":
            this._vf[field] = +msg;
            break;
          case "boolean":
            this._vf[field] = (msg.toLowerCase() === "true");
            break;
          case "string":
            this._vf[field] = msg;
            break;
          }
        } catch(exc2) {
          x3dom.debug.logError("updateField: setValueByStr() NYI for " + typeof(f));
        }
      }
      this.fieldChanged(field);
    }
  },
  setupRoute: function(fromField, toNode, toField) {
    var pos;
    var fieldName;
    var pre = "set_",
      post = "_changed";
    if(!this._vf[fromField]) {
      pos = fromField.indexOf(pre);
      if(pos === 0) {
        fieldName = fromField.substr(pre.length, fromField.length - 1);
        if(this._vf[fieldName]) {
          fromField = fieldName;
        }
      } else {
        pos = fromField.indexOf(post);
        if(pos > 0) {
          fieldName = fromField.substr(0, fromField.length - post.length);
          if(this._vf[fieldName]) {
            fromField = fieldName;
          }
        }
      }
    }
    if(!toNode._vf[toField]) {
      pos = toField.indexOf(pre);
      if(pos === 0) {
        fieldName = toField.substr(pre.length, toField.length - 1);
        if(toNode._vf[fieldName]) {
          toField = fieldName;
        }
      } else {
        pos = toField.indexOf(post);
        if(pos > 0) {
          fieldName = toField.substr(0, toField.length - post.length);
          if(toNode._vf[fieldName]) {
            toField = fieldName;
          }
        }
      }
    }
    if(!this._fieldWatchers[fromField]) {
      this._fieldWatchers[fromField] = [];
    }
    this._fieldWatchers[fromField].push(function(msg) {
      toNode.postMessage(toField, msg);
    });
    if(!toNode._fieldWatchers[toField]) {
      toNode._fieldWatchers[toField] = [];
    }
    toNode._fieldWatchers[toField].push(function(msg) {
      toNode._vf[toField] = msg;
      toNode.fieldChanged(toField);
    });
  },
  fieldChanged: function(fieldName) {},
  nodeChanged: function() {},
  callEvtHandler: function(eventType, event) {
    var node = this;
    try {
      var attrib = node._xmlNode[eventType];
      event.target = node._xmlNode;
      if(typeof(attrib) === "function") {
        attrib.call(node._xmlNode, event);
      } else {
        var funcStr = node._xmlNode.getAttribute(eventType);
        var func = new Function('event', funcStr);
        func.call(node._xmlNode, event);
      }
      var list = node._listeners[event.type];
      if(list) {
        for(var it = 0; it < list.length; it++) {
          list[it].call(node._xmlNode, event);
        }
      }
    } catch(ex) {
      x3dom.debug.logException(ex);
    }
    return event.cancelBubble;
  },
  initSetter: function(xmlNode, name) {
    if(xmlNode.__defineSetter__ != undefined) {
      xmlNode.__defineSetter__(name, function(value) {
        xmlNode.setAttribute(name, value);
      });
    } else {
      Object.defineProperty(xmlNode, name, {
        set: function(value) {
          xmlNode.setAttribute(name, value);
        }
      });
    }
  },
  addField_SFInt32: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode.hasAttribute(name) ? parseInt(ctx.xmlNode.getAttribute(name), 10) : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFFloat: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? +ctx.xmlNode.getAttribute(name) : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFDouble: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? +ctx.xmlNode.getAttribute(name) : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFTime: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? +ctx.xmlNode.getAttribute(name) : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFBool: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? ctx.xmlNode.getAttribute(name).toLowerCase() === "true" : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFString: function(ctx, name, n) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? ctx.xmlNode.getAttribute(name) : n;
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFColor: function(ctx, name, r, g, b) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFColor.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFColor(r, g, b);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFColorRGBA: function(ctx, name, r, g, b, a) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFColorRGBA.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFColorRGBA(r, g, b, a);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFVec2f: function(ctx, name, x, y) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFVec2f.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFVec2f(x, y);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFVec3f: function(ctx, name, x, y, z) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFVec3f.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFVec3f(x, y, z);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFVec3d: function(ctx, name, x, y, z) {
    this.addField_SFVec3f(ctx, name, x, y, z);
  },
  addField_SFRotation: function(ctx, name, x, y, z, a) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.Quaternion.parseAxisAngle(ctx.xmlNode.getAttribute(name)) : x3dom.fields.Quaternion.axisAngle(new x3dom.fields.SFVec3f(x, y, z), a);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFMatrix4f: function(ctx, name, _00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFMatrix4f.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFMatrix4f(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFImage: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.SFImage.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.SFImage(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFString: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFString.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFString(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFInt32: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFInt32.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFInt32(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFFloat: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFFloat.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFFloat(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFDouble: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFFloat.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFFloat(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFColor: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFColor.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFColor(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFColorRGBA: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFColorRGBA.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFColorRGBA(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFVec2f: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFVec2f.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFVec2f(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFVec3f: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFVec3f.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFVec3f(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_MFVec3d: function(ctx, name, def) {
    this.addField_MFVec3f(ctx, name, def);
  },
  addField_MFRotation: function(ctx, name, def) {
    this._vf[name] = ctx && ctx.xmlNode && ctx.xmlNode.hasAttribute(name) ? x3dom.fields.MFRotation.parse(ctx.xmlNode.getAttribute(name)) : new x3dom.fields.MFRotation(def);
    if(ctx && ctx.xmlNode) {
      this.initSetter(ctx.xmlNode, name);
    }
  },
  addField_SFNode: function(name, type) {
    this._cf[name] = new x3dom.fields.SFNode(type);
  },
  addField_MFNode: function(name, type) {
    this._cf[name] = new x3dom.fields.MFNode(type);
  }
}));
x3dom.registerNodeType("X3DMetadataObject", "Core", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DMetadataObject.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'name', "");
  this.addField_SFString(ctx, 'reference', "");
}));
x3dom.registerNodeType("MetadataDouble", "Core", defineClass(x3dom.nodeTypes.X3DMetadataObject, function(ctx) {
  x3dom.nodeTypes.MetadataDouble.superClass.call(this, ctx);
  this.addField_MFDouble(ctx, 'value', []);
}));
x3dom.registerNodeType("MetadataFloat", "Core", defineClass(x3dom.nodeTypes.X3DMetadataObject, function(ctx) {
  x3dom.nodeTypes.MetadataFloat.superClass.call(this, ctx);
  this.addField_MFFloat(ctx, 'value', []);
}));
x3dom.registerNodeType("MetadataInteger", "Core", defineClass(x3dom.nodeTypes.X3DMetadataObject, function(ctx) {
  x3dom.nodeTypes.MetadataInteger.superClass.call(this, ctx);
  this.addField_MFInt32(ctx, 'value', []);
}));
x3dom.registerNodeType("MetadataSet", "Core", defineClass(x3dom.nodeTypes.X3DMetadataObject, function(ctx) {
  x3dom.nodeTypes.MetadataSet.superClass.call(this, ctx);
  this.addField_MFNode('value', x3dom.nodeTypes.X3DMetadataObject);
}));
x3dom.registerNodeType("MetadataString", "Core", defineClass(x3dom.nodeTypes.X3DMetadataObject, function(ctx) {
  x3dom.nodeTypes.MetadataString.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'value', []);
}));
x3dom.registerNodeType("Field", "Core", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.Field.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'name', "");
  this.addField_SFString(ctx, 'type', "");
  this.addField_SFString(ctx, 'value', "");
}, {
  fieldChanged: function(fieldName) {
    var that = this;
    if(fieldName === 'value') {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged(that._vf.name);
      });
    }
  }
}));
x3dom.registerNodeType("X3DChildNode", "Core", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DChildNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("X3DBindableNode", "Core", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DBindableNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'set_bind', false);
  this.addField_SFString(ctx, 'description', "");
  this.addField_SFBool(ctx, 'isActive', false);
  this._autoGen = (ctx.autoGen ? true : false);
  if(ctx && ctx.doc._bindableBag) {
    this._stack = ctx.doc._bindableBag.addBindable(this);
  } else {
    this._stack = null;
    x3dom.debug.logError('Could not find bindableBag for registration ' + this.typeName());
  }
}, {
  initDefault: function() {},
  bind: function(value) {
    if(this._stack) {
      if(value) {
        this._stack.push(this);
      } else {
        this._stack.pop(this);
      }
    } else {
      x3dom.debug.logError('No BindStack in Bindable\n');
    }
  },
  activate: function(prev) {
    x3dom.debug.logInfo('activate Bindable ' + this._DEF);
    this.postMessage('isActive', true);
  },
  deactivate: function(prev) {
    x3dom.debug.logInfo('deactivate Bindable ' + this._DEF);
    this.postMessage('isActive', false);
  },
  fieldChanged: function(fieldName) {
    if(fieldName === "set_bind") {
      this.bind(this._vf.set_bind);
    }
  },
  nodeChanged: function() {}
}));
x3dom.registerNodeType("WorldInfo", "Core", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.WorldInfo.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'info', []);
  this.addField_SFString(ctx, 'title', "");
  x3dom.debug.logInfo(this._vf.info);
  x3dom.debug.logInfo(this._vf.title);
}, {}));
x3dom.registerNodeType("X3DSensorNode", "Core", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DSensorNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("Param", "Core", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.Param.superClass.call(this, ctx);
}, {
  nodeChanged: function() {
    x3dom.debug.logWarning('DEPRECATED 1.3: Param element needs to be child of X3D element [<a href="http://x3dom.org/docs/latest/configuration.html">DOCS</a>]');
  }
}));
x3dom.registerNodeType("X3DGroupingNode", "Grouping", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DGroupingNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'render', true);
  this.addField_MFNode('children', x3dom.nodeTypes.X3DChildNode);
}, {
  collectDrawableObjects: function(transform, out) {
    if(!this._vf.render) {
      return;
    }
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        var childTransform = this._childNodes[i].transformMatrix(transform);
        this._childNodes[i].collectDrawableObjects(childTransform, out);
      }
    }
  }
}));
x3dom.registerNodeType("Switch", "Grouping", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Switch.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'whichChoice', -1);
}, {
  getVolume: function(min, max, invalidate) {
    if(this._vf.whichChoice < 0 || this._vf.whichChoice >= this._childNodes.length) {
      return false;
    }
    if(this._childNodes[this._vf.whichChoice]) {
      return this._childNodes[this._vf.whichChoice].getVolume(min, max, invalidate);
    }
    return false;
  },
  find: function(type) {
    if(this._vf.whichChoice < 0 || this._vf.whichChoice >= this._childNodes.length) {
      return null;
    }
    if(this._childNodes[this._vf.whichChoice]) {
      if(this._childNodes[this._vf.whichChoice].constructor == type) {
        return this._childNodes[this._vf.whichChoice];
      }
      var c = this._childNodes[this._vf.whichChoice].find(type);
      if(c) {
        return c;
      }
    }
    return null;
  },
  findAll: function(type) {
    if(this._vf.whichChoice < 0 || this._vf.whichChoice >= this._childNodes.length) {
      return [];
    }
    var found = [];
    if(this._childNodes[this._vf.whichChoice]) {
      if(this._childNodes[this._vf.whichChoice].constructor == type) {
        found.push(this._childNodes[this._vf.whichChoice]);
      }
      found = found.concat(this._childNodes[this._vf.whichChoice].findAll(type));
    }
    return found;
  },
  collectDrawableObjects: function(transform, out) {
    if(this._vf.whichChoice < 0 || this._vf.whichChoice >= this._childNodes.length) {
      return;
    }
    if(this._childNodes[this._vf.whichChoice]) {
      var childTransform = this._childNodes[this._vf.whichChoice].transformMatrix(transform);
      this._childNodes[this._vf.whichChoice].collectDrawableObjects(childTransform, out);
    }
  },
  doIntersect: function(line) {
    if(this._vf.whichChoice < 0 || this._vf.whichChoice >= this._childNodes.length) {
      return false;
    }
    if(this._childNodes[this._vf.whichChoice]) {
      return this._childNodes[this._vf.whichChoice].doIntersect(line);
    }
    return false;
  }
}));
x3dom.registerNodeType("X3DTransformNode", "Grouping", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.X3DTransformNode.superClass.call(this, ctx);
  ctx.doc._nodeBag.trans.push(this);
  this._trafo = null;
}, {
  tick: function(t) {
    if(this._xmlNode && (this._xmlNode['transform'] || this._xmlNode.hasAttribute('transform') || this._listeners['transform'])) {
      var transMatrix = this.getCurrentTransform();
      var event = {
        target: {},
        type: 'transform',
        worldX: transMatrix._03,
        worldY: transMatrix._13,
        worldZ: transMatrix._23,
        stopPropagation: function() {
          this.cancelBubble = true;
        }
      };
      var attrib = this._xmlNode[event.type];
      if(typeof(attrib) === "function") attrib.call(this._xmlNode, event);
      else {
        var funcStr = this._xmlNode.getAttribute(event.type);
        var func = new Function('event', funcStr);
        func.call(this._xmlNode, event);
      }
      var list = this._listeners[event.type];
      if(list) for(var it = 0; it < list.length; it++)
      list[it].call(this._xmlNode, event);
    }
    var trans = x3dom.getStyle(this._xmlNode, "-webkit-transform");
    if(trans && (trans != 'none')) {
      this._trafo.setValueByStr(trans);
      return true;
    }
    return false;
  },
  transformMatrix: function(transform) {
    return transform.mult(this._trafo);
  },
  getVolume: function(min, max, invalidate) {
    var nMin = x3dom.fields.SFVec3f.MAX();
    var nMax = x3dom.fields.SFVec3f.MIN();
    var valid = false;
    for(var i = 0, n = this._childNodes.length; i < n; i++) {
      if(this._childNodes[i]) {
        var childMin = x3dom.fields.SFVec3f.MAX();
        var childMax = x3dom.fields.SFVec3f.MIN();
        valid = this._childNodes[i].getVolume(childMin, childMax, invalidate) || valid;
        if(valid) {
          if(nMin.x > childMin.x) {
            nMin.x = childMin.x;
          }
          if(nMin.y > childMin.y) {
            nMin.y = childMin.y;
          }
          if(nMin.z > childMin.z) {
            nMin.z = childMin.z;
          }
          if(nMax.x < childMax.x) {
            nMax.x = childMax.x;
          }
          if(nMax.y < childMax.y) {
            nMax.y = childMax.y;
          }
          if(nMax.z < childMax.z) {
            nMax.z = childMax.z;
          }
        }
      }
    }
    if(valid) {
      nMin = this._trafo.multMatrixPnt(nMin);
      nMax = this._trafo.multMatrixPnt(nMax);
      min.x = nMin.x < nMax.x ? nMin.x : nMax.x;
      min.y = nMin.y < nMax.y ? nMin.y : nMax.y;
      min.z = nMin.z < nMax.z ? nMin.z : nMax.z;
      max.x = nMax.x > nMin.x ? nMax.x : nMin.x;
      max.y = nMax.y > nMin.y ? nMax.y : nMin.y;
      max.z = nMax.z > nMin.z ? nMax.z : nMin.z;
    }
    return valid;
  },
  doIntersect: function(line) {
    var isect = false;
    var mat = this._trafo.inverse();
    var tmpPos = new x3dom.fields.SFVec3f(line.pos.x, line.pos.y, line.pos.z);
    var tmpDir = new x3dom.fields.SFVec3f(line.dir.x, line.dir.y, line.dir.z);
    line.pos = mat.multMatrixPnt(line.pos);
    line.dir = mat.multMatrixVec(line.dir);
    if(line.hitObject) {
      line.dist *= line.dir.length();
    }
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        isect = this._childNodes[i].doIntersect(line) || isect;
      }
    }
    line.pos.setValues(tmpPos);
    line.dir.setValues(tmpDir);
    if(isect) {
      line.hitPoint = this._trafo.multMatrixPnt(line.hitPoint);
      line.dist *= line.dir.length();
    }
    return isect;
  },
  parentRemoved: function(parent) {
    var i;
    var n;
    if(this._parentNodes.length === 0) {
      var doc = this.findX3DDoc();
      for(i = 0, n = doc._nodeBag.trans.length; i < n; i++) {
        if(doc._nodeBag.trans[i] === this) {
          doc._nodeBag.trans.splice(i, 1);
        }
      }
    }
    for(i = 0, n = this._childNodes.length; i < n; i++) {
      if(this._childNodes[i]) {
        this._childNodes[i].parentRemoved(this);
      }
    }
  }
}));
x3dom.registerNodeType("Transform", "Grouping", defineClass(x3dom.nodeTypes.X3DTransformNode, function(ctx) {
  x3dom.nodeTypes.Transform.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'center', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'translation', 0, 0, 0);
  this.addField_SFRotation(ctx, 'rotation', 0, 0, 1, 0);
  this.addField_SFVec3f(ctx, 'scale', 1, 1, 1);
  this.addField_SFRotation(ctx, 'scaleOrientation', 0, 0, 1, 0);
  this._trafo = x3dom.fields.SFMatrix4f.translation(this._vf.translation.add(this._vf.center)).mult(this._vf.rotation.toMatrix()).mult(this._vf.scaleOrientation.toMatrix()).mult(x3dom.fields.SFMatrix4f.scale(this._vf.scale)).mult(this._vf.scaleOrientation.toMatrix().inverse()).mult(x3dom.fields.SFMatrix4f.translation(this._vf.center.negate()));
}, {
  fieldChanged: function(fieldName) {
    this._trafo = x3dom.fields.SFMatrix4f.translation(this._vf.translation.add(this._vf.center)).mult(this._vf.rotation.toMatrix()).mult(this._vf.scaleOrientation.toMatrix()).mult(x3dom.fields.SFMatrix4f.scale(this._vf.scale)).mult(this._vf.scaleOrientation.toMatrix().inverse()).mult(x3dom.fields.SFMatrix4f.translation(this._vf.center.negate()));
  }
}));
x3dom.registerNodeType("MatrixTransform", "Grouping", defineClass(x3dom.nodeTypes.X3DTransformNode, function(ctx) {
  x3dom.nodeTypes.MatrixTransform.superClass.call(this, ctx);
  this.addField_SFMatrix4f(ctx, 'matrix', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  this._trafo = this._vf.matrix;
}, {}));
x3dom.registerNodeType("Group", "Grouping", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Group.superClass.call(this, ctx);
}, {}));
x3dom.registerNodeType("StaticGroup", "Grouping", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.StaticGroup.superClass.call(this, ctx);
  x3dom.debug.logWarning("StaticGroup NYI");
}));
x3dom.registerNodeType("Scene", "Core", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Scene.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'pickMode', "idBuf");
}, {}));
x3dom.BindableStack = function(doc, type, defaultType, getter) {
  this._doc = doc;
  this._type = type;
  this._defaultType = defaultType;
  this._defaultRoot = 0;
  this._getter = getter;
  this._bindBag = [];
  this._bindStack = [];
};
x3dom.BindableStack.prototype.top = function() {
  return((this._bindStack.length >= 0) ? this._bindStack[this._bindStack.length - 1] : null);
};
x3dom.BindableStack.prototype.push = function(bindable) {
  var top = this.top();
  if(top === bindable) {
    return;
  }
  if(top) {
    top.deactivate();
  }
  this._bindStack.push(bindable);
  bindable.activate(top);
};
x3dom.BindableStack.prototype.replaceTop = function(bindable) {
  var top = this.top();
  if(top === bindable) {
    return;
  }
  if(top) {
    top.deactivate();
    this._bindStack[this._bindStack.length - 1] = bindable;
    bindable.activate(top);
  }
};
x3dom.BindableStack.prototype.pop = function(bindable) {
  var top;
  if(bindable) {
    top = this.top();
    if(bindable !== top) {
      return null;
    }
  }
  top = this._bindStack.pop();
  if(top) {
    top.deactivate();
  }
  return top;
};
x3dom.BindableStack.prototype.switchTo = function(target) {
  var last = this.getActive();
  var n = this._bindBag.length;
  var toBind = 0;
  var i = 0,
    lastIndex = -1;
  if(n <= 1) {
    return;
  }
  switch(target) {
  case 'first':
    toBind = this._bindBag[0];
    break;
  case 'last':
    toBind = this._bindBag[n - 1];
    break;
  default:
    for(i = 0; i < n; i++) {
      if(this._bindBag[i] == last) {
        lastIndex = i;
        break;
      }
    }
    if(lastIndex >= 0) {
      i = lastIndex;
      while(!toBind) {
        if(target == 'next') {
          i = (i < (n - 1)) ? (i + 1) : 0;
        } else {
          i = (i > 0) ? (i - 1) : (n - 1);
        }
        if(i == lastIndex) {
          break;
        }
        if(this._bindBag[i]._vf.description.length >= 0) {
          toBind = this._bindBag[i];
        }
      }
    }
    break;
  }
  if(toBind) {
    this.replaceTop(toBind);
  } else {
    x3dom.debug.logWarning('Cannot switch bindable; no other bindable with description found.');
  }
};
x3dom.BindableStack.prototype.getActive = function() {
  if(this._bindStack.length === 0) {
    if(this._bindBag.length === 0) {
      x3dom.debug.logInfo('create new ' + this._defaultType._typeName + ' for ' + this._type._typeName + '-stack');
      var obj = new this._defaultType({
        doc: this._doc,
        autoGen: true
      });
      if(obj) {
        if(this._defaultRoot) {
          this._defaultRoot.addChild(obj);
          obj._nameSpace = this._defaultRoot._nameSpace;
        } else {
          x3dom.debug.logError('stack without defaultRoot');
        }
        obj.initDefault();
        this._bindBag.push(obj);
      }
    } else {
      x3dom.debug.logInfo('activate first ' + this._type._typeName + ' for ' + this._type._typeName + '-stack');
    }
    this._bindStack.push(this._bindBag[0]);
    this._bindBag[0].activate();
  }
  return this._bindStack[this._bindStack.length - 1];
};
x3dom.BindableBag = function(doc) {
  this._stacks = [];
  this.addType("X3DViewpointNode", "Viewpoint", "getViewpoint", doc);
  this.addType("X3DNavigationInfoNode", "NavigationInfo", "getNavigationInfo", doc);
  this.addType("X3DBackgroundNode", "Background", "getBackground", doc);
  this.addType("X3DFogNode", "Fog", "getFog", doc);
};
x3dom.BindableBag.prototype.addType = function(typeName, defaultTypeName, getter, doc) {
  var type = x3dom.nodeTypes[typeName];
  var defaultType = x3dom.nodeTypes[defaultTypeName];
  var stack;
  if(type && defaultType) {
    stack = new x3dom.BindableStack(doc, type, defaultType, getter);
    this._stacks.push(stack);
  } else {
    x3dom.debug.logWarning('Invalid Bindable type/defaultType:' + typeName + '/' + defaultType);
  }
};
x3dom.BindableBag.prototype.setRefNode = function(node) {
  Array.forEach(this._stacks, function(stack) {
    stack._defaultRoot = node;
    node[stack._getter] = function() {
      return stack.getActive();
    };
  });
};
x3dom.BindableBag.prototype.addBindable = function(node) {
  for(var i = 0, n = this._stacks.length; i < n; i++) {
    if(x3dom.isa(node, this._stacks[i]._type)) {
      x3dom.debug.logInfo('register bindable ' + node.typeName());
      this._stacks[i]._bindBag.push(node);
      return this._stacks[i];
    }
  }
  x3dom.debug.logError(node.typeName() + ' is not a valid bindable');
  return null;
};
x3dom.registerNodeType("X3DGeometryNode", "Rendering", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DGeometryNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'solid', true);
  this.addField_SFBool(ctx, 'ccw', true);
  this._mesh = new x3dom.Mesh(this);
  this._pickable = true;
}, {
  getVolume: function(min, max, invalidate) {
    this._mesh.getBBox(min, max, invalidate);
    return true;
  },
  getCenter: function() {
    return this._mesh.getCenter();
  },
  doIntersect: function(line) {
    if(this._pickable) {
      return this._mesh.doIntersect(line);
    } else {
      return false;
    }
  },
  getColorTexture: function() {
    return null;
  },
  getColorTextureURL: function() {
    return null;
  }
}));
x3dom.registerNodeType("Mesh", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Mesh.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'primType', "triangle");
  this.addField_MFInt32(ctx, 'index', []);
  this.addField_MFNode('vertexAttributes', x3dom.nodeTypes.X3DVertexAttributeNode);
}, {
  nodeChanged: function() {
    var time0 = new Date().getTime();
    var i, n = this._cf.vertexAttributes.nodes.length;
    for(i = 0; i < n; i++) {
      var name = this._cf.vertexAttributes.nodes[i]._vf.name;
      switch(name.toLowerCase()) {
      case "position":
        this._mesh._positions[0] = this._cf.vertexAttributes.nodes[i]._vf.value.toGL();
        break;
      case "normal":
        this._mesh._normals[0] = this._cf.vertexAttributes.nodes[i]._vf.value.toGL();
        break;
      case "texcoord":
        this._mesh._texCoords[0] = this._cf.vertexAttributes.nodes[i]._vf.value.toGL();
        break;
      case "color":
        this._mesh._colors[0] = this._cf.vertexAttributes.nodes[i]._vf.value.toGL();
        break;
      default:
        this._mesh._dynamicFields[name] = {};
        this._mesh._dynamicFields[name].numComponents = this._cf.vertexAttributes.nodes[i]._vf.numComponents;
        this._mesh._dynamicFields[name].value = this._cf.vertexAttributes.nodes[i]._vf.value.toGL();
        break;
      }
    }
    this._mesh._indices[0] = this._vf.index.toGL();
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    var time1 = new Date().getTime() - time0;
    x3dom.debug.logWarning("Mesh load time: " + time1 + " ms");
  }
}));
x3dom.registerNodeType("PointSet", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.PointSet.superClass.call(this, ctx);
  this.addField_SFNode('coord', x3dom.nodeTypes.Coordinate);
  this.addField_SFNode('color', x3dom.nodeTypes.X3DColorNode);
  this._pickable = false;
}, {
  nodeChanged: function() {
    var time0 = new Date().getTime();
    var coordNode = this._cf.coord.node;
    x3dom.debug.assert(coordNode);
    var positions = coordNode._vf.point;
    var numColComponents = 3;
    var colorNode = this._cf.color.node;
    var colors = new x3dom.fields.MFColor();
    if(colorNode) {
      colors = colorNode._vf.color;
      x3dom.debug.assert(positions.length == colors.length);
      if(x3dom.isa(colorNode, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    } else {
      for(var i = 0, n = positions.length; i < n; i++) {
        colors.push(1.0);
      }
    }
    this._mesh._numColComponents = numColComponents;
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = positions.toGL();
    this._mesh._colors[0] = colors.toGL();
    this._mesh._normals[0] = [];
    this._mesh._texCoords[0] = [];
    this._mesh._lit = false;
    this._mesh._invalidate = true;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    var time1 = new Date().getTime() - time0;
  },
  fieldChanged: function(fieldName) {
    var pnts = null;
    if(fieldName == "coord") {
      pnts = this._cf.coord.node._vf.point;
      this._mesh._positions[0] = pnts.toGL();
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName == "color") {
      pnts = this._cf.color.node._vf.color;
      this._mesh._colors[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.colors = true;
      });
    }
  }
}));
x3dom.registerNodeType("X3DComposedGeometryNode", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.X3DComposedGeometryNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'colorPerVertex', true);
  this.addField_SFBool(ctx, 'normalPerVertex', true);
  this.addField_MFNode('attrib', x3dom.nodeTypes.X3DVertexAttributeNode);
  this.addField_SFNode('coord', x3dom.nodeTypes.X3DCoordinateNode);
  this.addField_SFNode('normal', x3dom.nodeTypes.Normal);
  this.addField_SFNode('color', x3dom.nodeTypes.X3DColorNode);
  this.addField_SFNode('texCoord', x3dom.nodeTypes.X3DTextureCoordinateNode);
}, {
  handleAttribs: function() {
    var i, n = this._cf.attrib.nodes.length;
    for(i = 0; i < n; i++) {
      var name = this._cf.attrib.nodes[i]._vf.name;
      switch(name.toLowerCase()) {
      case "position":
        this._mesh._positions[0] = this._cf.attrib.nodes[i]._vf.value.toGL();
        break;
      case "normal":
        this._mesh._normals[0] = this._cf.attrib.nodes[i]._vf.value.toGL();
        break;
      case "texcoord":
        this._mesh._texCoords[0] = this._cf.attrib.nodes[i]._vf.value.toGL();
        break;
      case "color":
        this._mesh._colors[0] = this._cf.attrib.nodes[i]._vf.value.toGL();
        break;
      default:
        this._mesh._dynamicFields[name] = {};
        this._mesh._dynamicFields[name].numComponents = this._cf.attrib.nodes[i]._vf.numComponents;
        this._mesh._dynamicFields[name].value = this._cf.attrib.nodes[i]._vf.value.toGL();
        break;
      }
    }
  }
}));
x3dom.registerNodeType("IndexedLineSet", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.IndexedLineSet.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'colorPerVertex', true);
  this.addField_MFNode('attrib', x3dom.nodeTypes.X3DVertexAttributeNode);
  this.addField_SFNode('coord', x3dom.nodeTypes.X3DCoordinateNode);
  this.addField_SFNode('color', x3dom.nodeTypes.X3DColorNode);
  this.addField_MFInt32(ctx, 'coordIndex', []);
  this.addField_MFInt32(ctx, 'colorIndex', []);
  this._pickable = false;
}, {
  nodeChanged: function() {
    var time0 = new Date().getTime();
    var indexes = this._vf.coordIndex;
    var colorInd = this._vf.colorIndex;
    var hasColor = false,
      hasColorInd = false;
    var colPerVert = this._vf.colorPerVertex;
    if(colorInd.length > 0) {
      hasColorInd = true;
    }
    var positions, colors;
    var coordNode = this._cf.coord.node;
    x3dom.debug.assert(coordNode);
    positions = coordNode.getPoints();
    var numColComponents = 3;
    var colorNode = this._cf.color.node;
    if(colorNode) {
      hasColor = true;
      colors = colorNode._vf.color;
      if(x3dom.isa(colorNode, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    } else {
      hasColor = false;
    }
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = [];
    this._mesh._colors[0] = [];
    var i, t, cnt, lineCnt;
    var p0, p1, c0, c1;
    if((hasColor && hasColorInd)) {
      t = 0;
      cnt = 0;
      lineCnt = 0;
      for(i = 0; i < indexes.length; ++i) {
        if(indexes[i] === -1) {
          t = 0;
          continue;
        }
        if(hasColorInd) {
          x3dom.debug.assert(colorInd[i] != -1);
        }
        switch(t) {
        case 0:
          p0 = +indexes[i];
          if(hasColorInd && colPerVert) {
            c0 = +colorInd[i];
          } else {
            c0 = p0;
          }
          t = 1;
          break;
        case 1:
          p1 = +indexes[i];
          if(hasColorInd && colPerVert) {
            c1 = +colorInd[i];
          } else if(hasColorInd && !colPerVert) {
            c1 = +colorInd[lineCnt];
          } else {
            c1 = p1;
          }
          this._mesh._indices[0].push(cnt++, cnt++);
          this._mesh._positions[0].push(positions[p0].x);
          this._mesh._positions[0].push(positions[p0].y);
          this._mesh._positions[0].push(positions[p0].z);
          this._mesh._positions[0].push(positions[p1].x);
          this._mesh._positions[0].push(positions[p1].y);
          this._mesh._positions[0].push(positions[p1].z);
          if(hasColor) {
            if(!colPerVert) {
              c0 = c1;
            }
            this._mesh._colors[0].push(colors[c0].r);
            this._mesh._colors[0].push(colors[c0].g);
            this._mesh._colors[0].push(colors[c0].b);
            this._mesh._colors[0].push(colors[c1].r);
            this._mesh._colors[0].push(colors[c1].g);
            this._mesh._colors[0].push(colors[c1].b);
          }
          t = 2;
          lineCnt++;
          break;
        case 3:
          p0 = p1;
          c0 = c1;
          p1 = +indexes[i];
          if(hasColorInd && colPerVert) {
            c1 = +colorInd[i];
          } else if(hasColorInd && !colPerVert) {
            c1 = +colorInd[lineCnt];
          } else {
            c1 = p1;
          }
          this._mesh._indices[0].push(cnt++, cnt++);
          this._mesh._positions[0].push(positions[p0].x);
          this._mesh._positions[0].push(positions[p0].y);
          this._mesh._positions[0].push(positions[p0].z);
          this._mesh._positions[0].push(positions[p1].x);
          this._mesh._positions[0].push(positions[p1].y);
          this._mesh._positions[0].push(positions[p1].z);
          if(hasColor) {
            if(!colPerVert) {
              c0 = c1;
            }
            this._mesh._colors[0].push(colors[c0].r);
            this._mesh._colors[0].push(colors[c0].g);
            this._mesh._colors[0].push(colors[c0].b);
            this._mesh._colors[0].push(colors[c1].r);
            this._mesh._colors[0].push(colors[c1].g);
            this._mesh._colors[0].push(colors[c1].b);
          }
          lineCnt++;
          break;
        default:
        }
      }
    } else {
      t = 0;
      for(i = 0; i < indexes.length; ++i) {
        if(indexes[i] === -1) {
          t = 0;
          continue;
        }
        switch(t) {
        case 0:
          p0 = +indexes[i];
          t = 1;
          break;
        case 1:
          p1 = +indexes[i];
          t = 2;
          this._mesh._indices[0].push(p0, p1);
          break;
        case 2:
          p0 = p1;
          p1 = +indexes[i];
          this._mesh._indices[0].push(p0, p1);
          break;
        }
      }
      this._mesh._positions[0] = positions.toGL();
      if(hasColor) {
        this._mesh._colors[0] = colors.toGL();
        this._mesh._numColComponents = numColComponents;
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    var time1 = new Date().getTime() - time0;
  },
  fieldChanged: function(fieldName) {
    var pnts = null;
    if(fieldName == "coord") {
      pnts = this._cf.coord.node._vf.point;
      this._mesh._positions[0] = pnts.toGL();
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName == "color") {
      pnts = this._cf.color.node._vf.color;
      this._mesh._colors[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.colors = true;
      });
    }
  }
}));
x3dom.registerNodeType("IndexedTriangleSet", "Rendering", defineClass(x3dom.nodeTypes.X3DComposedGeometryNode, function(ctx) {
  x3dom.nodeTypes.IndexedTriangleSet.superClass.call(this, ctx);
  this.addField_MFInt32(ctx, 'index', []);
}, {
  nodeChanged: function() {
    var time0 = new Date().getTime();
    this.handleAttribs();
    var normPerVert = this._vf.normalPerVertex;
    var indexes = this._vf.index;
    var hasNormal = false,
      hasTexCoord = false,
      hasColor = false;
    var positions, normals, texCoords, colors;
    var coordNode = this._cf.coord.node;
    x3dom.debug.assert(coordNode);
    positions = coordNode._vf.point;
    var normalNode = this._cf.normal.node;
    if(normalNode) {
      hasNormal = true;
      normals = normalNode._vf.vector;
    } else {
      hasNormal = false;
    }
    var texMode = "",
      numTexComponents = 2;
    var texCoordNode = this._cf.texCoord.node;
    if(texCoordNode) {
      if(texCoordNode._vf.point) {
        hasTexCoord = true;
        texCoords = texCoordNode._vf.point;
        if(x3dom.isa(texCoordNode, x3dom.nodeTypes.TextureCoordinate3D)) {
          numTexComponents = 3;
        }
      } else if(texCoordNode._vf.mode) {
        texMode = texCoordNode._vf.mode;
      }
    } else {
      hasTexCoord = false;
    }
    var numColComponents = 3;
    var colorNode = this._cf.color.node;
    if(colorNode) {
      hasColor = true;
      colors = colorNode._vf.color;
      if(x3dom.isa(colorNode, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    } else {
      hasColor = false;
    }
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = [];
    this._mesh._normals[0] = [];
    this._mesh._texCoords[0] = [];
    this._mesh._colors[0] = [];
    var i, t, cnt, faceCnt, posMax;
    var p0, p1, p2, n0, n1, n2, t0, t1, t2, c0, c1, c2;
    while(positions.length % 3 > 0) {
      positions.push(positions.length - 1);
    }
    posMax = positions.length;
    if(positions.length > 65535) {
      t = 0;
      cnt = 0;
      faceCnt = 0;
      this._mesh._multiIndIndices = [];
      this._mesh._posSize = positions.length;
      for(i = 0; i < indexes.length; ++i) {
        if((i > 0) && (i % 3 === 0)) {
          t = 0;
          faceCnt++;
        }
        switch(t) {
        case 0:
          p0 = +indexes[i];
          n0 = p0;
          t0 = p0;
          c0 = p0;
          t = 1;
          break;
        case 1:
          p1 = +indexes[i];
          n1 = p1;
          t1 = p1;
          c1 = p1;
          t = 2;
          break;
        case 2:
          p2 = +indexes[i];
          n2 = p2;
          t2 = p2;
          c2 = p2;
          t = 3;
          this._mesh._indices[0].push(cnt++, cnt++, cnt++);
          this._mesh._positions[0].push(positions[p0].x);
          this._mesh._positions[0].push(positions[p0].y);
          this._mesh._positions[0].push(positions[p0].z);
          this._mesh._positions[0].push(positions[p1].x);
          this._mesh._positions[0].push(positions[p1].y);
          this._mesh._positions[0].push(positions[p1].z);
          this._mesh._positions[0].push(positions[p2].x);
          this._mesh._positions[0].push(positions[p2].y);
          this._mesh._positions[0].push(positions[p2].z);
          if(hasNormal) {
            this._mesh._normals[0].push(normals[n0].x);
            this._mesh._normals[0].push(normals[n0].y);
            this._mesh._normals[0].push(normals[n0].z);
            this._mesh._normals[0].push(normals[n1].x);
            this._mesh._normals[0].push(normals[n1].y);
            this._mesh._normals[0].push(normals[n1].z);
            this._mesh._normals[0].push(normals[n2].x);
            this._mesh._normals[0].push(normals[n2].y);
            this._mesh._normals[0].push(normals[n2].z);
          } else {
            this._mesh._multiIndIndices.push(p0, p1, p2);
          }
          if(hasColor) {
            this._mesh._colors[0].push(colors[c0].r);
            this._mesh._colors[0].push(colors[c0].g);
            this._mesh._colors[0].push(colors[c0].b);
            if(numColComponents === 4) {
              this._mesh._colors[0].push(colors[c0].a);
            }
            this._mesh._colors[0].push(colors[c1].r);
            this._mesh._colors[0].push(colors[c1].g);
            this._mesh._colors[0].push(colors[c1].b);
            if(numColComponents === 4) {
              this._mesh._colors[0].push(colors[c1].a);
            }
            this._mesh._colors[0].push(colors[c2].r);
            this._mesh._colors[0].push(colors[c2].g);
            this._mesh._colors[0].push(colors[c2].b);
            if(numColComponents === 4) {
              this._mesh._colors[0].push(colors[c2].a);
            }
          }
          if(hasTexCoord) {
            this._mesh._texCoords[0].push(texCoords[t0].x);
            this._mesh._texCoords[0].push(texCoords[t0].y);
            if(numTexComponents === 3) {
              this._mesh._texCoords[0].push(texCoords[t0].z);
            }
            this._mesh._texCoords[0].push(texCoords[t1].x);
            this._mesh._texCoords[0].push(texCoords[t1].y);
            if(numTexComponents === 3) {
              this._mesh._texCoords[0].push(texCoords[t1].z);
            }
            this._mesh._texCoords[0].push(texCoords[t2].x);
            this._mesh._texCoords[0].push(texCoords[t2].y);
            if(numTexComponents === 3) {
              this._mesh._texCoords[0].push(texCoords[t2].z);
            }
          }
          break;
        default:
        }
      }
      if(!hasNormal) {
        this._mesh.calcNormals(Math.PI);
      }
      if(!hasTexCoord) {
        this._mesh.calcTexCoords(texMode);
      }
      this._mesh.splitMesh();
    } else {
      this._mesh._indices[0] = indexes.toGL();
      this._mesh._positions[0] = positions.toGL();
      if(hasNormal) {
        this._mesh._normals[0] = normals.toGL();
      } else {
        this._mesh.calcNormals(Math.PI);
      }
      if(hasTexCoord) {
        this._mesh._texCoords[0] = texCoords.toGL();
        this._mesh._numTexComponents = numTexComponents;
      } else {
        this._mesh.calcTexCoords(texMode);
      }
      if(hasColor) {
        this._mesh._colors[0] = colors.toGL();
        this._mesh._numColComponents = numColComponents;
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = 0;
    this._mesh._numCoords = 0;
    for(i = 0; i < this._mesh._indices.length; i++) {
      this._mesh._numFaces += this._mesh._indices[i].length / 3;
      this._mesh._numCoords += this._mesh._positions[i].length / 3;
    }
    var time1 = new Date().getTime() - time0;
  },
  fieldChanged: function(fieldName) {
    var pnts = this._cf.coord.node._vf.point;
    if(pnts.length > 65535) {
      x3dom.debug.logWarning("IndexedTriangleSet: fieldChanged with " + "too many coordinates not yet implemented!");
      return;
    }
    if(fieldName == "coord") {
      this._mesh._positions[0] = pnts.toGL();
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName == "color") {
      pnts = this._cf.color.node._vf.color;
      this._mesh._colors[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.colors = true;
      });
    } else if(fieldName == "normal") {
      pnts = this._cf.normal.node._vf.vector;
      this._mesh._normals[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.normals = true;
      });
    } else if(fieldName == "texCoord") {
      pnts = this._cf.texCoord.node._vf.point;
      this._mesh._texCoords[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.texcoords = true;
      });
    }
  }
}));
x3dom.registerNodeType("IndexedTriangleStripSet", "Rendering", defineClass(x3dom.nodeTypes.X3DComposedGeometryNode, function(ctx) {
  x3dom.nodeTypes.IndexedTriangleStripSet.superClass.call(this, ctx);
  this.addField_MFInt32(ctx, 'index', []);
}, {
  nodeChanged: function() {
    this.handleAttribs();
    var hasNormal = false,
      hasTexCoord = false,
      hasColor = false;
    var colPerVert = this._vf.colorPerVertex;
    var normPerVert = this._vf.normalPerVertex;
    var indexes = this._vf.index;
    var positions, normals, texCoords, colors;
    var coordNode = this._cf.coord.node;
    x3dom.debug.assert(coordNode);
    positions = coordNode._vf.point;
    var normalNode = this._cf.normal.node;
    if(normalNode) {
      hasNormal = true;
      normals = normalNode._vf.vector;
    } else {
      hasNormal = false;
    }
    var texMode = "",
      numTexComponents = 2;
    var texCoordNode = this._cf.texCoord.node;
    if(texCoordNode) {
      if(texCoordNode._vf.point) {
        hasTexCoord = true;
        texCoords = texCoordNode._vf.point;
        if(x3dom.isa(texCoordNode, x3dom.nodeTypes.TextureCoordinate3D)) {
          numTexComponents = 3;
        }
      } else if(texCoordNode._vf.mode) {
        texMode = texCoordNode._vf.mode;
      }
    } else {
      hasTexCoord = false;
    }
    this._mesh._numTexComponents = numTexComponents;
    var numColComponents = 3;
    var colorNode = this._cf.color.node;
    if(colorNode) {
      hasColor = true;
      colors = colorNode._vf.color;
      if(x3dom.isa(colorNode, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    } else {
      hasColor = false;
    }
    this._mesh._numColComponents = numColComponents;
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = [];
    this._mesh._normals[0] = [];
    this._mesh._texCoords[0] = [];
    this._mesh._colors[0] = [];
    this._mesh._invalidate = true;
    this._mesh._numFaces = 0;
    this._mesh._numCoords = 0;
    var faceCnt = 0,
      cnt = 0;
    if(hasNormal && positions.length <= 65535) {
      this._mesh._primType = 'TRIANGLESTRIP';
      this._indexOffset = [];
      this._indexOffset.push(0);
      for(i = 0; i < indexes.length; i++) {
        if(indexes[i] == -1) {
          faceCnt++;
          this._indexOffset.push(this._mesh._indices[0].length);
          continue;
        } else this._mesh._indices[0].push(+indexes[i]);
      }
      this._mesh._positions[0] = positions.toGL();
      x3dom.debug.assert(normPerVert);
      this._mesh._normals[0] = normals.toGL();
      if(hasTexCoord) {
        this._mesh._texCoords[0] = texCoords.toGL();
        this._mesh._numTexComponents = numTexComponents;
      } else {
        x3dom.debug.logWarning("IndexedTriangleStripSet: no texCoords given and won't calculate!");
      }
      if(hasColor) {
        x3dom.debug.assert(colPerVert);
        this._mesh._colors[0] = colors.toGL();
        this._mesh._numColComponents = numColComponents;
      }
      for(i = 1; i < this._indexOffset.length; i++) {
        this._mesh._numFaces += (this._indexOffset[i] - this._indexOffset[i - 1] - 2);
      }
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
    } else {
      var p1, p2, p3, n1, n2, n3, t1, t2, t3, c1, c2, c3;
      for(i = 1; i < indexes.length - 2; ++i) {
        if(indexes[i + 1] == -1) {
          i = i + 2;
          faceCnt++;
          continue;
        }
        p1 = indexes[i];
        p2 = indexes[i - 1];
        p3 = indexes[i + 1];
        if(normPerVert) {
          n1 = p1;
          n2 = p2;
          n3 = p3;
        } else if(!normPerVert) {
          n1 = n2 = n3 = faceCnt;
        }
        t1 = p1;
        t2 = p2;
        t3 = p3;
        if(colPerVert) {
          c1 = p1;
          c2 = p2;
          c3 = p3;
        } else if(!colPerVert) {
          c1 = c2 = c3 = faceCnt;
        }
        this._mesh._indices[0].push(cnt++, cnt++, cnt++);
        this._mesh._positions[0].push(positions[p1].x);
        this._mesh._positions[0].push(positions[p1].y);
        this._mesh._positions[0].push(positions[p1].z);
        this._mesh._positions[0].push(positions[p2].x);
        this._mesh._positions[0].push(positions[p2].y);
        this._mesh._positions[0].push(positions[p2].z);
        this._mesh._positions[0].push(positions[p3].x);
        this._mesh._positions[0].push(positions[p3].y);
        this._mesh._positions[0].push(positions[p3].z);
        if(hasNormal) {
          this._mesh._normals[0].push(normals[n1].x);
          this._mesh._normals[0].push(normals[n1].y);
          this._mesh._normals[0].push(normals[n1].z);
          this._mesh._normals[0].push(normals[n2].x);
          this._mesh._normals[0].push(normals[n2].y);
          this._mesh._normals[0].push(normals[n2].z);
          this._mesh._normals[0].push(normals[n3].x);
          this._mesh._normals[0].push(normals[n3].y);
          this._mesh._normals[0].push(normals[n3].z);
        }
        if(hasColor) {
          this._mesh._colors[0].push(colors[c1].r);
          this._mesh._colors[0].push(colors[c1].g);
          this._mesh._colors[0].push(colors[c1].b);
          if(numColComponents === 4) {
            this._mesh._colors[0].push(colors[c1].a);
          }
          this._mesh._colors[0].push(colors[c2].r);
          this._mesh._colors[0].push(colors[c2].g);
          this._mesh._colors[0].push(colors[c2].b);
          if(numColComponents === 4) {
            this._mesh._colors[0].push(colors[c2].a);
          }
          this._mesh._colors[0].push(colors[c3].r);
          this._mesh._colors[0].push(colors[c3].g);
          this._mesh._colors[0].push(colors[c3].b);
          if(numColComponents === 4) {
            this._mesh._colors[0].push(colors[c3].a);
          }
        }
        if(hasTexCoord) {
          this._mesh._texCoords[0].push(texCoords[t1].x);
          this._mesh._texCoords[0].push(texCoords[t1].y);
          if(numTexComponents === 3) {
            this._mesh._texCoords[0].push(texCoords[t1].z);
          }
          this._mesh._texCoords[0].push(texCoords[t2].x);
          this._mesh._texCoords[0].push(texCoords[t2].y);
          if(numTexComponents === 3) {
            this._mesh._texCoords[0].push(texCoords[t2].z);
          }
          this._mesh._texCoords[0].push(texCoords[t3].x);
          this._mesh._texCoords[0].push(texCoords[t3].y);
          if(numTexComponents === 3) {
            this._mesh._texCoords[0].push(texCoords[t3].z);
          }
        }
      }
      if(!hasNormal) {
        this._mesh.calcNormals(Math.PI);
      }
      if(!hasTexCoord) {
        this._mesh.calcTexCoords(texMode);
      }
      this._mesh.splitMesh();
      for(i = 0; i < this._mesh._indices.length; i++) {
        this._mesh._numFaces += this._mesh._indices[i].length / 3;
        this._mesh._numCoords += this._mesh._positions[i].length / 3;
      }
    }
  },
  fieldChanged: function(fieldName) {
    if(fieldName != "coord" && fieldName != "normal" && fieldName != "texCoord" && fieldName != "color") {
      x3dom.debug.logWarning("IndexedTriangleStripSet: fieldChanged for " + fieldName + " not yet implemented!");
      return;
    }
    var pnts = this._cf.coord.node._vf.point;
    if((this._cf.normal.node === null) || (pnts.length > 65535)) {
      x3dom.debug.logWarning("IndexedTriangleStripSet: fieldChanged without normals" + " or with too many coordinates not yet implemented!");
      return;
    }
    if(fieldName == "coord") {
      this._mesh._positions[0] = pnts.toGL();
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName == "color") {
      pnts = this._cf.color.node._vf.color;
      this._mesh._colors[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.colors = true;
      });
    } else if(fieldName == "normal") {
      pnts = this._cf.normal.node._vf.vector;
      this._mesh._normals[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.normals = true;
      });
    } else if(fieldName == "texCoord") {
      pnts = this._cf.texCoord.node._vf.point;
      this._mesh._texCoords[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.texcoords = true;
      });
    }
  }
}));
x3dom.registerNodeType("X3DGeometricPropertyNode", "Rendering", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DGeometricPropertyNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("X3DCoordinateNode", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode, function(ctx) {
  x3dom.nodeTypes.X3DCoordinateNode.superClass.call(this, ctx);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "coord" || fieldName === "point") {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged("coord");
      });
    }
  },
  parentAdded: function(parent) {
    if(parent._mesh && parent._cf.coord.node !== this) {
      parent.fieldChanged("coord");
    }
  }
}));
x3dom.registerNodeType("Coordinate", "Rendering", defineClass(x3dom.nodeTypes.X3DCoordinateNode, function(ctx) {
  x3dom.nodeTypes.Coordinate.superClass.call(this, ctx);
  this.addField_MFVec3f(ctx, 'point', []);
}, {
  getPoints: function() {
    return this._vf.point;
  }
}));
x3dom.registerNodeType("Normal", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode, function(ctx) {
  x3dom.nodeTypes.Normal.superClass.call(this, ctx);
  this.addField_MFVec3f(ctx, 'vector', []);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "normal" || fieldName === "vector") {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged("normal");
      });
    }
  },
  parentAdded: function(parent) {
    if(parent._mesh && parent._cf.normal.node !== this) {
      parent.fieldChanged("normal");
    }
  }
}));
x3dom.registerNodeType("X3DColorNode", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode, function(ctx) {
  x3dom.nodeTypes.X3DColorNode.superClass.call(this, ctx);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "color") {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged("color");
      });
    }
  },
  parentAdded: function(parent) {
    if(parent._mesh && parent._cf.color.node !== this) {
      parent.fieldChanged("color");
    }
  }
}));
x3dom.registerNodeType("Color", "Rendering", defineClass(x3dom.nodeTypes.X3DColorNode, function(ctx) {
  x3dom.nodeTypes.Color.superClass.call(this, ctx);
  this.addField_MFColor(ctx, 'color', []);
}));
x3dom.registerNodeType("ColorRGBA", "Rendering", defineClass(x3dom.nodeTypes.X3DColorNode, function(ctx) {
  x3dom.nodeTypes.ColorRGBA.superClass.call(this, ctx);
  this.addField_MFColorRGBA(ctx, 'color', []);
}));
x3dom.registerNodeType("X3DAppearanceNode", "Shape", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DAppearanceNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("Appearance", "Shape", defineClass(x3dom.nodeTypes.X3DAppearanceNode, function(ctx) {
  x3dom.nodeTypes.Appearance.superClass.call(this, ctx);
  this.addField_SFNode('material', x3dom.nodeTypes.X3DMaterialNode);
  this.addField_SFNode('texture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('textureTransform', x3dom.nodeTypes.X3DTextureTransformNode);
  this.addField_SFNode('blendMode', x3dom.nodeTypes.BlendMode);
  this.addField_SFNode('depthMode', x3dom.nodeTypes.DepthMode);
  this.addField_MFNode('shaders', x3dom.nodeTypes.X3DShaderNode);
  this._shader = null;
}, {
  nodeChanged: function() {
    if(!this._cf.material.node) {
      this.addChild(x3dom.nodeTypes.Material.defaultNode());
    }
    if(this._cf.shaders.nodes.length) {
      this._shader = this._cf.shaders.nodes[0];
    }
  },
  texTransformMatrix: function() {
    if(this._cf.textureTransform.node === null) {
      return x3dom.fields.SFMatrix4f.identity();
    } else {
      return this._cf.textureTransform.node.texTransformMatrix();
    }
  }
}));
x3dom.nodeTypes.Appearance.defaultNode = function() {
  if(!x3dom.nodeTypes.Appearance._defaultNode) {
    x3dom.nodeTypes.Appearance._defaultNode = new x3dom.nodeTypes.Appearance();
    x3dom.nodeTypes.Appearance._defaultNode.nodeChanged();
  }
  return x3dom.nodeTypes.Appearance._defaultNode;
};
x3dom.registerNodeType("X3DAppearanceChildNode", "Shape", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DAppearanceChildNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("BlendMode", "Shape", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.BlendMode.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'srcFactor', "src_alpha");
  this.addField_SFString(ctx, 'destFactor', "one_minus_src_alpha");
  this.addField_SFColor(ctx, 'color', 1, 1, 1);
  this.addField_SFFloat(ctx, 'colorTransparency', 0);
  this.addField_SFString(ctx, 'alphaFunc', "none");
  this.addField_SFFloat(ctx, 'alphaFuncValue', 0);
  this.addField_SFString(ctx, 'equation', "none");
}));
x3dom.registerNodeType("DepthMode", "Shape", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.DepthMode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'enableDepthTest', true);
  this.addField_SFString(ctx, 'depthFunc', "none");
  this.addField_SFBool(ctx, 'readOnly', false);
  this.addField_SFFloat(ctx, 'zNearRange', -1);
  this.addField_SFFloat(ctx, 'zFarRange', -1);
}));
x3dom.registerNodeType("X3DMaterialNode", "Shape", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.X3DMaterialNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("Material", "Shape", defineClass(x3dom.nodeTypes.X3DMaterialNode, function(ctx) {
  x3dom.nodeTypes.Material.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'ambientIntensity', 0.2);
  this.addField_SFColor(ctx, 'diffuseColor', 0.8, 0.8, 0.8);
  this.addField_SFColor(ctx, 'emissiveColor', 0, 0, 0);
  this.addField_SFFloat(ctx, 'shininess', 0.2);
  this.addField_SFColor(ctx, 'specularColor', 0, 0, 0);
  this.addField_SFFloat(ctx, 'transparency', 0);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == "ambientIntensity" || fieldName == "diffuseColor" || fieldName == "emissiveColor" || fieldName == "shininess" || fieldName == "specularColor" || fieldName == "transparency") {
      Array.forEach(this._parentNodes, function(app) {
        Array.forEach(app._parentNodes, function(shape) {
          shape._dirty.material = true;
        });
      });
    }
  }
}));
x3dom.nodeTypes.Material.defaultNode = function() {
  if(!x3dom.nodeTypes.Material._defaultNode) {
    x3dom.nodeTypes.Material._defaultNode = new x3dom.nodeTypes.Material();
    x3dom.nodeTypes.Material._defaultNode.nodeChanged();
  }
  return x3dom.nodeTypes.Material._defaultNode;
};
x3dom.registerNodeType("X3DShapeNode", "Shape", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DShapeNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'render', true);
  this.addField_SFVec3f(ctx, 'bboxCenter', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'bboxSize', -1, -1, -1);
  this.addField_SFNode('appearance', x3dom.nodeTypes.X3DAppearanceNode);
  this.addField_SFNode('geometry', x3dom.nodeTypes.X3DGeometryNode);
  this._objectID = 0;
  this._cleanupGLObjects = null;
  this._dirty = {
    positions: true,
    normals: true,
    texcoords: true,
    colors: true,
    indexes: true,
    texture: true,
    material: true,
    text: true,
    shader: true
  };
}, {
  collectDrawableObjects: function(transform, out) {
    if(out !== null && this._vf.render) {
      out.push([transform, this]);
    }
  },
  transformMatrix: function(transform) {
    {
      return transform;
    }
  },
  getVolume: function(min, max, invalidate) {
    if(this._cf.geometry.node) {
      return this._cf.geometry.node.getVolume(min, max, invalidate);
    } else {
      return false;
    }
  },
  getCenter: function() {
    if(this._cf.geometry.node) {
      return this._cf.geometry.node.getCenter();
    } else {
      return new x3dom.fields.SFVec3f(0, 0, 0);
    }
  },
  doIntersect: function(line) {
    return this._cf.geometry.node.doIntersect(line);
  },
  isSolid: function() {
    return this._cf.geometry.node._vf.solid;
  },
  isCCW: function() {
    return this._cf.geometry.node._vf.ccw;
  },
  parentRemoved: function(parent) {
    if(this._cleanupGLObjects) {
      this._cleanupGLObjects();
    }
  },
  setAllDirty: function() {
    this._dirty.positions = true;
    this._dirty.normals = true;
    this._dirty.texcoords = true;
    this._dirty.colors = true;
    this._dirty.indexes = true;
    this._dirty.texture = true;
    this._dirty.material = true;
    this._dirty.text = true;
    this._dirty.shader = true;
  }
}));
x3dom.registerNodeType("Shape", "Shape", defineClass(x3dom.nodeTypes.X3DShapeNode, function(ctx) {
  x3dom.nodeTypes.Shape.superClass.call(this, ctx);
}, {
  nodeChanged: function() {
    if(!this._cf.appearance.node) {
      this.addChild(x3dom.nodeTypes.Appearance.defaultNode());
    }
    if(!this._cf.geometry.node) {
      x3dom.debug.logError("No geometry given in Shape/" + this._DEF);
    } else if(!this._objectID && this._cf.geometry.node._pickable) {
      this._objectID = ++x3dom.nodeTypes.Shape.objectID;
      x3dom.nodeTypes.Shape.idMap.nodeID[this._objectID] = this;
    }
  }
}));
x3dom.nodeTypes.Shape.objectID = 0;
x3dom.nodeTypes.Shape.idMap = {
  nodeID: {},
  remove: function(obj) {
    for(var prop in this.nodeID) {
      if(this.nodeID.hasOwnProperty(prop)) {
        var val = this.nodeID[prop];
        if(val._objectID && obj._objectID && val._objectID === obj._objectID) {
          delete this.nodeID[prop];
          x3dom.debug.logInfo("Unreg " + val._objectID);
        }
      }
    }
  }
};
x3dom.registerNodeType("X3DLightNode", "Lighting", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DLightNode.superClass.call(this, ctx);
  ctx.doc._nodeBag.lights.push(this);
  this._lightID = 0;
  this._dirty = true;
  this.addField_SFFloat(ctx, 'ambientIntensity', 0);
  this.addField_SFColor(ctx, 'color', 1, 1, 1);
  this.addField_SFFloat(ctx, 'intensity', 1);
  this.addField_SFBool(ctx, 'global', false);
  this.addField_SFBool(ctx, 'on', true);
  this.addField_SFFloat(ctx, 'shadowIntensity', 0);
}, {
  getViewMatrix: function(vec) {
    return x3dom.fields.SFMatrix4f.identity;
  },
  nodeChanged: function() {
    if(!this._lightID) {
      this._lightID = ++x3dom.nodeTypes.X3DLightNode.lightID;
    }
  },
  fieldChanged: function(fieldName) {
    this._dirty = true;
  },
  parentRemoved: function(parent) {
    if(this._parentNodes.length === 0) {
      var doc = this.findX3DDoc();
      for(var i = 0, n = doc._nodeBag.lights.length; i < n; i++) {
        if(doc._nodeBag.lights[i] === this) {
          doc._nodeBag.lights.splice(i, 1);
        }
      }
    }
  }
}));
x3dom.nodeTypes.X3DLightNode.lightID = 0;
x3dom.registerNodeType("DirectionalLight", "Lighting", defineClass(x3dom.nodeTypes.X3DLightNode, function(ctx) {
  x3dom.nodeTypes.DirectionalLight.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'direction', 0, 0, -1);
}, {
  getViewMatrix: function(vec) {
    var dir = this._vf.direction.normalize();
    var orientation = x3dom.fields.Quaternion.rotateFromTo(new x3dom.fields.SFVec3f(0, 0, -1), dir);
    return orientation.toMatrix().transpose().mult(x3dom.fields.SFMatrix4f.translation(vec.negate()));
  }
}));
x3dom.registerNodeType("PointLight", "Lighting", defineClass(x3dom.nodeTypes.X3DLightNode, function(ctx) {
  x3dom.nodeTypes.PointLight.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'attenuation', 1, 0, 0);
  this.addField_SFVec3f(ctx, 'location', 0, 0, 0);
  this.addField_SFFloat(ctx, 'radius', 100);
  this._vf.global = true;
}, {
  getViewMatrix: function(vec) {
    var pos = this._vf.location;
    var orientation = x3dom.fields.Quaternion.rotateFromTo(new x3dom.fields.SFVec3f(0, 0, -1), vec);
    return orientation.toMatrix().transpose().mult(x3dom.fields.SFMatrix4f.translation(pos.negate()));
  }
}));
x3dom.registerNodeType("SpotLight", "Lighting", defineClass(x3dom.nodeTypes.X3DLightNode, function(ctx) {
  x3dom.nodeTypes.SpotLight.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'direction', 0, 0, -1);
  this.addField_SFVec3f(ctx, 'attenuation', 1, 0, 0);
  this.addField_SFVec3f(ctx, 'location', 0, 0, 0);
  this.addField_SFFloat(ctx, 'radius', 100);
  this.addField_SFFloat(ctx, 'beamWidth', 1.5707963);
  this.addField_SFFloat(ctx, 'cutOffAngle', 1.5707963);
  this._vf.global = true;
}, {
  getViewMatrix: function(vec) {
    var pos = this._vf.location;
    var dir = this._vf.direction.normalize();
    var orientation = x3dom.fields.Quaternion.rotateFromTo(new x3dom.fields.SFVec3f(0, 0, -1), dir);
    return orientation.toMatrix().transpose().mult(x3dom.fields.SFMatrix4f.translation(pos.negate()));
  }
}));
x3dom.registerNodeType("X3DFollowerNode", "Followers", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DFollowerNode.superClass.call(this, ctx);
  ctx.doc._nodeBag.followers.push(this);
  this.addField_SFBool(ctx, 'isActive', false);
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {},
  parentRemoved: function(parent) {
    if(this._parentNodes.length === 0) {
      var doc = this.findX3DDoc();
      for(var i = 0, n = doc._nodeBag.followers.length; i < n; i++) {
        if(doc._nodeBag.followers[i] === this) {
          doc._nodeBag.followers.splice(i, 1);
        }
      }
    }
  },
  tick: function(t) {
    return false;
  },
  stepResponse: function(t) {
    if(t <= 0) {
      return 0;
    }
    if(t >= this._vf.duration) {
      return 1;
    }
    return this.stepResponseCore(t / this._vf.duration);
  },
  stepResponseCore: function(T) {
    return 0.5 - 0.5 * Math.cos(T * Math.PI);
  }
}));
x3dom.registerNodeType("X3DChaserNode", "Followers", defineClass(x3dom.nodeTypes.X3DFollowerNode, function(ctx) {
  x3dom.nodeTypes.X3DChaserNode.superClass.call(this, ctx);
  this.addField_SFTime(ctx, 'duration', 0);
  this._initDone = false;
  this._stepTime = 0;
  this._currTime = 0;
  this._bufferEndTime = 0;
  this._numSupports = 60;
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {}
}));
x3dom.registerNodeType("X3DDamperNode", "Followers", defineClass(x3dom.nodeTypes.X3DFollowerNode, function(ctx) {
  x3dom.nodeTypes.X3DDamperNode.superClass.call(this, ctx);
  this.addField_SFTime(ctx, 'tau', 0);
  this.addField_SFFloat(ctx, 'tolerance', -1);
  this.addField_SFInt32(ctx, 'order', 0);
  this._eps = this._vf.tolerance < 0 ? 0.001 : this._vf.tolerance;
  this._lastTick = 0;
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName === "tolerance") {
      this._eps = this._vf.tolerance < 0 ? 0.001 : this._vf.tolerance;
    }
  }
}));
x3dom.registerNodeType("ColorChaser", "Followers", defineClass(x3dom.nodeTypes.X3DChaserNode, function(ctx) {
  x3dom.nodeTypes.ColorChaser.superClass.call(this, ctx);
  this.addField_SFColor(ctx, 'initialDestination', 0.8, 0.8, 0.8);
  this.addField_SFColor(ctx, 'initialValue', 0.8, 0.8, 0.8);
  this.addField_SFColor(ctx, 'set_value', 0, 0, 0);
  this.addField_SFColor(ctx, 'set_destination', 0, 0, 0);
  this._buffer = new x3dom.fields.MFColor();
  this._previousValue = new x3dom.fields.SFColor(0, 0, 0);
  this._value = new x3dom.fields.SFColor(0, 0, 0);
}, {
  nodeChanged: function() {
    this.initialize();
  },
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      this.initialize();
      this.updateBuffer(this._currTime);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this.initialize();
      this._previousValue.setValues(this._vf.set_value);
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C].setValues(this._vf.set_value);
      }
      this.postMessage('value_changed', this._vf.set_value);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    if(!this._initDone) {
      this._initDone = true;
      this._vf.set_destination = this._vf.initialDestination;
      this._buffer.length = this._numSupports;
      this._buffer[0] = this._vf.initialDestination;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.initialValue;
      }
      this._previousValue = this._vf.initialValue;
      this._stepTime = this._vf.duration / this._numSupports;
      var active = !this._buffer[0].equals(this._buffer[1], x3dom.fields.Eps);
      if(this._vf.isActive !== active) {
        this.postMessage('isActive', active);
      }
    }
  },
  tick: function(now) {
    this.initialize();
    this._currTime = now;
    if(!this._bufferEndTime) {
      this._bufferEndTime = now;
      this._value = this._vf.initialValue;
      this.postMessage('value_changed', this._value);
      return true;
    }
    var Frac = this.updateBuffer(now);
    var Output = this._previousValue;
    var DeltaIn = this._buffer[this._buffer.length - 1].subtract(this._previousValue);
    var DeltaOut = DeltaIn.multiply(this.stepResponse((this._buffer.length - 1 + Frac) * this._stepTime));
    Output = Output.add(DeltaOut);
    for(var C = this._buffer.length - 2; C >= 0; C--) {
      DeltaIn = this._buffer[C].subtract(this._buffer[C + 1]);
      DeltaOut = DeltaIn.multiply(this.stepResponse((C + Frac) * this._stepTime));
      Output = Output.add(DeltaOut);
    }
    if(!Output.equals(this._value, x3dom.fields.Eps)) {
      this._value.setValues(Output);
      this.postMessage('value_changed', this._value);
    } else {
      this.postMessage('isActive', false);
    }
    return this._vf.isActive;
  },
  updateBuffer: function(now) {
    var Frac = (now - this._bufferEndTime) / this._stepTime;
    var C;
    var NumToShift;
    var Alpha;
    if(Frac >= 1) {
      NumToShift = Math.floor(Frac);
      Frac -= NumToShift;
      if(NumToShift < this._buffer.length) {
        this._previousValue = this._buffer[this._buffer.length - NumToShift];
        for(C = this._buffer.length - 1; C >= NumToShift; C--) {
          this._buffer[C] = this._buffer[C - NumToShift];
        }
        for(C = 0; C < NumToShift; C++) {
          Alpha = C / NumToShift;
          this._buffer[C] = this._buffer[NumToShift].multiply(Alpha).add(this._vf.set_destination.multiply((1 - Alpha)));
        }
      } else {
        this._previousValue = (NumToShift == this._buffer.length) ? this._buffer[0] : this._vf.set_destination;
        for(C = 0; C < this._buffer.length; C++) {
          this._buffer[C] = this._vf.set_destination;
        }
      }
      this._bufferEndTime += NumToShift * this._stepTime;
    }
    return Frac;
  }
}));
x3dom.registerNodeType("ColorDamper", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.ColorDamper.superClass.call(this, ctx);
  this.addField_SFColor(ctx, 'initialDestination', 0.8, 0.8, 0.8);
  this.addField_SFColor(ctx, 'initialValue', 0.8, 0.8, 0.8);
  this.addField_SFColor(ctx, 'set_value', 0, 0, 0);
  this.addField_SFColor(ctx, 'set_destination', 0, 0, 0);
  this._value0 = new x3dom.fields.SFColor(0, 0, 0);
  this._value1 = new x3dom.fields.SFColor(0, 0, 0);
  this._value2 = new x3dom.fields.SFColor(0, 0, 0);
  this._value3 = new x3dom.fields.SFColor(0, 0, 0);
  this._value4 = new x3dom.fields.SFColor(0, 0, 0);
  this._value5 = new x3dom.fields.SFColor(0, 0, 0);
  this.initialize();
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      if(!this._value0.equals(this._vf.set_destination, this._eps)) {
        this._value0 = this._vf.set_destination;
        if(!this._vf.isActive) {
          this.postMessage('isActive', true);
        }
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this._value1.setValues(this._vf.set_value);
      this._value2.setValues(this._vf.set_value);
      this._value3.setValues(this._vf.set_value);
      this._value4.setValues(this._vf.set_value);
      this._value5.setValues(this._vf.set_value);
      this._lastTick = 0;
      this.postMessage('value_changed', this._value5);
      if(!this._vf.isActive) {
        this._lastTick = 0;
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    this._value0.setValues(this._vf.initialDestination);
    this._value1.setValues(this._vf.initialValue);
    this._value2.setValues(this._vf.initialValue);
    this._value3.setValues(this._vf.initialValue);
    this._value4.setValues(this._vf.initialValue);
    this._value5.setValues(this._vf.initialValue);
    this._lastTick = 0;
    var active = !this._value0.equals(this._value1, this._eps);
    if(this._vf.isActive !== active) {
      this.postMessage('isActive', active);
    }
  },
  distance: function(a, b) {
    var diff = a.subtract(b);
    return Math.sqrt(diff.r * diff.r + diff.g * diff.g + diff.b * diff.b);
  },
  tick: function(now) {
    if(!this._lastTick) {
      this._lastTick = now;
      return false;
    }
    var delta = now - this._lastTick;
    var alpha = Math.exp(-delta / this._vf.tau);
    this._value1 = this._vf.order > 0 && this._vf.tau ? this._value0.add(this._value1.subtract(this._value0).multiply(alpha)) : new x3dom.fields.SFColor(this._value0.r, this._value0.g, this._value0.b);
    this._value2 = this._vf.order > 1 && this._vf.tau ? this._value1.add(this._value2.subtract(this._value1).multiply(alpha)) : new x3dom.fields.SFColor(this._value1.r, this._value1.g, this._value1.b);
    this._value3 = this._vf.order > 2 && this._vf.tau ? this._value2.add(this._value3.subtract(this._value2).multiply(alpha)) : new x3dom.fields.SFColor(this._value2.r, this._value2.g, this._value2.b);
    this._value4 = this._vf.order > 3 && this._vf.tau ? this._value3.add(this._value4.subtract(this._value3).multiply(alpha)) : new x3dom.fields.SFColor(this._value3.r, this._value3.g, this._value3.b);
    this._value5 = this._vf.order > 4 && this._vf.tau ? this._value4.add(this._value5.subtract(this._value4).multiply(alpha)) : new x3dom.fields.SFColor(this._value4.r, this._value4.g, this._value4.b);
    var dist = this.distance(this._value1, this._value0);
    if(this._vf.order > 1) {
      var dist2 = this.distance(this._value2, this._value1);
      if(dist2 > dist) {
        dist = dist2;
      }
    }
    if(this._vf.order > 2) {
      var dist3 = this.distance(this._value3, this._value2);
      if(dist3 > dist) {
        dist = dist3;
      }
    }
    if(this._vf.order > 3) {
      var dist4 = this.distance(this._value4, this._value3);
      if(dist4 > dist) {
        dist = dist4;
      }
    }
    if(this._vf.order > 4) {
      var dist5 = this.distance(this._value5, this._value4);
      if(dist5 > dist) {
        dist = dist5;
      }
    }
    if(dist < this._eps) {
      this._value1.setValues(this._value0);
      this._value2.setValues(this._value0);
      this._value3.setValues(this._value0);
      this._value4.setValues(this._value0);
      this._value5.setValues(this._value0);
      this.postMessage('value_changed', this._value0);
      this.postMessage('isActive', false);
      this._lastTick = 0;
      return false;
    }
    this.postMessage('value_changed', this._value5);
    this._lastTick = now;
    return true;
  }
}));
x3dom.registerNodeType("OrientationChaser", "Followers", defineClass(x3dom.nodeTypes.X3DChaserNode, function(ctx) {
  x3dom.nodeTypes.OrientationChaser.superClass.call(this, ctx);
  this.addField_SFRotation(ctx, 'initialDestination', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'initialValue', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'set_value', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'set_destination', 0, 1, 0, 0);
  this._numSupports = 30;
  this._buffer = new x3dom.fields.MFRotation();
  this._previousValue = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value = new x3dom.fields.Quaternion(0, 1, 0, 0);
}, {
  nodeChanged: function() {
    this.initialize();
  },
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      this.initialize();
      this.updateBuffer(this._currTime);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this.initialize();
      this._previousValue.setValues(this._vf.set_value);
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C].setValues(this._vf.set_value);
      }
      this.postMessage('value_changed', this._vf.set_value);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    if(!this._initDone) {
      this._initDone = true;
      this._vf.set_destination = this._vf.initialDestination;
      this._buffer.length = this._numSupports;
      this._buffer[0] = this._vf.initialDestination;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.initialValue;
      }
      this._previousValue = this._vf.initialValue;
      this._stepTime = this._vf.duration / this._numSupports;
      var active = !this._buffer[0].equals(this._buffer[1], x3dom.fields.Eps);
      if(this._vf.isActive !== active) {
        this.postMessage('isActive', active);
      }
    }
  },
  tick: function(now) {
    this.initialize();
    this._currTime = now;
    if(!this._bufferEndTime) {
      this._bufferEndTime = now;
      this._value = this._vf.initialValue;
      this.postMessage('value_changed', this._value);
      return true;
    }
    var Frac = this.updateBuffer(now);
    var Output = this._previousValue;
    var DeltaIn = this._previousValue.inverse().multiply(this._buffer[this._buffer.length - 1]);
    Output = Output.slerp(Output.multiply(DeltaIn), this.stepResponse((this._buffer.length - 1 + Frac) * this._stepTime));
    for(var C = this._buffer.length - 2; C >= 0; C--) {
      DeltaIn = this._buffer[C + 1].inverse().multiply(this._buffer[C]);
      Output = Output.slerp(Output.multiply(DeltaIn), this.stepResponse((C + Frac) * this._stepTime));
    }
    if(!Output.equals(this._value, x3dom.fields.Eps)) {
      Output = Output.normalize(Output);
      this._value.setValues(Output);
      this.postMessage('value_changed', this._value);
    } else {
      this.postMessage('isActive', false);
    }
    return this._vf.isActive;
  },
  updateBuffer: function(now) {
    var Frac = (now - this._bufferEndTime) / this._stepTime;
    var C;
    var NumToShift;
    var Alpha;
    if(Frac >= 1) {
      NumToShift = Math.floor(Frac);
      Frac -= NumToShift;
      if(NumToShift < this._buffer.length) {
        this._previousValue = this._buffer[this._buffer.length - NumToShift];
        for(C = this._buffer.length - 1; C >= NumToShift; C--) {
          this._buffer[C] = this._buffer[C - NumToShift];
        }
        for(C = 0; C < NumToShift; C++) {
          Alpha = C / NumToShift;
          this._buffer[C] = this._vf.set_destination.slerp(this._buffer[NumToShift], Alpha);
        }
      } else {
        this._previousValue = (NumToShift == this._buffer.length) ? this._buffer[0] : this._vf.set_destination;
        for(C = 0; C < this._buffer.length; C++) {
          this._buffer[C] = this._vf.set_destination;
        }
      }
      this._bufferEndTime += NumToShift * this._stepTime;
    }
    return Frac;
  }
}));
x3dom.registerNodeType("OrientationDamper", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.OrientationDamper.superClass.call(this, ctx);
  this.addField_SFRotation(ctx, 'initialDestination', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'initialValue', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'set_value', 0, 1, 0, 0);
  this.addField_SFRotation(ctx, 'set_destination', 0, 1, 0, 0);
  this._value0 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value1 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value2 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value3 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value4 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this._value5 = new x3dom.fields.Quaternion(0, 1, 0, 0);
  this.initialize();
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      if(!this._value0.equals(this._vf.set_destination, this._eps)) {
        this._value0 = this._vf.set_destination;
        if(!this._vf.isActive) {
          this.postMessage('isActive', true);
        }
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this._value1.setValues(this._vf.set_value);
      this._value2.setValues(this._vf.set_value);
      this._value3.setValues(this._vf.set_value);
      this._value4.setValues(this._vf.set_value);
      this._value5.setValues(this._vf.set_value);
      this._lastTick = 0;
      this.postMessage('value_changed', this._value5);
      if(!this._vf.isActive) {
        this._lastTick = 0;
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    this._value0.setValues(this._vf.initialDestination);
    this._value1.setValues(this._vf.initialValue);
    this._value2.setValues(this._vf.initialValue);
    this._value3.setValues(this._vf.initialValue);
    this._value4.setValues(this._vf.initialValue);
    this._value5.setValues(this._vf.initialValue);
    this._lastTick = 0;
    var active = !this._value0.equals(this._value1, this._eps);
    if(this._vf.isActive !== active) {
      this.postMessage('isActive', active);
    }
  },
  tick: function(now) {
    if(!this._lastTick) {
      this._lastTick = now;
      return false;
    }
    var delta = now - this._lastTick;
    var alpha = Math.exp(-delta / this._vf.tau);
    this._value1 = this._vf.order > 0 && this._vf.tau ? this._value0.slerp(this._value1, alpha) : new x3dom.fields.Quaternion(this._value0.x, this._value0.y, this._value0.z, this._value0.w);
    this._value2 = this._vf.order > 1 && this._vf.tau ? this._value1.slerp(this._value2, alpha) : new x3dom.fields.Quaternion(this._value1.x, this._value1.y, this._value1.z, this._value1.w);
    this._value3 = this._vf.order > 2 && this._vf.tau ? this._value2.slerp(this._value3, alpha) : new x3dom.fields.Quaternion(this._value2.x, this._value2.y, this._value2.z, this._value2.w);
    this._value4 = this._vf.order > 3 && this._vf.tau ? this._value3.slerp(this._value4, alpha) : new x3dom.fields.Quaternion(this._value3.x, this._value3.y, this._value3.z, this._value3.w);
    this._value5 = this._vf.order > 4 && this._vf.tau ? this._value4.slerp(this._value5, alpha) : new x3dom.fields.Quaternion(this._value4.x, this._value4.y, this._value4.z, this._value4.w);
    var dist = Math.abs(this._value1.inverse().multiply(this._value0).angle());
    if(this._vf.order > 1) {
      var dist2 = Math.abs(this._value2.inverse().multiply(this._value1).angle());
      if(dist2 > dist) {
        dist = dist2;
      }
    }
    if(this._vf.order > 2) {
      var dist3 = Math.abs(this._value3.inverse().multiply(this._value2).angle());
      if(dist3 > dist) {
        dist = dist3;
      }
    }
    if(this._vf.order > 3) {
      var dist4 = Math.abs(this._value4.inverse().multiply(this._value3).angle());
      if(dist4 > dist) {
        dist = dist4;
      }
    }
    if(this._vf.order > 4) {
      var dist5 = Math.abs(this._value5.inverse().multiply(this._value4).angle());
      if(dist5 > dist) {
        dist = dist5;
      }
    }
    if(dist < this._eps) {
      this._value1.setValues(this._value0);
      this._value2.setValues(this._value0);
      this._value3.setValues(this._value0);
      this._value4.setValues(this._value0);
      this._value5.setValues(this._value0);
      this.postMessage('value_changed', this._value0);
      this.postMessage('isActive', false);
      this._lastTick = 0;
      return false;
    }
    this.postMessage('value_changed', this._value5);
    this._lastTick = now;
    return true;
  }
}));
x3dom.registerNodeType("PositionChaser", "Followers", defineClass(x3dom.nodeTypes.X3DChaserNode, function(ctx) {
  x3dom.nodeTypes.PositionChaser.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'initialDestination', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'initialValue', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'set_value', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'set_destination', 0, 0, 0);
  this._buffer = new x3dom.fields.MFVec3f();
  this._previousValue = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value = new x3dom.fields.SFVec3f(0, 0, 0);
}, {
  nodeChanged: function() {
    this.initialize();
  },
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      this.initialize();
      this.updateBuffer(this._currTime);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this.initialize();
      this._previousValue.setValues(this._vf.set_value);
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C].setValues(this._vf.set_value);
      }
      this.postMessage('value_changed', this._vf.set_value);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    if(!this._initDone) {
      this._initDone = true;
      this._vf.set_destination = this._vf.initialDestination;
      this._buffer.length = this._numSupports;
      this._buffer[0] = this._vf.initialDestination;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.initialValue;
      }
      this._previousValue = this._vf.initialValue;
      this._stepTime = this._vf.duration / this._numSupports;
      var active = !this._buffer[0].equals(this._buffer[1], x3dom.fields.Eps);
      if(this._vf.isActive !== active) {
        this.postMessage('isActive', active);
      }
    }
  },
  tick: function(now) {
    this.initialize();
    this._currTime = now;
    if(!this._bufferEndTime) {
      this._bufferEndTime = now;
      this._value = this._vf.initialValue;
      this.postMessage('value_changed', this._value);
      return true;
    }
    var Frac = this.updateBuffer(now);
    var Output = this._previousValue;
    var DeltaIn = this._buffer[this._buffer.length - 1].subtract(this._previousValue);
    var DeltaOut = DeltaIn.multiply(this.stepResponse((this._buffer.length - 1 + Frac) * this._stepTime));
    Output = Output.add(DeltaOut);
    for(var C = this._buffer.length - 2; C >= 0; C--) {
      DeltaIn = this._buffer[C].subtract(this._buffer[C + 1]);
      DeltaOut = DeltaIn.multiply(this.stepResponse((C + Frac) * this._stepTime));
      Output = Output.add(DeltaOut);
    }
    if(!Output.equals(this._value, x3dom.fields.Eps)) {
      this._value.setValues(Output);
      this.postMessage('value_changed', this._value);
    } else {
      this.postMessage('isActive', false);
    }
    return this._vf.isActive;
  },
  updateBuffer: function(now) {
    var Frac = (now - this._bufferEndTime) / this._stepTime;
    var C;
    var NumToShift;
    var Alpha;
    if(Frac >= 1) {
      NumToShift = Math.floor(Frac);
      Frac -= NumToShift;
      if(NumToShift < this._buffer.length) {
        this._previousValue = this._buffer[this._buffer.length - NumToShift];
        for(C = this._buffer.length - 1; C >= NumToShift; C--) {
          this._buffer[C] = this._buffer[C - NumToShift];
        }
        for(C = 0; C < NumToShift; C++) {
          Alpha = C / NumToShift;
          this._buffer[C] = this._buffer[NumToShift].multiply(Alpha).add(this._vf.set_destination.multiply((1 - Alpha)));
        }
      } else {
        this._previousValue = (NumToShift == this._buffer.length) ? this._buffer[0] : this._vf.set_destination;
        for(C = 0; C < this._buffer.length; C++) {
          this._buffer[C] = this._vf.set_destination;
        }
      }
      this._bufferEndTime += NumToShift * this._stepTime;
    }
    return Frac;
  }
}));
x3dom.registerNodeType("PositionChaser2D", "Followers", defineClass(x3dom.nodeTypes.X3DChaserNode, function(ctx) {
  x3dom.nodeTypes.PositionChaser2D.superClass.call(this, ctx);
  this.addField_SFVec2f(ctx, 'initialDestination', 0, 0);
  this.addField_SFVec2f(ctx, 'initialValue', 0, 0);
  this.addField_SFVec2f(ctx, 'set_value', 0, 0);
  this.addField_SFVec2f(ctx, 'set_destination', 0, 0);
  this._buffer = new x3dom.fields.MFVec2f();
  this._previousValue = new x3dom.fields.SFVec2f(0, 0);
  this._value = new x3dom.fields.SFVec2f(0, 0);
}, {
  nodeChanged: function() {
    this.initialize();
  },
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      this.initialize();
      this.updateBuffer(this._currTime);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this.initialize();
      this._previousValue.setValues(this._vf.set_value);
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C].setValues(this._vf.set_value);
      }
      this.postMessage('value_changed', this._vf.set_value);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    if(!this._initDone) {
      this._initDone = true;
      this._vf.set_destination = this._vf.initialDestination;
      this._buffer.length = this._numSupports;
      this._buffer[0] = this._vf.initialDestination;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.initialValue;
      }
      this._previousValue = this._vf.initialValue;
      this._stepTime = this._vf.duration / this._numSupports;
      var active = !this._buffer[0].equals(this._buffer[1], x3dom.fields.Eps);
      if(this._vf.isActive !== active) {
        this.postMessage('isActive', active);
      }
    }
  },
  tick: function(now) {
    this.initialize();
    this._currTime = now;
    if(!this._bufferEndTime) {
      this._bufferEndTime = now;
      this._value = this._vf.initialValue;
      this.postMessage('value_changed', this._value);
      return true;
    }
    var Frac = this.updateBuffer(now);
    var Output = this._previousValue;
    var DeltaIn = this._buffer[this._buffer.length - 1].subtract(this._previousValue);
    var DeltaOut = DeltaIn.multiply(this.stepResponse((this._buffer.length - 1 + Frac) * this._stepTime));
    Output = Output.add(DeltaOut);
    for(var C = this._buffer.length - 2; C >= 0; C--) {
      DeltaIn = this._buffer[C].subtract(this._buffer[C + 1]);
      DeltaOut = DeltaIn.multiply(this.stepResponse((C + Frac) * this._stepTime));
      Output = Output.add(DeltaOut);
    }
    if(!Output.equals(this._value, x3dom.fields.Eps)) {
      this._value.setValues(Output);
      this.postMessage('value_changed', this._value);
    } else {
      this.postMessage('isActive', false);
    }
    return this._vf.isActive;
  },
  updateBuffer: function(now) {
    var Frac = (now - this._bufferEndTime) / this._stepTime;
    var C;
    var NumToShift;
    var Alpha;
    if(Frac >= 1) {
      NumToShift = Math.floor(Frac);
      Frac -= NumToShift;
      if(NumToShift < this._buffer.length) {
        this._previousValue = this._buffer[this._buffer.length - NumToShift];
        for(C = this._buffer.length - 1; C >= NumToShift; C--) {
          this._buffer[C] = this._buffer[C - NumToShift];
        }
        for(C = 0; C < NumToShift; C++) {
          Alpha = C / NumToShift;
          this._buffer[C] = this._buffer[NumToShift].multiply(Alpha).add(this._vf.set_destination.multiply((1 - Alpha)));
        }
      } else {
        this._previousValue = (NumToShift == this._buffer.length) ? this._buffer[0] : this._vf.set_destination;
        for(C = 0; C < this._buffer.length; C++) {
          this._buffer[C] = this._vf.set_destination;
        }
      }
      this._bufferEndTime += NumToShift * this._stepTime;
    }
    return Frac;
  }
}));
x3dom.registerNodeType("PositionDamper", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.PositionDamper.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'initialDestination', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'initialValue', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'set_value', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'set_destination', 0, 0, 0);
  this._value0 = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value1 = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value2 = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value3 = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value4 = new x3dom.fields.SFVec3f(0, 0, 0);
  this._value5 = new x3dom.fields.SFVec3f(0, 0, 0);
  this.initialize();
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      if(!this._value0.equals(this._vf.set_destination, this._eps)) {
        this._value0 = this._vf.set_destination;
        if(!this._vf.isActive) {
          this.postMessage('isActive', true);
        }
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this._value1.setValues(this._vf.set_value);
      this._value2.setValues(this._vf.set_value);
      this._value3.setValues(this._vf.set_value);
      this._value4.setValues(this._vf.set_value);
      this._value5.setValues(this._vf.set_value);
      this._lastTick = 0;
      this.postMessage('value_changed', this._value5);
      if(!this._vf.isActive) {
        this._lastTick = 0;
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    this._value0.setValues(this._vf.initialDestination);
    this._value1.setValues(this._vf.initialValue);
    this._value2.setValues(this._vf.initialValue);
    this._value3.setValues(this._vf.initialValue);
    this._value4.setValues(this._vf.initialValue);
    this._value5.setValues(this._vf.initialValue);
    this._lastTick = 0;
    var active = !this._value0.equals(this._value1, this._eps);
    if(this._vf.isActive !== active) {
      this.postMessage('isActive', active);
    }
  },
  tick: function(now) {
    if(!this._lastTick) {
      this._lastTick = now;
      return false;
    }
    var delta = now - this._lastTick;
    var alpha = Math.exp(-delta / this._vf.tau);
    this._value1 = this._vf.order > 0 && this._vf.tau ? this._value0.add(this._value1.subtract(this._value0).multiply(alpha)) : new x3dom.fields.SFVec3f(this._value0.x, this._value0.y, this._value0.z);
    this._value2 = this._vf.order > 1 && this._vf.tau ? this._value1.add(this._value2.subtract(this._value1).multiply(alpha)) : new x3dom.fields.SFVec3f(this._value1.x, this._value1.y, this._value1.z);
    this._value3 = this._vf.order > 2 && this._vf.tau ? this._value2.add(this._value3.subtract(this._value2).multiply(alpha)) : new x3dom.fields.SFVec3f(this._value2.x, this._value2.y, this._value2.z);
    this._value4 = this._vf.order > 3 && this._vf.tau ? this._value3.add(this._value4.subtract(this._value3).multiply(alpha)) : new x3dom.fields.SFVec3f(this._value3.x, this._value3.y, this._value3.z);
    this._value5 = this._vf.order > 4 && this._vf.tau ? this._value4.add(this._value5.subtract(this._value4).multiply(alpha)) : new x3dom.fields.SFVec3f(this._value4.x, this._value4.y, this._value4.z);
    var dist = this._value1.subtract(this._value0).length();
    if(this._vf.order > 1) {
      var dist2 = this._value2.subtract(this._value1).length();
      if(dist2 > dist) {
        dist = dist2;
      }
    }
    if(this._vf.order > 2) {
      var dist3 = this._value3.subtract(this._value2).length();
      if(dist3 > dist) {
        dist = dist3;
      }
    }
    if(this._vf.order > 3) {
      var dist4 = this._value4.subtract(this._value3).length();
      if(dist4 > dist) {
        dist = dist4;
      }
    }
    if(this._vf.order > 4) {
      var dist5 = this._value5.subtract(this._value4).length();
      if(dist5 > dist) {
        dist = dist5;
      }
    }
    if(dist < this._eps) {
      this._value1.setValues(this._value0);
      this._value2.setValues(this._value0);
      this._value3.setValues(this._value0);
      this._value4.setValues(this._value0);
      this._value5.setValues(this._value0);
      this.postMessage('value_changed', this._value0);
      this.postMessage('isActive', false);
      this._lastTick = 0;
      return false;
    }
    this.postMessage('value_changed', this._value5);
    this._lastTick = now;
    return true;
  }
}));
x3dom.registerNodeType("PositionDamper2D", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.PositionDamper2D.superClass.call(this, ctx);
  this.addField_SFVec2f(ctx, 'initialDestination', 0, 0);
  this.addField_SFVec2f(ctx, 'initialValue', 0, 0);
  this.addField_SFVec2f(ctx, 'set_value', 0, 0);
  this.addField_SFVec2f(ctx, 'set_destination', 0, 0);
  this._value0 = new x3dom.fields.SFVec2f(0, 0);
  this._value1 = new x3dom.fields.SFVec2f(0, 0);
  this._value2 = new x3dom.fields.SFVec2f(0, 0);
  this._value3 = new x3dom.fields.SFVec2f(0, 0);
  this._value4 = new x3dom.fields.SFVec2f(0, 0);
  this._value5 = new x3dom.fields.SFVec2f(0, 0);
  this.initialize();
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      if(!this._value0.equals(this._vf.set_destination, this._eps)) {
        this._value0 = this._vf.set_destination;
        if(!this._vf.isActive) {
          this.postMessage('isActive', true);
        }
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this._value1.setValues(this._vf.set_value);
      this._value2.setValues(this._vf.set_value);
      this._value3.setValues(this._vf.set_value);
      this._value4.setValues(this._vf.set_value);
      this._value5.setValues(this._vf.set_value);
      this._lastTick = 0;
      this.postMessage('value_changed', this._value5);
      if(!this._vf.isActive) {
        this._lastTick = 0;
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    this._value0.setValues(this._vf.initialDestination);
    this._value1.setValues(this._vf.initialValue);
    this._value2.setValues(this._vf.initialValue);
    this._value3.setValues(this._vf.initialValue);
    this._value4.setValues(this._vf.initialValue);
    this._value5.setValues(this._vf.initialValue);
    this._lastTick = 0;
    var active = !this._value0.equals(this._value1, this._eps);
    if(this._vf.isActive !== active) {
      this.postMessage('isActive', active);
    }
  },
  tick: function(now) {
    if(!this._lastTick) {
      this._lastTick = now;
      return false;
    }
    var delta = now - this._lastTick;
    var alpha = Math.exp(-delta / this._vf.tau);
    this._value1 = this._vf.order > 0 && this._vf.tau ? this._value0.add(this._value1.subtract(this._value0).multiply(alpha)) : new x3dom.fields.SFVec2f(this._value0.x, this._value0.y, this._value0.z);
    this._value2 = this._vf.order > 1 && this._vf.tau ? this._value1.add(this._value2.subtract(this._value1).multiply(alpha)) : new x3dom.fields.SFVec2f(this._value1.x, this._value1.y, this._value1.z);
    this._value3 = this._vf.order > 2 && this._vf.tau ? this._value2.add(this._value3.subtract(this._value2).multiply(alpha)) : new x3dom.fields.SFVec2f(this._value2.x, this._value2.y, this._value2.z);
    this._value4 = this._vf.order > 3 && this._vf.tau ? this._value3.add(this._value4.subtract(this._value3).multiply(alpha)) : new x3dom.fields.SFVec2f(this._value3.x, this._value3.y, this._value3.z);
    this._value5 = this._vf.order > 4 && this._vf.tau ? this._value4.add(this._value5.subtract(this._value4).multiply(alpha)) : new x3dom.fields.SFVec2f(this._value4.x, this._value4.y, this._value4.z);
    var dist = this._value1.subtract(this._value0).length();
    if(this._vf.order > 1) {
      var dist2 = this._value2.subtract(this._value1).length();
      if(dist2 > dist) {
        dist = dist2;
      }
    }
    if(this._vf.order > 2) {
      var dist3 = this._value3.subtract(this._value2).length();
      if(dist3 > dist) {
        dist = dist3;
      }
    }
    if(this._vf.order > 3) {
      var dist4 = this._value4.subtract(this._value3).length();
      if(dist4 > dist) {
        dist = dist4;
      }
    }
    if(this._vf.order > 4) {
      var dist5 = this._value5.subtract(this._value4).length();
      if(dist5 > dist) {
        dist = dist5;
      }
    }
    if(dist < this._eps) {
      this._value1.setValues(this._value0);
      this._value2.setValues(this._value0);
      this._value3.setValues(this._value0);
      this._value4.setValues(this._value0);
      this._value5.setValues(this._value0);
      this.postMessage('value_changed', this._value0);
      this.postMessage('isActive', false);
      this._lastTick = 0;
      return false;
    }
    this.postMessage('value_changed', this._value5);
    this._lastTick = now;
    return true;
  }
}));
x3dom.registerNodeType("ScalarChaser", "Followers", defineClass(x3dom.nodeTypes.X3DChaserNode, function(ctx) {
  x3dom.nodeTypes.ScalarChaser.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'initialDestination', 0);
  this.addField_SFFloat(ctx, 'initialValue', 0);
  this.addField_SFFloat(ctx, 'set_value', 0);
  this.addField_SFFloat(ctx, 'set_destination', 0);
  this._buffer = [];
  this._previousValue = 0;
  this._value = 0;
}, {
  nodeChanged: function() {
    this.initialize();
  },
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      this.initialize();
      this.updateBuffer(this._currTime);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this.initialize();
      this._previousValue = this._vf.set_value;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.set_value;
      }
      this.postMessage('value_changed', this._vf.set_value);
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    if(!this._initDone) {
      this._initDone = true;
      this._vf.set_destination = this._vf.initialDestination;
      this._buffer.length = this._numSupports;
      this._buffer[0] = this._vf.initialDestination;
      for(var C = 1; C < this._buffer.length; C++) {
        this._buffer[C] = this._vf.initialValue;
      }
      this._previousValue = this._vf.initialValue;
      this._stepTime = this._vf.duration / this._numSupports;
      var active = (Math.abs(this._buffer[0] - this._buffer[1]) >= x3dom.fields.Eps);
      if(this._vf.isActive !== active) {
        this.postMessage('isActive', active);
      }
    }
  },
  tick: function(now) {
    this.initialize();
    this._currTime = now;
    if(!this._bufferEndTime) {
      this._bufferEndTime = now;
      this._value = this._vf.initialValue;
      this.postMessage('value_changed', this._value);
      return true;
    }
    var Frac = this.updateBuffer(now);
    var Output = this._previousValue;
    var DeltaIn = this._buffer[this._buffer.length - 1] - this._previousValue;
    var DeltaOut = DeltaIn * (this.stepResponse((this._buffer.length - 1 + Frac) * this._stepTime));
    Output = Output + DeltaOut;
    for(var C = this._buffer.length - 2; C >= 0; C--) {
      DeltaIn = this._buffer[C] - this._buffer[C + 1];
      DeltaOut = DeltaIn * (this.stepResponse((C + Frac) * this._stepTime));
      Output = Output + DeltaOut;
    }
    if(Math.abs(Output - this._value) >= x3dom.fields.Eps) {
      this._value = Output;
      this.postMessage('value_changed', this._value);
    } else {
      this.postMessage('isActive', false);
    }
    return this._vf.isActive;
  },
  updateBuffer: function(now) {
    var Frac = (now - this._bufferEndTime) / this._stepTime;
    var C;
    var NumToShift;
    var Alpha;
    if(Frac >= 1) {
      NumToShift = Math.floor(Frac);
      Frac -= NumToShift;
      if(NumToShift < this._buffer.length) {
        this._previousValue = this._buffer[this._buffer.length - NumToShift];
        for(C = this._buffer.length - 1; C >= NumToShift; C--) {
          this._buffer[C] = this._buffer[C - NumToShift];
        }
        for(C = 0; C < NumToShift; C++) {
          Alpha = C / NumToShift;
          this._buffer[C] = this._buffer[NumToShift] * Alpha + this._vf.set_destination * (1 - Alpha);
        }
      } else {
        this._previousValue = (NumToShift == this._buffer.length) ? this._buffer[0] : this._vf.set_destination;
        for(C = 0; C < this._buffer.length; C++) {
          this._buffer[C] = this._vf.set_destination;
        }
      }
      this._bufferEndTime += NumToShift * this._stepTime;
    }
    return Frac;
  }
}));
x3dom.registerNodeType("ScalarDamper", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.ScalarDamper.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'initialDestination', 0);
  this.addField_SFFloat(ctx, 'initialValue', 0);
  this.addField_SFFloat(ctx, 'set_value', 0);
  this.addField_SFFloat(ctx, 'set_destination', 0);
  this._value0 = 0;
  this._value1 = 0;
  this._value2 = 0;
  this._value3 = 0;
  this._value4 = 0;
  this._value5 = 0;
  this.initialize();
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("set_destination") >= 0) {
      if(Math.abs(this._value0 - this._vf.set_destination) >= this._eps) {
        this._value0 = this._vf.set_destination;
        if(!this._vf.isActive) {
          this.postMessage('isActive', true);
        }
      }
    } else if(fieldName.indexOf("set_value") >= 0) {
      this._value1 = this._vf.set_value;
      this._value2 = this._vf.set_value;
      this._value3 = this._vf.set_value;
      this._value4 = this._vf.set_value;
      this._value5 = this._vf.set_value;
      this._lastTick = 0;
      this.postMessage('value_changed', this._value5);
      if(!this._vf.isActive) {
        this._lastTick = 0;
        this.postMessage('isActive', true);
      }
    }
  },
  initialize: function() {
    this._value0 = this._vf.initialDestination;
    this._value1 = this._vf.initialValue;
    this._value2 = this._vf.initialValue;
    this._value3 = this._vf.initialValue;
    this._value4 = this._vf.initialValue;
    this._value5 = this._vf.initialValue;
    this._lastTick = 0;
    var active = (Math.abs(this._value0 - this._value1) >= this._eps);
    if(this._vf.isActive !== active) {
      this.postMessage('isActive', active);
    }
  },
  tick: function(now) {
    if(!this._lastTick) {
      this._lastTick = now;
      return false;
    }
    var delta = now - this._lastTick;
    var alpha = Math.exp(-delta / this._vf.tau);
    this._value1 = this._vf.order > 0 && this._vf.tau ? this._value0 + alpha * (this._value1 - this._value0) : this._value0;
    this._value2 = this._vf.order > 1 && this._vf.tau ? this._value1 + alpha * (this._value2 - this._value1) : this._value1;
    this._value3 = this._vf.order > 2 && this._vf.tau ? this._value2 + alpha * (this._value3 - this._value2) : this._value2;
    this._value4 = this._vf.order > 3 && this._vf.tau ? this._value3 + alpha * (this._value4 - this._value3) : this._value3;
    this._value5 = this._vf.order > 4 && this._vf.tau ? this._value4 + alpha * (this._value5 - this._value4) : this._value4;
    var dist = Math.abs(this._value1 - this._value0);
    if(this._vf.order > 1) {
      var dist2 = Math.abs(this._value2 - this._value1);
      if(dist2 > dist) {
        dist = dist2;
      }
    }
    if(this._vf.order > 2) {
      var dist3 = Math.abs(this._value3 - this._value2);
      if(dist3 > dist) {
        dist = dist3;
      }
    }
    if(this._vf.order > 3) {
      var dist4 = Math.abs(this._value4 - this._value3);
      if(dist4 > dist) {
        dist = dist4;
      }
    }
    if(this._vf.order > 4) {
      var dist5 = Math.abs(this._value5 - this._value4);
      if(dist5 > dist) {
        dist = dist5;
      }
    }
    if(dist < this._eps) {
      this._value1 = this._value0;
      this._value2 = this._value0;
      this._value3 = this._value0;
      this._value4 = this._value0;
      this._value5 = this._value0;
      this.postMessage('value_changed', this._value0);
      this.postMessage('isActive', false);
      this._lastTick = 0;
      return false;
    }
    this.postMessage('value_changed', this._value5);
    this._lastTick = now;
    return true;
  }
}));
x3dom.registerNodeType("CoordinateDamper", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.CoordinateDamper.superClass.call(this, ctx);
  this.addField_MFVec3f(ctx, 'initialDestination', []);
  this.addField_MFVec3f(ctx, 'initialValue', []);
  this.addField_MFVec3f(ctx, 'set_value', []);
  this.addField_MFVec3f(ctx, 'set_destination', []);
  x3dom.debug.logWarning("CoordinateDamper NYI");
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {}
}));
x3dom.registerNodeType("TexCoordDamper2D", "Followers", defineClass(x3dom.nodeTypes.X3DDamperNode, function(ctx) {
  x3dom.nodeTypes.TexCoordDamper2D.superClass.call(this, ctx);
  this.addField_MFVec2f(ctx, 'initialDestination', []);
  this.addField_MFVec2f(ctx, 'initialValue', []);
  this.addField_MFVec2f(ctx, 'set_value', []);
  this.addField_MFVec2f(ctx, 'set_destination', []);
  x3dom.debug.logWarning("TexCoordDamper2D NYI");
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {}
}));
x3dom.registerNodeType("X3DInterpolatorNode", "Interpolation", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DInterpolatorNode.superClass.call(this, ctx);
  this.addField_MFFloat(ctx, 'key', []);
  this.addField_SFFloat(ctx, 'set_fraction', 0);
}, {
  linearInterp: function(time, interp) {
    if(time <= this._vf.key[0]) return this._vf.keyValue[0];
    else if(time >= this._vf.key[this._vf.key.length - 1]) return this._vf.keyValue[this._vf.key.length - 1];
    for(var i = 0; i < this._vf.key.length - 1; ++i) {
      if((this._vf.key[i] < time) && (time <= this._vf.key[i + 1])) return interp(this._vf.keyValue[i], this._vf.keyValue[i + 1], (time - this._vf.key[i]) / (this._vf.key[i + 1] - this._vf.key[i]));
    }
    return this._vf.keyValue[0];
  }
}));
x3dom.registerNodeType("OrientationInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.OrientationInterpolator.superClass.call(this, ctx);
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    this._vf.keyValue = x3dom.fields.MFRotation.parse(ctx.xmlNode.getAttribute('keyValue'));
  } else {
    this._vf.keyValue = new x3dom.fields.MFRotation();
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        return a.slerp(b, t);
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("PositionInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.PositionInterpolator.superClass.call(this, ctx);
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    this._vf.keyValue = x3dom.fields.MFVec3f.parse(ctx.xmlNode.getAttribute('keyValue'));
  } else {
    this._vf.keyValue = new x3dom.fields.MFVec3f();
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        return a.multiply(1.0 - t).add(b.multiply(t));
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("NormalInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.NormalInterpolator.superClass.call(this, ctx);
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    this._vf.keyValue = x3dom.fields.MFVec3f.parse(ctx.xmlNode.getAttribute('keyValue'));
  } else {
    this._vf.keyValue = new x3dom.fields.MFVec3f();
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        return a.multiply(1.0 - t).add(b.multiply(t)).normalize();
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("ColorInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.ColorInterpolator.superClass.call(this, ctx);
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    this._vf.keyValue = x3dom.fields.MFColor.parse(ctx.xmlNode.getAttribute('keyValue'));
  } else {
    this._vf.keyValue = new x3dom.fields.MFColor();
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        return a.multiply(1.0 - t).add(b.multiply(t));
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("ScalarInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.ScalarInterpolator.superClass.call(this, ctx);
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    this._vf.keyValue = Array.map(ctx.xmlNode.getAttribute('keyValue').split(/\s+/), function(n) {
      return +n;
    });
  } else {
    this._vf.keyValue = new x3dom.fields.MFFloat();
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        return(1.0 - t) * a + t * b;
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("CoordinateInterpolator", "Interpolation", defineClass(x3dom.nodeTypes.X3DInterpolatorNode, function(ctx) {
  x3dom.nodeTypes.CoordinateInterpolator.superClass.call(this, ctx);
  this._vf.keyValue = [];
  if(ctx && ctx.xmlNode.hasAttribute('keyValue')) {
    var arr = x3dom.fields.MFVec3f.parse(ctx.xmlNode.getAttribute('keyValue'));
    var key = this._vf.key.length > 0 ? this._vf.key.length : 1;
    var len = arr.length / key;
    for(var i = 0; i < key; i++) {
      var val = new x3dom.fields.MFVec3f();
      for(var j = 0; j < len; j++) {
        val.push(arr[i * len + j]);
      }
      this._vf.keyValue.push(val);
    }
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "set_fraction") {
      var value = this.linearInterp(this._vf.set_fraction, function(a, b, t) {
        var val = new x3dom.fields.MFVec3f();
        for(var i = 0; i < a.length; i++)
        val.push(a[i].multiply(1.0 - t).add(b[i].multiply(t)));
        return val;
      });
      this.postMessage('value_changed', value);
    }
  }
}));
x3dom.registerNodeType("TimeSensor", "Time", defineClass(x3dom.nodeTypes.X3DSensorNode, function(ctx) {
  x3dom.nodeTypes.TimeSensor.superClass.call(this, ctx);
  ctx.doc._nodeBag.timer.push(this);
  this.addField_SFTime(ctx, 'cycleInterval', 1);
  this.addField_SFBool(ctx, 'enabled', true);
  this.addField_SFBool(ctx, 'loop', false);
  this.addField_SFTime(ctx, 'startTime', 0);
  this.addField_SFTime(ctx, 'stopTime', 0);
  this.addField_SFTime(ctx, 'pauseTime', 0);
  this.addField_SFTime(ctx, 'resumeTime', 0);
  this.addField_SFTime(ctx, 'cycleTime', 0);
  this.addField_SFFloat(ctx, 'fraction_changed', 0);
  this.addField_SFBool(ctx, 'isActive', false);
  this.addField_SFTime(ctx, 'time', 0);
  this.addField_SFBool(ctx, 'first', true);
  this.addField_SFFloat(ctx, 'firstCycle', 0.0);
  this._prevCycle = -1;
}, {
  onframe: function(ts) {
    if(!this._vf.enabled) {
      return;
    }
    var doRun = (ts >= this._vf.startTime);
    var doPaused = (ts >= this._vf.pauseTime) && (this._vf.pauseTime > this._vf.resumeTime);
    var cycleFrac, cycle, fraction, elapsed;
    var isActive = (ts >= this._vf.startTime);
    if(isActive && this._vf.cycleInterval > 0) {
      cycleFrac = (ts - this._vf.startTime) / this._vf.cycleInterval;
      cycle = Math.floor(cycleFrac);
      if(this._vf.first == true) {
        firstCycle = cycle;
      }
      this._vf.first = false;
      if(((cycle - firstCycle) > 0) && (this._vf.loop == false)) {
        fraction = 1.0;
      } else {
        fraction = cycleFrac - cycle;
        if(fraction < x3dom.fields.Eps) {
          if(ts > this._vf.startTime) {
            fraction = 1.0;
          }
        }
      }
    }
    if(isActive) {
      if(!this._vf.isActive) {
        this.postMessage('isActive', true);
      }
      this.postMessage('fraction_changed', fraction);
      this.postMessage('time', ts);
      if(this._prevCycle != cycle) {
        this._prevCycle = cycle;
        this.postMessage('cycleTime', ts);
        if(!this._vf.loop) {
          this.postMessage('isActive', false);
        }
        return;
      }
    }
  },
  fieldChanged: function(fieldName) {
    if(fieldName == "enabled") {
      if(!this._vf.enabled && this._vf.isActive) {
        this.postMessage('isActive', false);
      }
    }
  },
  parentRemoved: function(parent) {
    if(this._parentNodes.length === 0) {
      var doc = this.findX3DDoc();
      for(var i = 0, n = doc._nodeBag.timer.length; i < n; i++) {
        if(doc._nodeBag.timer[i] === this) {
          doc._nodeBag.timer.splice(i, 1);
        }
      }
    }
  }
}));
x3dom.registerNodeType("X3DTimeDependentNode", "Time", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DTimeDependentNode.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'loop', false);
}));
x3dom.registerNodeType("Anchor", "Networking", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Anchor.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'url', []);
}, {
  doIntersect: function(line) {
    var isect = false;
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        isect = this._childNodes[i].doIntersect(line) || isect;
      }
    }
    return isect;
  },
  handleTouch: function() {
    window.location = this._nameSpace.getURL(this._vf.url[0]);
  }
}));
x3dom.registerNodeType("Inline", "Networking", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Inline.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'url', []);
  this.addField_SFBool(ctx, 'load', true);
  this.addField_MFString(ctx, 'nameSpaceName', []);
  this.addField_SFBool(ctx, 'mapDEFToID', false);
  this.count = 0;
  this.currentInline = ctx.xmlNode;
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == "url") {
      var xhr = this.nodeChanged();
      xhr = null;
    }
  },
  nodeChanged: function() {
    var that = this;
    var xhr = new window.XMLHttpRequest();
    if(xhr.overrideMimeType) xhr.overrideMimeType('text/xml');
    this._nameSpace.doc.downloadCount += 1;
    xhr.onreadystatechange = function() {
      if(xhr.readyState != 4) {
        return;
      }
      if(xhr.status === 202 && that.count < 10) {
        that.count++;
        x3dom.debug.logInfo('Statuscode 202 and send new Request');
        window.setTimeout(function() {
          that.nodeChanged();
        }, 5000);
        return xhr;
      } else if((xhr.status !== 200) && (xhr.status !== 0)) {
        if(that.currentInline && (that.currentInline['onerror'] || that.currentInline.hasAttribute('onerror') || that._listeners['onerror'])) {
          try {
            var evt = {
              target: that.currentInline,
              type: 'onerror',
              error: 'XMLHttpRequest Error',
              cancelBubble: false,
              stopPropagation: function() {
                this.cancelBubble = true;
              }
            };
            var attrib = that.currentInline[evt.type];
            if(typeof(attrib) === "function") {
              attrib.call(that.currentInline, evt);
            } else {
              var funcStr = that.currentInline.getAttribute(evt.type);
              var func = new Function('evt', funcStr);
              func.call(that.currentInline, evt);
            }
            var list = that._listeners[evt.type];
            if(list) {
              for(var i = 0; i < list.length; i++) {
                list[i].call(that.currentInline, evt);
              }
            }
          } catch(ex) {
            x3dom.debug.logException(ex);
          }
        }
        that._nameSpace.doc.downloadCount -= 1;
        x3dom.debug.logError('XMLHttpRequest requires a web server running!');
        that.count = 0;
        return xhr;
      } else if((xhr.status == 200) || (xhr.status == 0)) {
        that.count = 0;
      }
      x3dom.debug.logInfo('Inline: downloading ' + that._vf.url + ' done.');
      if(navigator.appName != "Microsoft Internet Explorer") var xml = xhr.responseXML;
      else var xml = new DOMParser().parseFromString(xhr.responseText, "text/xml");
      var inlScene = null;
      var newScene = null;
      var nameSpace = null;
      if(xml !== undefined && xml !== null) {
        inlScene = xml.getElementsByTagName('Scene')[0] || xml.getElementsByTagName('scene')[0];
      } else {
        if(that.currentInline && (that.currentInline['onerror'] || that.currentInline.hasAttribute('onerror') || that._listeners['onerror'])) {
          try {
            var evt = {
              target: that.currentInline,
              type: 'onerror',
              error: 'Parser Error',
              cancelBubble: false,
              stopPropagation: function() {
                this.cancelBubble = true;
              }
            };
            var attrib = that.currentInline[evt.type];
            if(typeof(attrib) === "function") {
              attrib.call(that.currentInline, evt);
            } else {
              var funcStr = that.currentInline.getAttribute(evt.type);
              var func = new Function('evt', funcStr);
              func.call(that.currentInline, evt);
            }
            var list = that._listeners[evt.type];
            if(list) {
              for(var i = 0; i < list.length; i++) {
                list[i].call(that.currentInline, evt);
              }
            }
          } catch(ex) {
            x3dom.debug.logException(ex);
          }
        }
      }
      if(inlScene) {
        nameSpace = new x3dom.NodeNameSpace("", that._nameSpace.doc);
        nameSpace.setBaseURL(that._vf.url[0]);
        newScene = nameSpace.setupTree(inlScene);
        if(that._vf.nameSpaceName.length != 0) {
          Array.forEach(inlScene.childNodes, function(childDomNode) {
            if(childDomNode instanceof Element) {
              setNamespace(that._vf.nameSpaceName, childDomNode, that._vf.mapDEFToID);
              that.currentInline.appendChild(childDomNode);
            }
          });
        }
        if(that.currentInline && (that.currentInline['onload'] || that.currentInline.hasAttribute('onload') || that._listeners['onload'])) {
          try {
            var evt = {
              target: that.currentInline,
              type: 'onload',
              cancelBubble: false,
              stopPropagation: function() {
                this.cancelBubble = true;
              }
            };
            var attrib = that.currentInline[evt.type];
            if(typeof(attrib) === "function") {
              attrib.call(that.currentInline, evt);
            } else {
              var funcStr = that.currentInline.getAttribute(evt.type);
              var func = new Function('evt', funcStr);
              func.call(that.currentInline, evt);
            }
            var list = that._listeners[evt.type];
            if(list) {
              for(var i = 0; i < list.length; i++) {
                list[i].call(that.currentInline, evt);
              }
            }
          } catch(ex) {
            x3dom.debug.logException(ex);
          }
        }
      } else {
        x3dom.debug.logWarning('no Scene in ' + xml.localName);
      }
      var global = x3dom.getGlobal();
      while(that._childNodes.length !== 0)
      global['_remover'] = that.removeChild(that._childNodes[0]);
      delete global['_remover'];
      if(newScene) {
        that.addChild(newScene);
        that._nameSpace.doc.downloadCount -= 1;
        that._nameSpace.doc.needRender = true;
        x3dom.debug.logInfo('Inline: added ' + that._vf.url + ' to scene.');
      }
      newScene = null;
      nameSpace = null;
      xml = null;
      inlScene = null;
    };
    xhr.open('GET', encodeURI(this._nameSpace.getURL(this._vf.url[0])), true);
    xhr.send(null);
    return xhr;
  }
}));

function setNamespace(prefix, childDomNode, mapDEFToID) {
  if(childDomNode instanceof Element && childDomNode.__setAttribute !== undefined) {
    if(childDomNode.hasAttribute('id')) {
      childDomNode.__setAttribute('id', prefix.toString().replace(' ', '') + '__' + childDomNode.getAttribute('id'));
    } else if(childDomNode.hasAttribute('DEF') && mapDEFToID) {
      childDomNode.__setAttribute('id', prefix.toString().replace(' ', '') + '__' + childDomNode.getAttribute('DEF'));
    }
  }
  if(childDomNode.hasChildNodes()) {
    Array.forEach(childDomNode.childNodes, function(children) {
      setNamespace(prefix, children, mapDEFToID);
    });
  }
}
x3dom.registerNodeType("X3DBackgroundNode", "EnvironmentalEffects", defineClass(x3dom.nodeTypes.X3DBindableNode, function(ctx) {
  x3dom.nodeTypes.X3DBackgroundNode.superClass.call(this, ctx);
  this._dirty = true;
}, {
  getSkyColor: function() {
    return new x3dom.fields.SFColor(0, 0, 0);
  },
  getTransparency: function() {
    return 0;
  },
  getTexUrl: function() {
    return [];
  }
}));
x3dom.registerNodeType("X3DFogNode", "EnvironmentalEffects", defineClass(x3dom.nodeTypes.X3DBindableNode, function(ctx) {
  x3dom.nodeTypes.X3DFogNode.superClass.call(this, ctx);
}, {}));
x3dom.registerNodeType("Fog", "EnvironmentalEffects", defineClass(x3dom.nodeTypes.X3DFogNode, function(ctx) {
  x3dom.nodeTypes.Fog.superClass.call(this, ctx);
  this.addField_SFColor(ctx, 'color', 1, 1, 1);
  this.addField_SFString(ctx, 'fogType', "LINEAR");
  this.addField_SFFloat(ctx, 'visibilityRange', 0);
}, {}));
x3dom.registerNodeType("Background", "EnvironmentalEffects", defineClass(x3dom.nodeTypes.X3DBackgroundNode, function(ctx) {
  x3dom.nodeTypes.Background.superClass.call(this, ctx);
  var trans = ctx.autoGen ? 1 : 0;
  this.addField_MFColor(ctx, 'skyColor', [new x3dom.fields.SFColor(0, 0, 0)]);
  this.addField_MFFloat(ctx, 'skyAngle', []);
  this.addField_MFColor(ctx, 'groundColor', []);
  this.addField_MFFloat(ctx, 'groundAngle', []);
  this.addField_SFFloat(ctx, 'transparency', trans);
  this.addField_MFString(ctx, 'backUrl', []);
  this.addField_MFString(ctx, 'bottomUrl', []);
  this.addField_MFString(ctx, 'frontUrl', []);
  this.addField_MFString(ctx, 'leftUrl', []);
  this.addField_MFString(ctx, 'rightUrl', []);
  this.addField_MFString(ctx, 'topUrl', []);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName.indexOf("Url") > 0) {
      this._dirty = true;
    } else if(fieldName === "set_bind") {
      this.bind(this._vf.set_bind);
    }
  },
  getSkyColor: function() {
    return this._vf.skyColor;
  },
  getGroundColor: function() {
    return this._vf.groundColor;
  },
  getTransparency: function() {
    return this._vf.transparency;
  },
  getTexUrl: function() {
    return [this._nameSpace.getURL(this._vf.backUrl[0]), this._nameSpace.getURL(this._vf.frontUrl[0]), this._nameSpace.getURL(this._vf.bottomUrl[0]), this._nameSpace.getURL(this._vf.topUrl[0]), this._nameSpace.getURL(this._vf.leftUrl[0]), this._nameSpace.getURL(this._vf.rightUrl[0])];
  }
}));
x3dom.registerNodeType("X3DViewpointNode", "Navigation", defineClass(x3dom.nodeTypes.X3DBindableNode, function(ctx) {
  x3dom.nodeTypes.X3DViewpointNode.superClass.call(this, ctx);
}, {}));
x3dom.registerNodeType("X3DNavigationInfoNode", "Navigation", defineClass(x3dom.nodeTypes.X3DBindableNode, function(ctx) {
  x3dom.nodeTypes.X3DNavigationInfoNode.superClass.call(this, ctx);
}, {}));
x3dom.registerNodeType("Viewpoint", "Navigation", defineClass(x3dom.nodeTypes.X3DViewpointNode, function(ctx) {
  x3dom.nodeTypes.Viewpoint.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'fieldOfView', 0.785398);
  this.addField_SFVec3f(ctx, 'position', 0, 0, 10);
  this.addField_SFRotation(ctx, 'orientation', 0, 0, 0, 1);
  this.addField_SFVec3f(ctx, 'centerOfRotation', 0, 0, 0);
  this.addField_SFFloat(ctx, 'zNear', 0.1);
  this.addField_SFFloat(ctx, 'zFar', 100000);
  this._viewMatrix = x3dom.fields.SFMatrix4f.translation(this._vf.position).mult(this._vf.orientation.toMatrix()).inverse();
  this._projMatrix = null;
  this._lastAspect = 1.0;
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == "position" || fieldName == "orientation") {
      this.resetView();
    } else if(fieldName == "fieldOfView" || fieldName == "zNear" || fieldName == "zFar") {
      this._projMatrix = null;
    } else if(fieldName === "set_bind") {
      this.bind(this._vf.set_bind);
    }
  },
  activate: function(prev) {
    if(prev) {
      this._nameSpace.doc._viewarea.animateTo(this, prev);
    }
    x3dom.nodeTypes.X3DViewpointNode.prototype.activate.call(this, prev);
    this._nameSpace.doc._viewarea._needNavigationMatrixUpdate = true;
  },
  deactivate: function(prev) {
    x3dom.nodeTypes.X3DViewpointNode.prototype.deactivate.call(this, prev);
  },
  getCenterOfRotation: function() {
    return this._vf.centerOfRotation;
  },
  getViewMatrix: function() {
    return this._viewMatrix;
  },
  getFieldOfView: function() {
    return this._vf.fieldOfView;
  },
  setView: function(newView) {
    var mat = this.getCurrentTransform();
    mat = mat.inverse();
    this._viewMatrix = mat.mult(newView);
  },
  resetView: function() {
    this._viewMatrix = x3dom.fields.SFMatrix4f.translation(this._vf.position).mult(this._vf.orientation.toMatrix()).inverse();
  },
  getTransformation: function() {
    return this.getCurrentTransform();
  },
  getProjectionMatrix: function(aspect) {
    if(this._projMatrix == null) {
      var fovy = this._vf.fieldOfView;
      var zfar = this._vf.zFar;
      var znear = this._vf.zNear;
      var f = 1 / Math.tan(fovy / 2);
      this._projMatrix = new x3dom.fields.SFMatrix4f(f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (znear + zfar) / (znear - zfar), 2 * znear * zfar / (znear - zfar), 0, 0, -1, 0);
      this._lastAspect = aspect;
    } else if(this._lastAspect !== aspect) {
      this._projMatrix._00 = (1 / Math.tan(this._vf.fieldOfView / 2)) / aspect;
      this._lastAspect = aspect;
    }
    return this._projMatrix;
  }
}));
x3dom.registerNodeType("Viewfrustum", "Navigation", defineClass(x3dom.nodeTypes.X3DViewpointNode, function(ctx) {
  x3dom.nodeTypes.Viewfrustum.superClass.call(this, ctx);
  this.addField_SFMatrix4f(ctx, 'modelview', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  this.addField_SFMatrix4f(ctx, 'projection', 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  this._viewMatrix = this._vf.modelview.inverse();
  this._projMatrix = this._vf.projection;
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == "modelview") {
      this._viewMatrix = this._vf.modelview.inverse();
    } else if(fieldName == "projection") {
      this._projMatrix = this._vf.projection;
    } else if(fieldName === "set_bind") {
      this.bind(this._vf.set_bind);
    }
  },
  activate: function(prev) {
    if(prev) {
      this._nameSpace.doc._viewarea.animateTo(this, prev);
    }
    x3dom.nodeTypes.X3DViewpointNode.prototype.activate.call(this, prev);
    this._nameSpace.doc._viewarea._needNavigationMatrixUpdate = true;
  },
  deactivate: function(prev) {
    x3dom.nodeTypes.X3DViewpointNode.prototype.deactivate.call(this, prev);
  },
  getCenterOfRotation: function() {
    return new x3dom.fields.SFVec3f(0, 0, 0);
  },
  getViewMatrix: function() {
    return this._viewMatrix;
  },
  getFieldOfView: function() {
    return(2.0 * Math.atan(1.0 / this._projMatrix._11));
  },
  setView: function(newView) {
    var mat = this.getCurrentTransform();
    mat = mat.inverse();
    this._viewMatrix = mat.mult(newView);
  },
  resetView: function() {
    this._viewMatrix = this._vf.modelview.inverse();
  },
  getTransformation: function() {
    return this.getCurrentTransform();
  },
  getProjectionMatrix: function(aspect) {
    return this._projMatrix;
  }
}));
x3dom.registerNodeType("NavigationInfo", "Navigation", defineClass(x3dom.nodeTypes.X3DNavigationInfoNode, function(ctx) {
  x3dom.nodeTypes.NavigationInfo.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'headlight', true);
  this.addField_MFString(ctx, 'type', ["EXAMINE", "ANY"]);
  this.addField_MFFloat(ctx, 'avatarSize', [0.25, 1.6, 0.75]);
  this.addField_SFFloat(ctx, 'speed', 1.0);
  this.addField_SFFloat(ctx, 'visibilityLimit', 0.0);
  this.addField_SFTime(ctx, 'transitionTime', 1.0);
  this.addField_MFString(ctx, 'transitionType', ["LINEAR"]);
  x3dom.debug.logInfo("NavType: " + this._vf.type[0].toLowerCase());
}, {
  fieldChanged: function(fieldName) {},
  getType: function() {
    return this._vf.type[0].toLowerCase();
  },
  setType: function(type, viewarea) {
    var navType = type.toLowerCase();
    switch(navType) {
    case 'game':
      if(this._vf.type[0].toLowerCase() !== navType) {
        if(viewarea) viewarea.initMouseState();
        else this._nameSpace.doc._viewarea.initMouseState();
      }
      break;
    default:
      break;
    }
    this._vf.type[0] = navType;
    x3dom.debug.logInfo("Switch to " + navType + " mode.");
  }
}));
x3dom.registerNodeType("Billboard", "Navigation", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Billboard.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'axisOfRotation', 0, 1, 0);
  this._eye = new x3dom.fields.SFVec3f(0, 0, 0);
  this._eyeViewUp = new x3dom.fields.SFVec3f(0, 0, 0);
  this._eyeLook = new x3dom.fields.SFVec3f(0, 0, 0);
  this._viewAlignedMat = x3dom.fields.SFMatrix4f.identity();
}, {
  collectDrawableObjects: function(transform, out) {
    if(!this._vf.render) {
      return;
    }
    var min = x3dom.fields.SFVec3f.MAX();
    var max = x3dom.fields.SFVec3f.MIN();
    var ok = this.getVolume(min, max, true);
    var rotMat = x3dom.fields.SFMatrix4f.identity();
    var mid = (max.add(min).multiply(0.5)).add(new x3dom.fields.SFVec3f(0, 0, 0));
    var billboard_to_viewer = this._eye.subtract(mid);
    if(this._vf.axisOfRotation.equals(new x3dom.fields.SFVec3f(0, 0, 0), x3dom.fields.Eps)) {
      var rot1 = x3dom.fields.Quaternion.rotateFromTo(billboard_to_viewer, new x3dom.fields.SFVec3f(0, 0, 1));
      rotMat = rot1.toMatrix().transpose();
      var yAxis = rotMat.multMatrixPnt(new x3dom.fields.SFVec3f(0, 1, 0)).normalize();
      var zAxis = rotMat.multMatrixPnt(new x3dom.fields.SFVec3f(0, 0, 1)).normalize();
      if(!this._eyeViewUp.equals(new x3dom.fields.SFVec3f(0, 0, 0), x3dom.fields.Eps)) {
        var rot2 = x3dom.fields.Quaternion.rotateFromTo(this._eyeLook, zAxis);
        var rotatedyAxis = rot2.toMatrix().transpose().multMatrixVec(yAxis);
        var rot3 = x3dom.fields.Quaternion.rotateFromTo(this._eyeViewUp, rotatedyAxis);
        rotMat = rot2.toMatrix().transpose().mult(rotMat);
        rotMat = rot3.toMatrix().transpose().mult(rotMat);
      }
    } else {
      var normalPlane = this._vf.axisOfRotation.cross(billboard_to_viewer);
      normalPlane = normalPlane.normalize();
      if(this._eye.z < 0) {
        normalPlane = normalPlane.multiply(-1);
      }
      var degreesToRotate = Math.asin(normalPlane.dot(new x3dom.fields.SFVec3f(0, 0, 1)));
      if(this._eye.z < 0) {
        degreesToRotate += Math.PI;
      }
      rotMat = x3dom.fields.SFMatrix4f.parseRotation(this._vf.axisOfRotation.x + ", " + this._vf.axisOfRotation.y + ", " + this._vf.axisOfRotation.z + ", " + degreesToRotate * (-1));
    }
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i]) {
        var childTransform = this._childNodes[i].transformMatrix(transform.mult(rotMat));
        this._childNodes[i].collectDrawableObjects(childTransform, out);
      }
    }
    if(out !== null) {
      out.Billboards.push([transform, this]);
    }
  }
}));
x3dom.registerNodeType("Collision", "Navigation", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.Collision.superClass.call(this, ctx);
  this.addField_SFBool(ctx, "enabled", true);
  this.addField_SFNode("proxy", x3dom.nodeTypes.X3DGroupingNode);
}, {
  collectDrawableObjects: function(transform, out) {
    for(var i = 0; i < this._childNodes.length; i++) {
      if(this._childNodes[i] && (this._childNodes[i] !== this._cf.proxy.node)) {
        var childTransform = this._childNodes[i].transformMatrix(transform);
        this._childNodes[i].collectDrawableObjects(childTransform, out);
      }
    }
  }
}));
x3dom.registerNodeType("LOD", "Navigation", defineClass(x3dom.nodeTypes.X3DGroupingNode, function(ctx) {
  x3dom.nodeTypes.LOD.superClass.call(this, ctx);
  this.addField_SFBool(ctx, "forceTransitions", false);
  this.addField_SFVec3f(ctx, 'center', 0, 0, 0);
  this.addField_MFFloat(ctx, "range", []);
  this._eye = new x3dom.fields.SFVec3f(0, 0, 0);
}, {
  collectDrawableObjects: function(transform, out) {
    var i = 0,
      n = this._childNodes.length;
    var min = x3dom.fields.SFVec3f.MAX();
    var max = x3dom.fields.SFVec3f.MIN();
    var ok = this.getVolume(min, max, true);
    var mid = (max.add(min).multiply(0.5)).add(this._vf.center);
    var len = mid.subtract(this._eye).length();
    while(i < this._vf.range.length && len > this._vf.range[i]) {
      i++;
    }
    if(i && i >= n) {
      i = n - 1;
    }
    if(n && this._childNodes[i]) {
      var childTransform = this._childNodes[i].transformMatrix(transform);
      this._childNodes[i].collectDrawableObjects(childTransform, out);
    }
    if(out !== null) {
      out.LODs.push([transform, this]);
    }
  }
}));
x3dom.registerNodeType("Text", "Text", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Text.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'string', []);
  this.addField_MFFloat(ctx, 'length', []);
  this.addField_SFFloat(ctx, 'maxExtent', 0.0);
  this.addField_SFNode('fontStyle', x3dom.nodeTypes.X3DFontStyleNode);
}, {
  nodeChanged: function() {
    if(!this._cf.fontStyle.node) {
      this.addChild(x3dom.nodeTypes.FontStyle.defaultNode());
    }
  },
  fieldChanged: function(fieldName) {
    if(fieldName == 'string' || fieldName == 'family' || fieldName == 'horizontal' || fieldName == 'justify' || fieldName == 'language' || fieldName == 'leftToRight' || fieldName == 'size' || fieldName == 'spacing' || fieldName == 'style' || fieldName == 'topToBottom') {
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.texture = true;
        node._dirty.text = true;
      });
    }
  }
}));
x3dom.registerNodeType("X3DFontStyleNode", "Text", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.X3DFontStyleNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("FontStyle", "Text", defineClass(x3dom.nodeTypes.X3DFontStyleNode, function(ctx) {
  x3dom.nodeTypes.FontStyle.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'family', ['SERIF']);
  this.addField_SFBool(ctx, 'horizontal', true);
  this.addField_MFString(ctx, 'justify', ['BEGIN']);
  this.addField_SFString(ctx, 'language', "");
  this.addField_SFBool(ctx, 'leftToRight', true);
  this.addField_SFFloat(ctx, 'size', 1.0);
  this.addField_SFFloat(ctx, 'spacing', 1.0);
  this.addField_SFString(ctx, 'style', "PLAIN");
  this.addField_SFBool(ctx, 'topToBottom', true);
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName == 'family' || fieldName == 'horizontal' || fieldName == 'justify' || fieldName == 'language' || fieldName == 'leftToRight' || fieldName == 'size' || fieldName == 'spacing' || fieldName == 'style' || fieldName == 'topToBottom') {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged(fieldName);
      });
    }
  }
}));
x3dom.nodeTypes.FontStyle.defaultNode = function() {
  if(!x3dom.nodeTypes.FontStyle._defaultNode) {
    x3dom.nodeTypes.FontStyle._defaultNode = new x3dom.nodeTypes.FontStyle();
    x3dom.nodeTypes.FontStyle._defaultNode.nodeChanged();
  }
  return x3dom.nodeTypes.FontStyle._defaultNode;
};
x3dom.registerNodeType("X3DSoundNode", "Sound", defineClass(x3dom.nodeTypes.X3DChildNode, function(ctx) {
  x3dom.nodeTypes.X3DSoundNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("Sound", "Sound", defineClass(x3dom.nodeTypes.X3DSoundNode, function(ctx) {
  x3dom.nodeTypes.Sound.superClass.call(this, ctx);
  this.addField_SFNode('source', x3dom.nodeTypes.X3DSoundSourceNode);
}, {
  nodeChanged: function() {
    if(this._cf.source.node || !this._xmlNode) {
      return;
    }
    x3dom.debug.logInfo("No AudioClip child node given, searching for &lt;audio&gt; elements...");
    var that = this;
    try {
      Array.forEach(this._xmlNode.childNodes, function(childDomNode) {
        if(childDomNode.nodeType === 1) {
          x3dom.debug.logInfo("### Found &lt;" + childDomNode.nodeName + "&gt; tag.");
          if(childDomNode.localName.toLowerCase() === "audio") {
            var loop = childDomNode.getAttribute("loop");
            loop = loop ? (loop.toLowerCase() === "loop") : false;
            var newNode = childDomNode.cloneNode(false);
            childDomNode.parentNode.removeChild(childDomNode);
            childDomNode = null;
            if(navigator.appName != "Microsoft Internet Explorer") {
              document.body.appendChild(newNode);
            }
            var startAudio = function() {
                newNode.play();
              };
            var audioDone = function() {
                if(loop) {
                  newNode.play();
                }
              };
            newNode.addEventListener("canplaythrough", startAudio, true);
            newNode.addEventListener("ended", audioDone, true);
          }
        }
      });
    } catch(e) {}
  }
}));
x3dom.registerNodeType("X3DSoundSourceNode", "Sound", defineClass(x3dom.nodeTypes.X3DTimeDependentNode, function(ctx) {
  x3dom.nodeTypes.X3DSoundSourceNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("AudioClip", "Sound", defineClass(x3dom.nodeTypes.X3DSoundSourceNode, function(ctx) {
  x3dom.nodeTypes.AudioClip.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'url', []);
  this.addField_SFBool(ctx, 'enabled', true);
  this.addField_SFBool(ctx, 'loop', false);
  this._audio = null;
}, {
  nodeChanged: function() {
    this._audio = document.createElement('audio');
    this._audio.setAttribute('autobuffer', 'true');
    if(navigator.appName != "Microsoft Internet Explorer") {
      document.body.appendChild(this._audio);
    }
    for(var i = 0; i < this._vf.url.length; i++) {
      var audioUrl = this._nameSpace.getURL(this._vf.url[i]);
      x3dom.debug.logInfo('Adding sound file: ' + audioUrl);
      var src = document.createElement('source');
      src.setAttribute('src', audioUrl);
      this._audio.appendChild(src);
    }
    var that = this;
    var startAudio = function() {
        that._audio.play();
      };
    var audioDone = function() {
        if(that._vf.loop === true) {
          that._audio.play();
        }
      };
    this._audio.addEventListener("canplaythrough", startAudio, true);
    this._audio.addEventListener("ended", audioDone, true);
  },
  fieldChanged: function(fieldName) {
    if(fieldName === "enabled") {
      if(this._vf.enabled === true) {
        this._audio.play();
      } else {
        this._audio.pause();
      }
    } else if(fieldName === "loop") {
      if(this._vf.loop === true) {
        this._audio.play();
      }
    } else if(fieldName === "url") {
      this._audio.pause();
      while(this._audio.hasChildNodes()) {
        this._audio.removeChild(this._audio.firstChild);
      }
      for(var i = 0; i < this._vf.url.length; i++) {
        var audioUrl = this._nameSpace.getURL(this._vf.url[i]);
        x3dom.debug.logInfo('Adding sound file: ' + audioUrl);
        var src = document.createElement('source');
        src.setAttribute('src', audioUrl);
        this._audio.appendChild(src);
      }
    }
  }
}));
x3dom.registerNodeType("X3DTextureTransformNode", "Texturing", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.X3DTextureTransformNode.superClass.call(this, ctx);
}));
x3dom.registerNodeType("TextureTransform", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureTransformNode, function(ctx) {
  x3dom.nodeTypes.TextureTransform.superClass.call(this, ctx);
  this.addField_SFVec2f(ctx, 'center', 0, 0);
  this.addField_SFFloat(ctx, 'rotation', 0);
  this.addField_SFVec2f(ctx, 'scale', 1, 1);
  this.addField_SFVec2f(ctx, 'translation', 0, 0);
  var negCenter = new x3dom.fields.SFVec3f(-this._vf.center.x, -this._vf.center.y, 1);
  var posCenter = new x3dom.fields.SFVec3f(this._vf.center.x, this._vf.center.y, 0);
  var trans3 = new x3dom.fields.SFVec3f(this._vf.translation.x, this._vf.translation.y, 0);
  var scale3 = new x3dom.fields.SFVec3f(this._vf.scale.x, this._vf.scale.y, 0);
  this._trafo = x3dom.fields.SFMatrix4f.translation(negCenter).mult(x3dom.fields.SFMatrix4f.scale(scale3)).mult(x3dom.fields.SFMatrix4f.rotationZ(this._vf.rotation)).mult(x3dom.fields.SFMatrix4f.translation(posCenter.add(trans3)));
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == 'center' || fieldName == 'rotation' || fieldName == 'scale' || fieldName == 'translation') {
      var negCenter = new x3dom.fields.SFVec3f(-this._vf.center.x, -this._vf.center.y, 1);
      var posCenter = new x3dom.fields.SFVec3f(this._vf.center.x, this._vf.center.y, 0);
      var trans3 = new x3dom.fields.SFVec3f(this._vf.translation.x, this._vf.translation.y, 0);
      var scale3 = new x3dom.fields.SFVec3f(this._vf.scale.x, this._vf.scale.y, 0);
      this._trafo = x3dom.fields.SFMatrix4f.translation(negCenter).mult(x3dom.fields.SFMatrix4f.scale(scale3)).mult(x3dom.fields.SFMatrix4f.rotationZ(this._vf.rotation)).mult(x3dom.fields.SFMatrix4f.translation(posCenter.add(trans3)));
    }
  },
  texTransformMatrix: function() {
    return this._trafo;
  }
}));
x3dom.registerNodeType("TextureProperties", "Texturing", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.TextureProperties.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'anisotropicDegree', 1.0);
  this.addField_SFColorRGBA(ctx, 'borderColor', 0, 0, 0, 0);
  this.addField_SFInt32(ctx, 'borderWidth', 0);
  this.addField_SFString(ctx, 'boundaryModeS', "REPEAT");
  this.addField_SFString(ctx, 'boundaryModeT', "REPEAT");
  this.addField_SFString(ctx, 'boundaryModeR', "REPEAT");
  this.addField_SFString(ctx, 'magnificationFilter', "FASTEST");
  this.addField_SFString(ctx, 'minificationFilter', "FASTEST");
  this.addField_SFString(ctx, 'textureCompression', "FASTEST");
  this.addField_SFFloat(ctx, 'texturePriority', 0);
  this.addField_SFBool(ctx, 'generateMipMaps', false);
}));
x3dom.registerNodeType("X3DTextureNode", "Texturing", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.X3DTextureNode.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'origChannelCount', 0);
  this.addField_MFString(ctx, 'url', []);
  this.addField_SFBool(ctx, 'repeatS', true);
  this.addField_SFBool(ctx, 'repeatT', true);
  this.addField_SFNode('textureProperties', x3dom.nodeTypes.TextureProperties);
  this.addField_SFBool(ctx, 'scale', true);
  this.addField_SFInt32(ctx, 'priority', 10);
  this._needPerFrameUpdate = false;
  this._isCanvas = false;
}, {
  invalidateGLObject: function() {
    Array.forEach(this._parentNodes, function(app) {
      Array.forEach(app._parentNodes, function(shape) {
        shape._dirty.texture = true;
      });
    });
    this._nameSpace.doc.needRender = true;
  },
  parentAdded: function(parent) {
    Array.forEach(parent._parentNodes, function(shape) {
      shape._dirty.texture = true;
    });
  },
  parentRemoved: function(parent) {
    parent._cf.texture.node = null;
    Array.forEach(parent._parentNodes, function(shape) {
      shape._dirty.texture = true;
    });
  },
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName == "url") {
      this._complete = false;
      Array.forEach(this._parentNodes, function(app) {
        app.nodeChanged();
        Array.forEach(app._parentNodes, function(shape) {
          shape._dirty.texture = true;
        });
      });
    }
  },
  getTexture: function(pos) {
    if(pos === 0) {
      return this;
    }
    return null;
  },
  size: function() {
    return 1;
  }
}));
x3dom.registerNodeType("MultiTexture", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.MultiTexture.superClass.call(this, ctx);
  this.addField_MFNode('texture', x3dom.nodeTypes.X3DTextureNode);
}, {
  getTexture: function(pos) {
    if(pos >= 0 && pos < this._cf.texture.nodes.length) {
      return this._cf.texture.nodes[pos];
    }
    return null;
  },
  size: function() {
    return this._cf.texture.nodes.length;
  }
}));
x3dom.registerNodeType("Texture", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.Texture.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'hideChildren', true);
  this._video = null;
  this._intervalID = 0;
  this._canvas = null;
}, {
  nodeChanged: function() {
    if(this._vf.url.length || !this._xmlNode) {
      return;
    }
    x3dom.debug.logInfo("No Texture URL given, searching for &lt;img&gt; elements...");
    var that = this;
    try {
      Array.forEach(this._xmlNode.childNodes, function(childDomNode) {
        if(childDomNode.nodeType === 1) {
          var url = childDomNode.getAttribute("src");
          if(url) {
            that._vf.url.push(url);
            x3dom.debug.logInfo(that._vf.url[that._vf.url.length - 1]);
            if(childDomNode.localName === "video") {
              that._needPerFrameUpdate = true;
              that._video = document.createElement('video');
              that._video.setAttribute('autobuffer', 'true');
              var p = document.getElementsByTagName('body')[0];
              p.appendChild(that._video);
              that._video.style.display = "none";
            }
          } else if(childDomNode.localName.toLowerCase() === "canvas") {
            that._needPerFrameUpdate = true;
            that._isCanvas = true;
            that._canvas = childDomNode;
          }
          if(that._vf.hideChildren) {
            childDomNode.style.display = "none";
            childDomNode.style.visibility = "hidden";
          }
          x3dom.debug.logInfo("### Found &lt;" + childDomNode.nodeName + "&gt; tag.");
        }
      });
    } catch(e) {}
  }
}));
x3dom.registerNodeType("RenderedTexture", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.RenderedTexture.superClass.call(this, ctx);
  ctx.doc._nodeBag.renderTextures.push(this);
  this.addField_SFNode('viewpoint', x3dom.nodeTypes.X3DViewpointNode);
  this.addField_SFNode('background', x3dom.nodeTypes.X3DBackgroundNode);
  this.addField_SFNode('fog', x3dom.nodeTypes.X3DFogNode);
  this.addField_SFNode('scene', x3dom.nodeTypes.X3DNode);
  this.addField_MFNode('excludeNodes', x3dom.nodeTypes.X3DNode);
  this.addField_MFInt32(ctx, 'dimensions', [128, 128, 4]);
  this.addField_SFString(ctx, 'update', 'NONE');
  x3dom.debug.assert(this._vf.dimensions.length >= 3);
  this._clearParents = true;
}, {
  nodeChanged: function() {
    this._clearParents = true;
  },
  fieldChanged: function(fieldName) {
    if(fieldName == "excludeNodes") {
      this._clearParents = true;
    }
  },
  getViewMatrix: function() {
    if(this._clearParents && this._cf.excludeNodes.nodes.length) {
      var that = this;
      Array.forEach(this._cf.excludeNodes.nodes, function(node) {
        for(var i = 0, n = node._parentNodes.length; i < n; i++) {
          if(node._parentNodes[i] === that) {
            node._parentNodes.splice(i, 1);
            node.parentRemoved(that);
          }
        }
      });
      this._clearParents = false;
    }
    var vbP = this._nameSpace.doc._scene.getViewpoint();
    var view = this._cf.viewpoint.node;
    if(view === null || view === vbP) {
      return this._nameSpace.doc._viewarea.getViewMatrix();
    } else {
      var mat_viewpoint = view.getCurrentTransform();
      return mat_viewpoint.mult(view.getViewMatrix());
    }
  },
  getProjectionMatrix: function() {
    var vbP = this._nameSpace.doc._scene.getViewpoint();
    var view = this._cf.viewpoint.node;
    if(view === null || view === vbP) {
      return this._nameSpace.doc._viewarea.getProjectionMatrix();
    } else {
      var w = this._vf.dimensions[0],
        h = this._vf.dimensions[1];
      return view.getProjectionMatrix(w / h);
    }
  },
  getWCtoCCMatrix: function() {
    var view = this.getViewMatrix();
    var proj = this.getProjectionMatrix();
    return proj.mult(view);
  },
  parentRemoved: function(parent) {
    if(this._parentNodes.length === 0) {
      var doc = this.findX3DDoc();
      for(var i = 0, n = doc._nodeBag.renderTextures.length; i < n; i++) {
        if(doc._nodeBag.renderTextures[i] === this) {
          doc._nodeBag.renderTextures.splice(i, 1);
        }
      }
    }
    if(this._cf.scene.node) {
      this._cf.scene.node.parentRemoved(this);
    }
  }
}));
x3dom.registerNodeType("PixelTexture", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.PixelTexture.superClass.call(this, ctx);
  this.addField_SFImage(ctx, 'image', 0, 0, 0);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName == "image") {
      this.invalidateGLObject();
    }
  }
}));
x3dom.registerNodeType("ImageTexture", "Texturing", defineClass(x3dom.nodeTypes.Texture, function(ctx) {
  x3dom.nodeTypes.ImageTexture.superClass.call(this, ctx);
}, {}));
x3dom.registerNodeType("MovieTexture", "Texturing", defineClass(x3dom.nodeTypes.Texture, function(ctx) {
  x3dom.nodeTypes.MovieTexture.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'loop', false);
  this.addField_SFFloat(ctx, 'speed', 1.0);
}, {}));
x3dom.registerNodeType("X3DEnvironmentTextureNode", "CubeMapTexturing", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.X3DEnvironmentTextureNode.superClass.call(this, ctx);
}, {
  getTexUrl: function() {
    return [];
  },
  getTexSize: function() {
    return -1;
  }
}));
x3dom.registerNodeType("ComposedCubeMapTexture", "CubeMapTexturing", defineClass(x3dom.nodeTypes.X3DEnvironmentTextureNode, function(ctx) {
  x3dom.nodeTypes.ComposedCubeMapTexture.superClass.call(this, ctx);
  this.addField_SFNode('back', x3dom.nodeTypes.Texture);
  this.addField_SFNode('front', x3dom.nodeTypes.Texture);
  this.addField_SFNode('bottom', x3dom.nodeTypes.Texture);
  this.addField_SFNode('top', x3dom.nodeTypes.Texture);
  this.addField_SFNode('left', x3dom.nodeTypes.Texture);
  this.addField_SFNode('right', x3dom.nodeTypes.Texture);
}, {
  getTexUrl: function() {
    return [this._nameSpace.getURL(this._cf.back.node._vf.url[0]), this._nameSpace.getURL(this._cf.front.node._vf.url[0]), this._nameSpace.getURL(this._cf.bottom.node._vf.url[0]), this._nameSpace.getURL(this._cf.top.node._vf.url[0]), this._nameSpace.getURL(this._cf.left.node._vf.url[0]), this._nameSpace.getURL(this._cf.right.node._vf.url[0])];
  }
}));
x3dom.registerNodeType("GeneratedCubeMapTexture", "CubeMapTexturing", defineClass(x3dom.nodeTypes.X3DEnvironmentTextureNode, function(ctx) {
  x3dom.nodeTypes.GeneratedCubeMapTexture.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'size', 128);
  this.addField_SFString(ctx, 'update', 'NONE');
  x3dom.debug.logWarning("GeneratedCubeMapTexture NYI");
}, {
  getTexSize: function() {
    return this._vf.size;
  }
}));
x3dom.registerNodeType("X3DTextureCoordinateNode", "Texturing", defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode, function(ctx) {
  x3dom.nodeTypes.X3DTextureCoordinateNode.superClass.call(this, ctx);
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "texCoord" || fieldName === "point" || fieldName === "parameter" || fieldName === "mode") {
      Array.forEach(this._parentNodes, function(node) {
        node.fieldChanged("texCoord");
      });
    }
  },
  parentAdded: function(parent) {
    if(parent._mesh && parent._cf.texCoord.node !== this) {
      parent.fieldChanged("texCoord");
    }
  }
}));
x3dom.registerNodeType("TextureCoordinate3D", "Texturing3D", defineClass(x3dom.nodeTypes.X3DTextureCoordinateNode, function(ctx) {
  x3dom.nodeTypes.TextureCoordinate3D.superClass.call(this, ctx);
  this.addField_MFVec3f(ctx, 'point', []);
}));
x3dom.registerNodeType("TextureCoordinate", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureCoordinateNode, function(ctx) {
  x3dom.nodeTypes.TextureCoordinate.superClass.call(this, ctx);
  this.addField_MFVec2f(ctx, 'point', []);
}));
x3dom.registerNodeType("TextureCoordinateGenerator", "Texturing", defineClass(x3dom.nodeTypes.X3DTextureCoordinateNode, function(ctx) {
  x3dom.nodeTypes.TextureCoordinateGenerator.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'mode', "SPHERE");
  this.addField_MFFloat(ctx, 'parameter', []);
}));
x3dom.registerNodeType("Uniform", "Shaders", defineClass(x3dom.nodeTypes.Field, function(ctx) {
  x3dom.nodeTypes.Uniform.superClass.call(this, ctx);
}));
x3dom.registerNodeType("SurfaceShaderTexture", "Shaders", defineClass(x3dom.nodeTypes.X3DTextureNode, function(ctx) {
  x3dom.nodeTypes.SurfaceShaderTexture.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'textureCoordinatesId', 0);
  this.addField_SFString(ctx, 'channelMask', "DEFAULT");
  this.addField_SFBool(ctx, 'isSRGB', false);
  this.addField_SFNode('texture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('textureTransform', x3dom.nodeTypes.X3DTextureTransformNode);
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {}
}));
x3dom.registerNodeType("X3DShaderNode", "Shaders", defineClass(x3dom.nodeTypes.X3DAppearanceChildNode, function(ctx) {
  x3dom.nodeTypes.X3DShaderNode.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'language', "");
}));
x3dom.registerNodeType("CommonSurfaceShader", "Shaders", defineClass(x3dom.nodeTypes.X3DShaderNode, function(ctx) {
  x3dom.nodeTypes.CommonSurfaceShader.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'tangentTextureCoordinatesId', -1);
  this.addField_SFInt32(ctx, 'binormalTextureCoordinatesId', -1);
  this.addField_SFVec3f(ctx, 'emissiveFactor', 0, 0, 0);
  this.addField_SFInt32(ctx, 'emissiveTextureId', -1);
  this.addField_SFInt32(ctx, 'emissiveTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'emissiveTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'ambientFactor', 0.2, 0.2, 0.2);
  this.addField_SFInt32(ctx, 'ambientTextureId', -1);
  this.addField_SFInt32(ctx, 'ambientTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'ambientTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'diffuseFactor', 0.8, 0.8, 0.8);
  this.addField_SFInt32(ctx, 'diffuseTextureId', -1);
  this.addField_SFInt32(ctx, 'diffuseTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'diffuseTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'specularFactor', 0, 0, 0);
  this.addField_SFInt32(ctx, 'specularTextureId', -1);
  this.addField_SFInt32(ctx, 'specularTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'specularTextureChannelMask', 'rgb');
  this.addField_SFFloat(ctx, 'shininessFactor', 0.2);
  this.addField_SFInt32(ctx, 'shininessTextureId', -1);
  this.addField_SFInt32(ctx, 'shininessTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'shininessTextureChannelMask', 'a');
  this.addField_SFString(ctx, 'normalFormat', 'UNORM');
  this.addField_SFString(ctx, 'normalSpace', 'TANGENT');
  this.addField_SFInt32(ctx, 'normalTextureId', -1);
  this.addField_SFInt32(ctx, 'normalTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'normalTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'reflectionFactor', 0, 0, 0);
  this.addField_SFInt32(ctx, 'reflectionTextureId', -1);
  this.addField_SFInt32(ctx, 'reflectionTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'reflectionTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'transmissionFactor', 0, 0, 0);
  this.addField_SFInt32(ctx, 'transmissionTextureId', -1);
  this.addField_SFInt32(ctx, 'transmissionTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'transmissionTextureChannelMask', 'rgb');
  this.addField_SFVec3f(ctx, 'environmentFactor', 1, 1, 1);
  this.addField_SFInt32(ctx, 'environmentTextureId', -1);
  this.addField_SFInt32(ctx, 'environmentTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'environmentTextureChannelMask', 'rgb');
  this.addField_SFFloat(ctx, 'relativeIndexOfRefraction', 1);
  this.addField_SFFloat(ctx, 'fresnelBlend', 0);
  this.addField_SFNode('emissiveTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('ambientTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('diffuseTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('specularTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('shininessTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('normalTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('reflectionTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('transmissionTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('environmentTexture', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFVec3f(ctx, 'normalScale', 2, 2, 2);
  this.addField_SFVec3f(ctx, 'normalBias', -1, -1, -1);
  this.addField_SFFloat(ctx, 'alphaFactor', 1);
  this.addField_SFBool(ctx, 'invertAlphaTexture', false);
  this.addField_SFInt32(ctx, 'alphaTextureId', -1);
  this.addField_SFInt32(ctx, 'alphaTextureCoordinatesId', 0);
  this.addField_SFString(ctx, 'alphaTextureChannelMask', 'a');
  this.addField_SFNode('alphaTexture', x3dom.nodeTypes.X3DTextureNode);
  this._dirty = {};
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {},
  getDiffuseMap: function() {
    if(this._cf.diffuseTexture.node) {
      return this._cf.diffuseTexture.node._cf.texture.node;
    } else {
      return null;
    }
  },
  getNormalMap: function() {
    if(this._cf.normalTexture.node) {
      return this._cf.normalTexture.node._cf.texture.node;
    } else {
      return null;
    }
  },
  getAmbientMap: function() {
    if(this._cf.ambientTexture.node) {
      return this._cf.ambientTexture.node._cf.texture.node;
    } else {
      return null;
    }
  },
  getSpecularMap: function() {
    if(this._cf.specularTexture.node) {
      return this._cf.specularTexture.node._cf.texture.node;
    } else {
      return null;
    }
  },
  getShininessMap: function() {
    if(this._cf.shininessTexture.node) {
      return this._cf.shininessTexture.node._cf.texture.node;
    } else {
      return null;
    }
  },
  getAlphaMap: function() {
    if(this._cf.alphaTexture.node) {
      return this._cf.alphaTexture.node._cf.texture.node;
    } else {
      return null;
    }
  }
}));
x3dom.registerNodeType("ComposedShader", "Shaders", defineClass(x3dom.nodeTypes.X3DShaderNode, function(ctx) {
  x3dom.nodeTypes.ComposedShader.superClass.call(this, ctx);
  this.addField_MFNode('fields', x3dom.nodeTypes.Field);
  this.addField_MFNode('parts', x3dom.nodeTypes.ShaderPart);
  this._vertex = null;
  this._fragment = null;
  x3dom.debug.logInfo("Current ComposedShader node implementation limitations:\n" + "Vertex attributes (if given in the standard X3D fields 'coord', 'color', " + "'normal', 'texCoord'), matrices and texture are provided as follows...\n" + "    attribute vec3 position;\n" + "    attribute vec3 normal;\n" + "    attribute vec2 texcoord;\n" + "    attribute vec3 color;\n" + "    uniform mat4 modelViewProjectionMatrix;\n" + "    uniform mat4 modelViewMatrix;\n" + "    uniform mat4 normalMatrix;\n" + "    uniform mat4 viewMatrix;\n" + "    uniform sampler2D tex;\n");
}, {
  nodeChanged: function() {
    var i, n = this._cf.parts.nodes.length;
    for(i = 0; i < n; i++) {
      if(this._cf.parts.nodes[i]._vf.type.toLowerCase() == 'vertex') {
        this._vertex = this._cf.parts.nodes[i];
      } else if(this._cf.parts.nodes[i]._vf.type.toLowerCase() == 'fragment') {
        this._fragment = this._cf.parts.nodes[i];
      }
    }
    var ctx = {};
    n = this._cf.fields.nodes.length;
    for(i = 0; i < n; i++) {
      var fieldName = this._cf.fields.nodes[i]._vf.name;
      ctx.xmlNode = this._cf.fields.nodes[i]._xmlNode;
      if(ctx.xmlNode !== undefined && ctx.xmlNode !== null) {
        ctx.xmlNode.setAttribute(fieldName, this._cf.fields.nodes[i]._vf.value);
        var funcName = "this.addField_" + this._cf.fields.nodes[i]._vf.type + "(ctx, name);";
        var func = new Function('ctx', 'name', funcName);
        func.call(this, ctx, fieldName);
      } else {
        var funcName = "this.addField_" + this._cf.fields.nodes[i]._vf.type + "(ctx, name, n);";
        var func = new Function('ctx', 'name', 'n', funcName);
        func.call(this, null, fieldName, this._cf.fields.nodes[i]._vf.value);
      }
    }
    Array.forEach(this._parentNodes, function(app) {
      Array.forEach(app._parentNodes, function(shape) {
        shape._dirty.shader = true;
      });
    });
  },
  fieldChanged: function(fieldName) {
    var i, n = this._cf.fields.nodes.length;
    for(i = 0; i < n; i++) {
      var field = this._cf.fields.nodes[i]._vf.name;
      if(field === fieldName) {
        var msg = this._cf.fields.nodes[i]._vf.value;
        try {
          this._vf[field].setValueByStr(msg);
        } catch(exc1) {
          try {
            switch((typeof(this._vf[field])).toString()) {
            case "number":
              this._vf[field] = +msg;
              break;
            case "boolean":
              this._vf[field] = (msg.toLowerCase() === "true");
              break;
            case "string":
              this._vf[field] = msg;
              break;
            }
          } catch(exc2) {
            x3dom.debug.logError("setValueByStr() NYI for " + typeof(this._vf[field]));
          }
        }
        break;
      }
    }
    if(field === 'url') {
      Array.forEach(this._parentNodes, function(app) {
        Array.forEach(app._parentNodes, function(shape) {
          shape._dirty.shader = true;
        });
      });
    }
  },
  parentAdded: function() {
    Array.forEach(this._parentNodes, function(app) {
      app.nodeChanged();
    });
  }
}));
x3dom.registerNodeType("ShaderPart", "Shaders", defineClass(x3dom.nodeTypes.X3DNode, function(ctx) {
  x3dom.nodeTypes.ShaderPart.superClass.call(this, ctx);
  this.addField_MFString(ctx, 'url', []);
  this.addField_SFString(ctx, 'type', "VERTEX");
  x3dom.debug.assert(this._vf.type.toLowerCase() == 'vertex' || this._vf.type.toLowerCase() == 'fragment');
}, {
  nodeChanged: function() {
    var ctx = {};
    ctx.xmlNode = this._xmlNode;
    if(ctx.xmlNode !== undefined && ctx.xmlNode !== null) {
      var that = this;
      if(that._vf.url.length) {
        that._vf.url = new x3dom.fields.MFString([]);
      }
      try {
        that._vf.url.push(ctx.xmlNode.childNodes[1].nodeValue);
        ctx.xmlNode.removeChild(ctx.xmlNode.childNodes[1]);
      } catch(e) {
        Array.forEach(ctx.xmlNode.childNodes, function(childDomNode) {
          if(childDomNode.nodeType === 3) {
            that._vf.url.push(childDomNode.nodeValue);
          } else if(childDomNode.nodeType === 4) {
            that._vf.url.push(childDomNode.data);
          }
          childDomNode.parentNode.removeChild(childDomNode);
        });
      }
    }
  },
  fieldChanged: function(fieldName) {
    if(fieldName === "url") {
      Array.forEach(this._parentNodes, function(shader) {
        shader.fieldChanged("url");
      });
    }
  },
  parentAdded: function() {
    Array.forEach(this._parentNodes, function(shader) {
      shader.nodeChanged();
    });
  }
}));
x3dom.registerNodeType("X3DVertexAttributeNode", "Shaders", defineClass(x3dom.nodeTypes.X3DGeometricPropertyNode, function(ctx) {
  x3dom.nodeTypes.X3DVertexAttributeNode.superClass.call(this, ctx);
  this.addField_SFString(ctx, 'name', "");
}));
x3dom.registerNodeType("FloatVertexAttribute", "Shaders", defineClass(x3dom.nodeTypes.X3DVertexAttributeNode, function(ctx) {
  x3dom.nodeTypes.FloatVertexAttribute.superClass.call(this, ctx);
  this.addField_SFInt32(ctx, 'numComponents', 4);
  this.addField_MFFloat(ctx, 'value', []);
}, {
  fieldChanged: function(fieldName) {}
}));
x3dom.registerNodeType("Plane", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Plane.superClass.call(this, ctx);
  this.addField_SFVec2f(ctx, 'size', 2, 2);
  this.addField_SFVec2f(ctx, 'subdivision', 1, 1);
  var sx = this._vf.size.x,
    sy = this._vf.size.y;
  var subx = this._vf.subdivision.x,
    suby = this._vf.subdivision.y;
  var geoCacheID = 'Plane_' + sx + '-' + sy + '-' + subx + '-' + suby;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Plane from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    var x = 0,
      y = 0;
    var xstep = sx / subx;
    var ystep = sy / suby;
    sx /= 2;
    sy /= 2;
    for(y = 0; y <= suby; y++) {
      for(x = 0; x <= subx; x++) {
        this._mesh._positions[0].push(x * xstep - sx);
        this._mesh._positions[0].push(y * ystep - sy);
        this._mesh._positions[0].push(0);
        this._mesh._normals[0].push(0);
        this._mesh._normals[0].push(0);
        this._mesh._normals[0].push(1);
        this._mesh._texCoords[0].push(x / subx);
        this._mesh._texCoords[0].push(y / suby);
      }
    }
    for(y = 1; y <= suby; y++) {
      for(x = 0; x < subx; x++) {
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x);
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
        this._mesh._indices[0].push(y * (subx + 1) + x);
        this._mesh._indices[0].push(y * (subx + 1) + x);
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
        this._mesh._indices[0].push(y * (subx + 1) + x + 1);
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  nodeChanged: function() {},
  fieldChanged: function(fieldName) {
    if(fieldName === "size") {
      this._mesh._positions[0] = [];
      var sx = this._vf.size.x,
        sy = this._vf.size.y;
      var subx = this._vf.subdivision.x,
        suby = this._vf.subdivision.y;
      var x = 0,
        y = 0;
      var xstep = sx / subx;
      var ystep = sy / suby;
      sx /= 2;
      sy /= 2;
      for(y = 0; y <= suby; y++) {
        for(x = 0; x <= subx; x++) {
          this._mesh._positions[0].push(x * xstep - sx);
          this._mesh._positions[0].push(y * ystep - sy);
          this._mesh._positions[0].push(0);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName === "subdivision") {
      this._mesh._positions[0] = [];
      this._mesh._indices[0] = [];
      this._mesh._normals[0] = [];
      this._mesh._texCoords[0] = [];
      var sx = this._vf.size.x,
        sy = this._vf.size.y;
      var subx = this._vf.subdivision.x,
        suby = this._vf.subdivision.y;
      var x = 0,
        y = 0;
      var xstep = sx / subx;
      var ystep = sy / suby;
      sx /= 2;
      sy /= 2;
      for(y = 0; y <= suby; y++) {
        for(x = 0; x <= subx; x++) {
          this._mesh._positions[0].push(x * xstep - sx);
          this._mesh._positions[0].push(y * ystep - sy);
          this._mesh._positions[0].push(0);
          this._mesh._normals[0].push(0);
          this._mesh._normals[0].push(0);
          this._mesh._normals[0].push(1);
          this._mesh._texCoords[0].push(x / subx);
          this._mesh._texCoords[0].push(y / suby);
        }
      }
      for(y = 1; y <= suby; y++) {
        for(x = 0; x < subx; x++) {
          this._mesh._indices[0].push((y - 1) * (subx + 1) + x);
          this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
          this._mesh._indices[0].push(y * (subx + 1) + x);
          this._mesh._indices[0].push(y * (subx + 1) + x);
          this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
          this._mesh._indices[0].push(y * (subx + 1) + x + 1);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node.setAllDirty();
      });
    }
  }
}));
x3dom.registerNodeType("ElevationGrid", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.ElevationGrid.superClass.call(this, ctx);
  this.addField_SFBool(ctx, 'colorPerVertex', true);
  this.addField_SFBool(ctx, 'normalPerVertex', true);
  this.addField_SFFloat(ctx, 'creaseAngle', 0);
  this.addField_MFNode('attrib', x3dom.nodeTypes.X3DVertexAttributeNode);
  this.addField_SFNode('normal', x3dom.nodeTypes.Normal);
  this.addField_SFNode('color', x3dom.nodeTypes.X3DColorNode);
  this.addField_SFNode('texCoord', x3dom.nodeTypes.X3DTextureCoordinateNode);
  this.addField_MFFloat(ctx, 'height', []);
  this.addField_SFInt32(ctx, 'xDimension', 0);
  this.addField_SFFloat(ctx, 'xSpacing', 1.0);
  this.addField_SFInt32(ctx, 'zDimension', 0);
  this.addField_SFFloat(ctx, 'zSpacing', 1.0);
}, {
  nodeChanged: function() {
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = [];
    this._mesh._normals[0] = [];
    this._mesh._texCoords[0] = [];
    this._mesh._colors[0] = [];
    var x = 0,
      y = 0;
    var subx = this._vf.xDimension - 1;
    var suby = this._vf.zDimension - 1;
    var h = this._vf.height;
    x3dom.debug.assert((h.length === this._vf.xDimension * this._vf.zDimension));
    var normals = null,
      texCoords = null,
      colors = null;
    if(this._cf.normal.node) {
      normals = this._cf.normal.node._vf.vector;
    }
    var numTexComponents = 2;
    if(this._cf.texCoord.node) {
      if(this._cf.texCoord.node._vf.point) {
        texCoords = this._cf.texCoord.node._vf.point;
        if(x3dom.isa(this._cf.texCoord.node, x3dom.nodeTypes.TextureCoordinate3D)) {
          numTexComponents = 3;
        }
      }
    }
    var numColComponents = 3;
    if(this._cf.color.node) {
      colors = this._cf.color.node._vf.color;
      if(x3dom.isa(this._cf.color.node, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    }
    var c = 0;
    for(y = 0; y <= suby; y++) {
      for(x = 0; x <= subx; x++) {
        this._mesh._positions[0].push(x * this._vf.xSpacing);
        this._mesh._positions[0].push(h[c]);
        this._mesh._positions[0].push(y * this._vf.zSpacing);
        if(normals) {
          this._mesh._normals[0].push(normals[c].x);
          this._mesh._normals[0].push(normals[c].y);
          this._mesh._normals[0].push(normals[c].z);
        } else {}
        if(texCoords) {
          this._mesh._texCoords[0].push(texCoords[c].x);
          this._mesh._texCoords[0].push(texCoords[c].y);
          if(numTexComponents === 3) {
            this._mesh._texCoords[0].push(texCoords[c].z);
          }
        } else {
          this._mesh._texCoords[0].push(x / subx);
          this._mesh._texCoords[0].push(y / suby);
        }
        if(colors) {
          this._mesh._colors[0].push(colors[c].r);
          this._mesh._colors[0].push(colors[c].g);
          this._mesh._colors[0].push(colors[c].b);
          if(numColComponents === 4) {
            this._mesh._colors[0].push(colors[c].a);
          }
        }
        c++;
      }
    }
    for(y = 1; y <= suby; y++) {
      for(x = 0; x < subx; x++) {
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x);
        this._mesh._indices[0].push(y * (subx + 1) + x);
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
        this._mesh._indices[0].push(y * (subx + 1) + x);
        this._mesh._indices[0].push(y * (subx + 1) + x + 1);
        this._mesh._indices[0].push((y - 1) * (subx + 1) + x + 1);
      }
    }
    this._mesh.calcNormals(Math.PI);
    this._mesh._invalidate = true;
    this._mesh._numTexComponents = numTexComponents;
    this._mesh._numColComponents = numColComponents;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
  },
  fieldChanged: function(fieldName) {
    if(fieldName == "height") {
      var i, n = this._mesh._positions[0].length / 3;
      var h = this._vf.height;
      for(i = 0; i < n; i++) {
        this._mesh._positions[0][3 * i + 1] = h[i];
      }
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    }
  }
}));
x3dom.registerNodeType("Box", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Box.superClass.call(this, ctx);
  this.addField_SFVec3f(ctx, 'size', 2, 2, 2);
  var sx = this._vf.size.x,
    sy = this._vf.size.y,
    sz = this._vf.size.z;
  var geoCacheID = 'Box_' + sx + '-' + sy + '-' + sz;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Box from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    sx /= 2;
    sy /= 2;
    sz /= 2;
    this._mesh._positions[0] = [-sx, -sy, -sz, -sx, sy, -sz, sx, sy, -sz, sx, -sy, -sz, -sx, -sy, sz, -sx, sy, sz, sx, sy, sz, sx, -sy, sz, -sx, -sy, -sz, -sx, -sy, sz, -sx, sy, sz, -sx, sy, -sz, sx, -sy, -sz, sx, -sy, sz, sx, sy, sz, sx, sy, -sz, -sx, sy, -sz, -sx, sy, sz, sx, sy, sz, sx, sy, -sz, -sx, -sy, -sz, -sx, -sy, sz, sx, -sy, sz, sx, -sy, -sz];
    this._mesh._normals[0] = [0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0];
    this._mesh._texCoords[0] = [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0];
    this._mesh._indices[0] = [0, 1, 2, 2, 3, 0, 4, 7, 5, 5, 7, 6, 8, 9, 10, 10, 11, 8, 12, 14, 13, 14, 12, 15, 16, 17, 18, 18, 19, 16, 20, 22, 21, 22, 20, 23];
    this._mesh._invalidate = true;
    this._mesh._numFaces = 12;
    this._mesh._numCoords = 24;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "size") {
      var sx = this._vf.size.x / 2,
        sy = this._vf.size.y / 2,
        sz = this._vf.size.z / 2;
      this._mesh._positions[0] = [-sx, -sy, -sz, -sx, sy, -sz, sx, sy, -sz, sx, -sy, -sz, -sx, -sy, sz, -sx, sy, sz, sx, sy, sz, sx, -sy, sz, -sx, -sy, -sz, -sx, -sy, sz, -sx, sy, sz, -sx, sy, -sz, sx, -sy, -sz, sx, -sy, sz, sx, sy, sz, sx, sy, -sz, -sx, sy, -sz, -sx, sy, sz, sx, sy, sz, sx, sy, -sz, -sx, -sy, -sz, -sx, -sy, sz, sx, -sy, sz, sx, -sy, -sz];
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    }
  }
}));
x3dom.registerNodeType("Sphere", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Sphere.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'radius', ctx ? 1 : 10000);
  this.addField_SFVec2f(ctx, 'subdivision', 24, 24);
  var qfactor = 1.0;
  var r = this._vf.radius;
  var subx = this._vf.subdivision.x,
    suby = this._vf.subdivision.y;
  var geoCacheID = 'Sphere_' + r;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Sphere from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    if(ctx) {
      qfactor = ctx.doc.properties.getProperty("PrimitiveQuality", "Medium");
    }
    if(!x3dom.isNumber(qfactor)) {
      switch(qfactor.toLowerCase()) {
      case "low":
        qfactor = 0.3;
        break;
      case "medium":
        qfactor = 0.5;
        break;
      case "high":
        qfactor = 1.0;
        break;
      }
    } else {
      qfactor = parseFloat(qfactor);
    }
    this._quality = qfactor;
    var latNumber, longNumber;
    var latitudeBands = Math.floor(subx * qfactor);
    var longitudeBands = Math.floor(suby * qfactor);
    var theta, sinTheta, cosTheta;
    var phi, sinPhi, cosPhi;
    var x, y, z, u, v;
    for(latNumber = 0; latNumber <= latitudeBands; latNumber++) {
      theta = (latNumber * Math.PI) / latitudeBands;
      sinTheta = Math.sin(theta);
      cosTheta = Math.cos(theta);
      for(longNumber = 0; longNumber <= longitudeBands; longNumber++) {
        phi = (longNumber * 2.0 * Math.PI) / longitudeBands;
        sinPhi = Math.sin(phi);
        cosPhi = Math.cos(phi);
        x = -cosPhi * sinTheta;
        y = -cosTheta;
        z = -sinPhi * sinTheta;
        u = 0.25 - ((1.0 * longNumber) / longitudeBands);
        v = latNumber / latitudeBands;
        this._mesh._positions[0].push(r * x);
        this._mesh._positions[0].push(r * y);
        this._mesh._positions[0].push(r * z);
        this._mesh._normals[0].push(x);
        this._mesh._normals[0].push(y);
        this._mesh._normals[0].push(z);
        this._mesh._texCoords[0].push(u);
        this._mesh._texCoords[0].push(v);
      }
    }
    var first, second;
    for(latNumber = 0; latNumber < latitudeBands; latNumber++) {
      for(longNumber = 0; longNumber < longitudeBands; longNumber++) {
        first = (latNumber * (longitudeBands + 1)) + longNumber;
        second = first + longitudeBands + 1;
        this._mesh._indices[0].push(first);
        this._mesh._indices[0].push(second);
        this._mesh._indices[0].push(first + 1);
        this._mesh._indices[0].push(second);
        this._mesh._indices[0].push(second + 1);
        this._mesh._indices[0].push(first + 1);
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "radius") {
      this._mesh._positions[0] = [];
      this._mesh._normals[0] = [];
      var r = this._vf.radius;
      var subx = this._vf.subdivision.x,
        suby = this._vf.subdivision.y;
      var qfactor = this._quality;
      var latNumber, longNumber;
      var latitudeBands = Math.floor(subx * qfactor);
      var longitudeBands = Math.floor(suby * qfactor);
      var theta, sinTheta, cosTheta;
      var phi, sinPhi, cosPhi;
      var x, y, z;
      for(latNumber = 0; latNumber <= latitudeBands; latNumber++) {
        theta = (latNumber * Math.PI) / latitudeBands;
        sinTheta = Math.sin(theta);
        cosTheta = Math.cos(theta);
        for(longNumber = 0; longNumber <= longitudeBands; longNumber++) {
          phi = (longNumber * 2.0 * Math.PI) / longitudeBands;
          sinPhi = Math.sin(phi);
          cosPhi = Math.cos(phi);
          x = -cosPhi * sinTheta;
          y = -cosTheta;
          z = -sinPhi * sinTheta;
          this._mesh._positions[0].push(r * x);
          this._mesh._positions[0].push(r * y);
          this._mesh._positions[0].push(r * z);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName === "subdivision") {
      this._mesh._positions[0] = [];
      this._mesh._indices[0] = [];
      this._mesh._normals[0] = [];
      this._mesh._texCoords[0] = [];
      var r = this._vf.radius;
      var subx = this._vf.subdivision.x,
        suby = this._vf.subdivision.y;
      var qfactor = this._quality;
      var latNumber, longNumber;
      var latitudeBands = Math.floor(subx * qfactor);
      var longitudeBands = Math.floor(suby * qfactor);
      var theta, sinTheta, cosTheta;
      var phi, sinPhi, cosPhi;
      var x, y, z, u, v;
      for(latNumber = 0; latNumber <= latitudeBands; latNumber++) {
        theta = (latNumber * Math.PI) / latitudeBands;
        sinTheta = Math.sin(theta);
        cosTheta = Math.cos(theta);
        for(longNumber = 0; longNumber <= longitudeBands; longNumber++) {
          phi = (longNumber * 2.0 * Math.PI) / longitudeBands;
          sinPhi = Math.sin(phi);
          cosPhi = Math.cos(phi);
          x = -cosPhi * sinTheta;
          y = -cosTheta;
          z = -sinPhi * sinTheta;
          u = 0.25 - ((1.0 * longNumber) / longitudeBands);
          v = latNumber / latitudeBands;
          this._mesh._positions[0].push(r * x);
          this._mesh._positions[0].push(r * y);
          this._mesh._positions[0].push(r * z);
          this._mesh._normals[0].push(x);
          this._mesh._normals[0].push(y);
          this._mesh._normals[0].push(z);
          this._mesh._texCoords[0].push(u);
          this._mesh._texCoords[0].push(v);
        }
      }
      var first, second;
      for(latNumber = 0; latNumber < latitudeBands; latNumber++) {
        for(longNumber = 0; longNumber < longitudeBands; longNumber++) {
          first = (latNumber * (longitudeBands + 1)) + longNumber;
          second = first + longitudeBands + 1;
          this._mesh._indices[0].push(first);
          this._mesh._indices[0].push(second);
          this._mesh._indices[0].push(first + 1);
          this._mesh._indices[0].push(second);
          this._mesh._indices[0].push(second + 1);
          this._mesh._indices[0].push(first + 1);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node.setAllDirty();
      });
    }
  }
}));
x3dom.registerNodeType("Torus", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Torus.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'innerRadius', 0.5);
  this.addField_SFFloat(ctx, 'outerRadius', 1.0);
  this.addField_SFVec2f(ctx, 'subdivision', 24, 24);
  var innerRadius = this._vf.innerRadius;
  var outerRadius = this._vf.outerRadius;
  var rings = this._vf.subdivision.x,
    sides = this._vf.subdivision.y;
  var geoCacheID = 'Torus_' + innerRadius + '_' + outerRadius;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Torus from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    var ringDelta = 2.0 * Math.PI / rings;
    var sideDelta = 2.0 * Math.PI / sides;
    var p = [],
      n = [],
      t = [],
      i = [];
    var a, b, theta, phi;
    for(a = 0, theta = 0; a <= rings; a++, theta += ringDelta) {
      var cosTheta = Math.cos(theta);
      var sinTheta = Math.sin(theta);
      for(b = 0, phi = 0; b <= sides; b++, phi += sideDelta) {
        var cosPhi = Math.cos(phi);
        var sinPhi = Math.sin(phi);
        var dist = outerRadius + innerRadius * cosPhi;
        this._mesh._normals[0].push(cosTheta * cosPhi, -sinTheta * cosPhi, sinPhi);
        this._mesh._positions[0].push(cosTheta * dist, -sinTheta * dist, innerRadius * sinPhi);
        this._mesh._texCoords[0].push(-a / rings, b / sides);
      }
    }
    for(a = 0; a < sides; a++) {
      for(b = 0; b < rings; b++) {
        this._mesh._indices[0].push(b * (sides + 1) + a);
        this._mesh._indices[0].push(b * (sides + 1) + a + 1);
        this._mesh._indices[0].push((b + 1) * (sides + 1) + a);
        this._mesh._indices[0].push(b * (sides + 1) + a + 1);
        this._mesh._indices[0].push((b + 1) * (sides + 1) + a + 1);
        this._mesh._indices[0].push((b + 1) * (sides + 1) + a);
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "innerRadius" || fieldName === "outerRadius") {
      this._mesh._positions[0] = [];
      var innerRadius = this._vf.innerRadius;
      var outerRadius = this._vf.outerRadius;
      var rings = this._vf.subdivision.x,
        sides = this._vf.subdivision.y;
      var ringDelta = 2.0 * Math.PI / rings;
      var sideDelta = 2.0 * Math.PI / sides;
      var a, b, theta, phi;
      for(a = 0, theta = 0; a <= rings; a++, theta += ringDelta) {
        var cosTheta = Math.cos(theta);
        var sinTheta = Math.sin(theta);
        for(b = 0, phi = 0; b <= sides; b++, phi += sideDelta) {
          var cosPhi = Math.cos(phi);
          var sinPhi = Math.sin(phi);
          var dist = outerRadius + innerRadius * cosPhi;
          this._mesh._positions[0].push(cosTheta * dist, -sinTheta * dist, innerRadius * sinPhi);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName === "subdivision") {
      this._mesh._positions[0] = [];
      this._mesh._indices[0] = [];
      this._mesh._normals[0] = [];
      this._mesh._texCoords[0] = [];
      var innerRadius = this._vf.innerRadius;
      var outerRadius = this._vf.outerRadius;
      var rings = this._vf.subdivision.x,
        sides = this._vf.subdivision.y;
      var ringDelta = 2.0 * Math.PI / rings;
      var sideDelta = 2.0 * Math.PI / sides;
      var a, b, theta, phi;
      for(a = 0, theta = 0; a <= rings; a++, theta += ringDelta) {
        var cosTheta = Math.cos(theta);
        var sinTheta = Math.sin(theta);
        for(b = 0, phi = 0; b <= sides; b++, phi += sideDelta) {
          var cosPhi = Math.cos(phi);
          var sinPhi = Math.sin(phi);
          var dist = outerRadius + innerRadius * cosPhi;
          this._mesh._normals[0].push(cosTheta * cosPhi, -sinTheta * cosPhi, sinPhi);
          this._mesh._positions[0].push(cosTheta * dist, -sinTheta * dist, innerRadius * sinPhi);
          this._mesh._texCoords[0].push(-a / rings, b / sides);
        }
      }
      for(a = 0; a < sides; a++) {
        for(b = 0; b < rings; b++) {
          this._mesh._indices[0].push(b * (sides + 1) + a);
          this._mesh._indices[0].push(b * (sides + 1) + a + 1);
          this._mesh._indices[0].push((b + 1) * (sides + 1) + a);
          this._mesh._indices[0].push(b * (sides + 1) + a + 1);
          this._mesh._indices[0].push((b + 1) * (sides + 1) + a + 1);
          this._mesh._indices[0].push((b + 1) * (sides + 1) + a);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node.setAllDirty();
      });
    }
  }
}));
x3dom.registerNodeType("Cone", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Cone.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'bottomRadius', 1.0);
  this.addField_SFFloat(ctx, 'height', 2.0);
  this.addField_SFBool(ctx, 'bottom', true);
  this.addField_SFFloat(ctx, 'subdivision', 32);
  this.addField_SFBool(ctx, 'side', true);
  var sides = this._vf.subdivision;
  var geoCacheID = 'Cone_' + this._vf.bottomRadius + '_' + this._vf.height + '_' + this._vf.bottom + '_' + this._vf.side;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Cone from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    var bottomRadius = this._vf.bottomRadius,
      height = this._vf.height;
    var beta, x, z;
    var delta = 2.0 * Math.PI / sides;
    var incl = bottomRadius / height;
    var nlen = 1.0 / Math.sqrt(1.0 + incl * incl);
    var j = 0;
    var k = 0;
    if(this._vf.side) {
      for(j = 0, k = 0; j <= sides; j++) {
        beta = j * delta;
        x = Math.sin(beta);
        z = -Math.cos(beta);
        this._mesh._positions[0].push(0, height / 2, 0);
        this._mesh._normals[0].push(x / nlen, incl / nlen, z / nlen);
        this._mesh._texCoords[0].push(1.0 - j / sides, 1);
        this._mesh._positions[0].push(x * bottomRadius, -height / 2, z * bottomRadius);
        this._mesh._normals[0].push(x / nlen, incl / nlen, z / nlen);
        this._mesh._texCoords[0].push(1.0 - j / sides, 0);
        if(j > 0) {
          this._mesh._indices[0].push(k + 0);
          this._mesh._indices[0].push(k + 2);
          this._mesh._indices[0].push(k + 1);
          this._mesh._indices[0].push(k + 1);
          this._mesh._indices[0].push(k + 2);
          this._mesh._indices[0].push(k + 3);
          k += 2;
        }
      }
    }
    if(this._vf.bottom && bottomRadius > 0) {
      var base = this._mesh._positions[0].length / 3;
      for(j = sides - 1; j >= 0; j--) {
        beta = j * delta;
        x = bottomRadius * Math.sin(beta);
        z = -bottomRadius * Math.cos(beta);
        this._mesh._positions[0].push(x, -height / 2, z);
        this._mesh._normals[0].push(0, -1, 0);
        this._mesh._texCoords[0].push(x / bottomRadius / 2 + 0.5, z / bottomRadius / 2 + 0.5);
      }
      var h = base + 1;
      for(j = 2; j < sides; j++) {
        this._mesh._indices[0].push(h);
        this._mesh._indices[0].push(base);
        h = base + j;
        this._mesh._indices[0].push(h);
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "bottomRadius" || fieldName === "height") {
      this._mesh._positions[0] = [];
      var bottomRadius = this._vf.bottomRadius,
        height = this._vf.height;
      var sides = this._vf.subdivision;
      var beta, x, z;
      var delta = 2.0 * Math.PI / sides;
      var incl = bottomRadius / height;
      var nlen = 1.0 / Math.sqrt(1.0 + incl * incl);
      if(this._vf.side) {
        for(var j = 0; j <= sides; j++) {
          beta = j * delta;
          x = Math.sin(beta);
          z = -Math.cos(beta);
          this._mesh._positions[0].push(0, height / 2, 0);
          this._mesh._positions[0].push(x * bottomRadius, -height / 2, z * bottomRadius);
        }
      }
      if(this._vf.bottom && bottomRadius > 0) {
        var base = this._mesh._positions[0].length / 3;
        for(var j = sides - 1; j >= 0; j--) {
          beta = j * delta;
          x = bottomRadius * Math.sin(beta);
          z = -bottomRadius * Math.cos(beta);
          this._mesh._positions[0].push(x, -height / 2, z);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName === "subdivision" || fieldName === "bottom") {
      this._mesh._positions[0] = [];
      this._mesh._indices[0] = [];
      this._mesh._normals[0] = [];
      this._mesh._texCoords[0] = [];
      var bottomRadius = this._vf.bottomRadius,
        height = this._vf.height;
      var sides = this._vf.subdivision;
      var beta, x, z;
      var delta = 2.0 * Math.PI / sides;
      var incl = bottomRadius / height;
      var nlen = 1.0 / Math.sqrt(1.0 + incl * incl);
      var j = 0;
      var k = 0;
      if(this._vf.side) {
        for(j = 0, k = 0; j <= sides; j++) {
          beta = j * delta;
          x = Math.sin(beta);
          z = -Math.cos(beta);
          this._mesh._positions[0].push(0, height / 2, 0);
          this._mesh._normals[0].push(x / nlen, incl / nlen, z / nlen);
          this._mesh._texCoords[0].push(1.0 - j / sides, 1);
          this._mesh._positions[0].push(x * bottomRadius, -height / 2, z * bottomRadius);
          this._mesh._normals[0].push(x / nlen, incl / nlen, z / nlen);
          this._mesh._texCoords[0].push(1.0 - j / sides, 0);
          if(j > 0) {
            this._mesh._indices[0].push(k + 0);
            this._mesh._indices[0].push(k + 2);
            this._mesh._indices[0].push(k + 1);
            this._mesh._indices[0].push(k + 1);
            this._mesh._indices[0].push(k + 2);
            this._mesh._indices[0].push(k + 3);
            k += 2;
          }
        }
      }
      if(this._vf.bottom && bottomRadius > 0) {
        var base = this._mesh._positions[0].length / 3;
        for(j = sides - 1; j >= 0; j--) {
          beta = j * delta;
          x = bottomRadius * Math.sin(beta);
          z = -bottomRadius * Math.cos(beta);
          this._mesh._positions[0].push(x, -height / 2, z);
          this._mesh._normals[0].push(0, -1, 0);
          this._mesh._texCoords[0].push(x / bottomRadius / 2 + 0.5, z / bottomRadius / 2 + 0.5);
        }
        var h = base + 1;
        for(j = 2; j < sides; j++) {
          this._mesh._indices[0].push(h);
          this._mesh._indices[0].push(base);
          h = base + j;
          this._mesh._indices[0].push(h);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node.setAllDirty();
      });
    }
  }
}));
x3dom.registerNodeType("Cylinder", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.Cylinder.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'radius', 1.0);
  this.addField_SFFloat(ctx, 'height', 2.0);
  this.addField_SFBool(ctx, 'bottom', true);
  this.addField_SFBool(ctx, 'top', true);
  this.addField_SFFloat(ctx, 'subdivision', 32);
  this.addField_SFBool(ctx, 'side', true);
  var sides = this._vf.subdivision;
  var geoCacheID = 'Cylinder_' + this._vf.radius + '_' + this._vf.height + '_' + this._vf.bottom + '_' + this._vf.top + '_' + this._vf.side;
  if(x3dom.geoCache[geoCacheID] != undefined) {
    x3dom.debug.logInfo("Using Cylinder from Cache");
    this._mesh = x3dom.geoCache[geoCacheID];
  } else {
    var radius = this._vf.radius;
    var height = this._vf.height;
    var beta, x, z;
    var delta = 2.0 * Math.PI / sides;
    var j = 0;
    var k = 0;
    if(this._vf.side) {
      for(j = 0, k = 0; j <= sides; j++) {
        beta = j * delta;
        x = Math.sin(beta);
        z = -Math.cos(beta);
        this._mesh._positions[0].push(x * radius, -height / 2, z * radius);
        this._mesh._normals[0].push(x, 0, z);
        this._mesh._texCoords[0].push(1.0 - j / sides, 0);
        this._mesh._positions[0].push(x * radius, height / 2, z * radius);
        this._mesh._normals[0].push(x, 0, z);
        this._mesh._texCoords[0].push(1.0 - j / sides, 1);
        if(j > 0) {
          this._mesh._indices[0].push(k + 0);
          this._mesh._indices[0].push(k + 1);
          this._mesh._indices[0].push(k + 2);
          this._mesh._indices[0].push(k + 2);
          this._mesh._indices[0].push(k + 1);
          this._mesh._indices[0].push(k + 3);
          k += 2;
        }
      }
    }
    if(radius > 0) {
      var h, base = this._mesh._positions[0].length / 3;
      if(this._vf.top) {
        for(j = sides - 1; j >= 0; j--) {
          beta = j * delta;
          x = radius * Math.sin(beta);
          z = -radius * Math.cos(beta);
          this._mesh._positions[0].push(x, height / 2, z);
          this._mesh._normals[0].push(0, 1, 0);
          this._mesh._texCoords[0].push(x / radius / 2 + 0.5, -z / radius / 2 + 0.5);
        }
        h = base + 1;
        for(j = 2; j < sides; j++) {
          this._mesh._indices[0].push(base);
          this._mesh._indices[0].push(h);
          h = base + j;
          this._mesh._indices[0].push(h);
        }
        base = this._mesh._positions[0].length / 3;
      }
      if(this._vf.bottom) {
        for(j = sides - 1; j >= 0; j--) {
          beta = j * delta;
          x = radius * Math.sin(beta);
          z = -radius * Math.cos(beta);
          this._mesh._positions[0].push(x, -height / 2, z);
          this._mesh._normals[0].push(0, -1, 0);
          this._mesh._texCoords[0].push(x / radius / 2 + 0.5, z / radius / 2 + 0.5);
        }
        h = base + 1;
        for(j = 2; j < sides; j++) {
          this._mesh._indices[0].push(h);
          this._mesh._indices[0].push(base);
          h = base + j;
          this._mesh._indices[0].push(h);
        }
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = this._mesh._indices[0].length / 3;
    this._mesh._numCoords = this._mesh._positions[0].length / 3;
    x3dom.geoCache[geoCacheID] = this._mesh;
  }
}, {
  fieldChanged: function(fieldName) {
    if(fieldName === "radius" || fieldName === "height") {
      this._mesh._positions[0] = [];
      var radius = this._vf.radius,
        height = this._vf.height;
      var sides = this._vf.subdivision;
      var beta, x, z;
      var delta = 2.0 * Math.PI / sides;
      var j = 0;
      if(this._vf.side) {
        for(j = 0; j <= sides; j++) {
          beta = j * delta;
          x = Math.sin(beta);
          z = -Math.cos(beta);
          this._mesh._positions[0].push(x * radius, -height / 2, z * radius);
          this._mesh._positions[0].push(x * radius, height / 2, z * radius);
        }
      }
      if(radius > 0) {
        var h, base = this._mesh._positions[0].length / 3;
        if(this._vf.top) {
          for(j = sides - 1; j >= 0; j--) {
            beta = j * delta;
            x = radius * Math.sin(beta);
            z = -radius * Math.cos(beta);
            this._mesh._positions[0].push(x, height / 2, z);
          }
        }
      }
      if(this._vf.bottom) {
        for(j = sides - 1; j >= 0; j--) {
          beta = j * delta;
          x = radius * Math.sin(beta);
          z = -radius * Math.cos(beta);
          this._mesh._positions[0].push(x, -height / 2, z);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName === "subdivision" || fieldName === "bottom" || fieldName === "top") {
      this._mesh._positions[0] = [];
      this._mesh._indices[0] = [];
      this._mesh._normals[0] = [];
      this._mesh._texCoords[0] = [];
      var radius = this._vf.radius,
        height = this._vf.height;
      var sides = this._vf.subdivision;
      var beta, x, z;
      var delta = 2.0 * Math.PI / sides;
      var j = 0;
      var k = 0;
      if(this._vf.side) {
        for(j = 0, k = 0; j <= sides; j++) {
          beta = j * delta;
          x = Math.sin(beta);
          z = -Math.cos(beta);
          this._mesh._positions[0].push(x * radius, -height / 2, z * radius);
          this._mesh._normals[0].push(x, 0, z);
          this._mesh._texCoords[0].push(1.0 - j / sides, 0);
          this._mesh._positions[0].push(x * radius, height / 2, z * radius);
          this._mesh._normals[0].push(x, 0, z);
          this._mesh._texCoords[0].push(1.0 - j / sides, 1);
          if(j > 0) {
            this._mesh._indices[0].push(k + 0);
            this._mesh._indices[0].push(k + 1);
            this._mesh._indices[0].push(k + 2);
            this._mesh._indices[0].push(k + 2);
            this._mesh._indices[0].push(k + 1);
            this._mesh._indices[0].push(k + 3);
            k += 2;
          }
        }
      }
      if(radius > 0) {
        var h, base = this._mesh._positions[0].length / 3;
        if(this._vf.top) {
          for(j = sides - 1; j >= 0; j--) {
            beta = j * delta;
            x = radius * Math.sin(beta);
            z = -radius * Math.cos(beta);
            this._mesh._positions[0].push(x, height / 2, z);
            this._mesh._normals[0].push(0, 1, 0);
            this._mesh._texCoords[0].push(x / radius / 2 + 0.5, -z / radius / 2 + 0.5);
          }
          h = base + 1;
          for(j = 2; j < sides; j++) {
            this._mesh._indices[0].push(base);
            this._mesh._indices[0].push(h);
            h = base + j;
            this._mesh._indices[0].push(h);
          }
          base = this._mesh._positions[0].length / 3;
        }
        if(this._vf.bottom) {
          for(j = sides - 1; j >= 0; j--) {
            beta = j * delta;
            x = radius * Math.sin(beta);
            z = -radius * Math.cos(beta);
            this._mesh._positions[0].push(x, -height / 2, z);
            this._mesh._normals[0].push(0, -1, 0);
            this._mesh._texCoords[0].push(x / radius / 2 + 0.5, z / radius / 2 + 0.5);
          }
          h = base + 1;
          for(j = 2; j < sides; j++) {
            this._mesh._indices[0].push(h);
            this._mesh._indices[0].push(base);
            h = base + j;
            this._mesh._indices[0].push(h);
          }
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      Array.forEach(this._parentNodes, function(node) {
        node.setAllDirty();
      });
    }
  }
}));
x3dom.registerNodeType("BinaryGeometry", "Rendering", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.BinaryGeometry.superClass.call(this, ctx);
  this.addField_MFInt32(ctx, 'vertexCount', [0]);
  this.addField_MFString(ctx, 'primType', ['TRIANGLES']);
  this.addField_SFString(ctx, 'index', "");
  this.addField_SFString(ctx, 'coord', "");
  this.addField_SFString(ctx, 'normal', "");
  this.addField_SFString(ctx, 'texCoord', "");
  this.addField_SFString(ctx, 'color', "");
  this._mesh._numTexComponents = 2;
  this._mesh._numColComponents = 3;
  this._mesh._invalidate = false;
  for(var i = 0; i < this._vf.vertexCount.length; i++) {
    this._mesh._numCoords += this._vf.vertexCount[i];
  }
  this._mesh.numFaces = 0;
}, {
  nodeChanged: function() {},
  getMin: function() {
    if(this._parentNodes.length >= 1) {
      var center = this._parentNodes[0]._vf.bboxCenter;
      var size = this._parentNodes[0]._vf.bboxSize;
      if(size.x < 0 || size.y < 0 || size.z < 0) {
        return center;
      }
      return center.subtract(size.multiply(0.5));
    } else {
      return new x3dom.fields.SFVec3f(0, 0, 0);
    }
  },
  getMax: function() {
    if(this._parentNodes.length >= 1) {
      var center = this._parentNodes[0]._vf.bboxCenter;
      var size = this._parentNodes[0]._vf.bboxSize;
      if(size.x < 0 || size.y < 0 || size.z < 0) {
        return center;
      }
      return center.add(size.multiply(0.5));
    } else {
      return new x3dom.fields.SFVec3f(0, 0, 0);
    }
  },
  getVolume: function(min, max, invalidate) {
    min.setValues(this.getMin());
    max.setValues(this.getMax());
    return true;
  },
  getCenter: function() {
    if(this._parentNodes.length >= 1) {
      return this._parentNodes[0]._vf.bboxCenter;
    } else {
      return new x3dom.fields.SFVec3f(0, 0, 0);
    }
  }
}));
x3dom.registerNodeType("ImageGeometry", "Geometry3D", defineClass(x3dom.nodeTypes.X3DGeometryNode, function(ctx) {
  x3dom.nodeTypes.ImageGeometry.superClass.call(this, ctx);
  var coordPrio = -5;
  var normalPrio = -4;
  for(var i = 0; i < ctx.xmlNode.childNodes.length; i++) {
    if('imagetexture' == ctx.xmlNode.childNodes[i].localName) {
      if('coord' == ctx.xmlNode.childNodes[i].getAttribute('containerField')) {
        ctx.xmlNode.childNodes[i].setAttribute('priority', coordPrio);
        coordPrio += 10;
      } else if('normal' == ctx.xmlNode.childNodes[i].getAttribute('containerField')) {
        ctx.xmlNode.childNodes[i].setAttribute('priority', normalPrio);
        normalPrio += 10;
      } else if('texCoord' == ctx.xmlNode.childNodes[i].getAttribute('containerField')) {
        ctx.xmlNode.childNodes[i].setAttribute('priority', '-3');
      } else if('color' == ctx.xmlNode.childNodes[i].getAttribute('containerField')) {
        ctx.xmlNode.childNodes[i].setAttribute('priority', '-2');
      }
    }
  }
  this.addField_SFVec3f(ctx, 'position', 0, 0, 0);
  this.addField_SFVec3f(ctx, 'size', 0, 0, 0);
  this.addField_MFInt32(ctx, 'vertexCount', [0]);
  this.addField_MFString(ctx, 'primType', ['TRIANGLES']);
  this.addField_SFVec2f(ctx, 'implicitMeshSize', 256, 256);
  this.addField_SFInt32(ctx, 'numColorComponents', 3);
  this.addField_SFNode('index', x3dom.nodeTypes.X3DTextureNode);
  this.addField_MFNode('coord', x3dom.nodeTypes.X3DTextureNode);
  this.addField_MFNode('normal', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('texCoord', x3dom.nodeTypes.X3DTextureNode);
  this.addField_SFNode('color', x3dom.nodeTypes.X3DTextureNode);
  this._mesh._numColComponents = this._vf.numColorComponents;
  if(this._vf.implicitMeshSize.y == 0) this._vf.implicitMeshSize.y = this._vf.implicitMeshSize.x;
  if(x3dom.caps.BACKEND == 'webgl' && x3dom.caps.MAX_VERTEX_TEXTURE_IMAGE_UNITS > 0) {
    var geoCacheID = 'ImageGeometry';
    if(x3dom.geoCache[geoCacheID] != undefined) {
      x3dom.debug.logInfo("Using ImageGeometry-Mesh from Cache");
      this._mesh = x3dom.geoCache[geoCacheID];
    } else {
      for(var y = 0; y < this._vf.implicitMeshSize.y; y++) {
        for(var x = 0; x < this._vf.implicitMeshSize.x; x++) {
          this._mesh._positions[0].push(x / this._vf.implicitMeshSize.x, y / this._vf.implicitMeshSize.y, 0);
        }
      }
      this._mesh._invalidate = true;
      this._mesh._numFaces = this._mesh._indices[0].length / 3;
      this._mesh._numCoords = this._mesh._positions[0].length / 3;
      x3dom.geoCache[geoCacheID] = this._mesh;
    }
  }
}, {
  nodeChanged: function() {
    Array.forEach(this._parentNodes, function(node) {
      node._dirty.positions = true;
      node._dirty.normals = true;
      node._dirty.texcoords = true;
    });
  },
  getMin: function() {
    return this._vf.position.subtract(this._vf.size.multiply(0.5));
  },
  getMax: function() {
    return this._vf.position.add(this._vf.size.multiply(0.5));
  },
  getVolume: function(min, max, invalidate) {
    min.setValues(this.getMin());
    max.setValues(this.getMax());
    return true;
  },
  getCenter: function() {
    return this._vf.position;
  },
  numCoordinateTextures: function() {
    return this._cf.coord.nodes.length;
  },
  getIndexTexture: function() {
    if(this._cf.index.node) {
      return this._cf.index.node;
    } else {
      return null;
    }
  },
  getIndexTextureURL: function() {
    if(this._cf.index.node) {
      return this._cf.index.node._vf.url;
    } else {
      return null;
    }
  },
  getCoordinateTexture: function(pos) {
    if(this._cf.coord.nodes[pos]) {
      return this._cf.coord.nodes[pos];
    } else {
      return null;
    }
  },
  getCoordinateTextureURL: function(pos) {
    if(this._cf.coord.nodes[pos]) {
      return this._cf.coord.nodes[pos]._vf.url;
    } else {
      return null;
    }
  },
  getNormalTexture: function(pos) {
    if(this._cf.normal.nodes[pos]) {
      return this._cf.normal.nodes[pos];
    } else {
      return null;
    }
  },
  getNormalTextureURL: function(pos) {
    if(this._cf.normal.nodes[pos]) {
      return this._cf.normal.nodes[pos]._vf.url;
    } else {
      return null;
    }
  },
  getTexCoordTexture: function() {
    if(this._cf.texCoord.node) {
      return this._cf.texCoord.node;
    } else {
      return null;
    }
  },
  getTexCoordTextureURL: function() {
    if(this._cf.texCoord.node) {
      return this._cf.texCoord.node._vf.url;
    } else {
      return null;
    }
  },
  getColorTexture: function() {
    if(this._cf.color.node) {
      return this._cf.color.node;
    } else {
      return null;
    }
  },
  getColorTextureURL: function() {
    if(this._cf.color.node) {
      return this._cf.color.node._vf.url;
    } else {
      return null;
    }
  }
}));
x3dom.registerNodeType("IndexedFaceSet", "Geometry3D", defineClass(x3dom.nodeTypes.X3DComposedGeometryNode, function(ctx) {
  x3dom.nodeTypes.IndexedFaceSet.superClass.call(this, ctx);
  this.addField_SFFloat(ctx, 'creaseAngle', 0);
  this.addField_MFInt32(ctx, 'coordIndex', []);
  this.addField_MFInt32(ctx, 'normalIndex', []);
  this.addField_MFInt32(ctx, 'colorIndex', []);
  this.addField_MFInt32(ctx, 'texCoordIndex', []);
  this.addField_SFBool(ctx, 'convex', true);
}, {
  nodeChanged: function() {
    var time0 = new Date().getTime();
    this.handleAttribs();
    var indexes = this._vf.coordIndex;
    var normalInd = this._vf.normalIndex;
    var texCoordInd = this._vf.texCoordIndex;
    var colorInd = this._vf.colorIndex;
    var hasNormal = false,
      hasNormalInd = false;
    var hasTexCoord = false,
      hasTexCoordInd = false;
    var hasColor = false,
      hasColorInd = false;
    var colPerVert = this._vf.colorPerVertex;
    var normPerVert = this._vf.normalPerVertex;
    if(normalInd.length > 0) {
      hasNormalInd = true;
    }
    if(texCoordInd.length > 0) {
      hasTexCoordInd = true;
    }
    if(colorInd.length > 0) {
      hasColorInd = true;
    }
    var positions, normals, texCoords, colors;
    var coordNode = this._cf.coord.node;
    x3dom.debug.assert(coordNode);
    positions = coordNode.getPoints();
    var normalNode = this._cf.normal.node;
    if(normalNode) {
      hasNormal = true;
      normals = normalNode._vf.vector;
    } else {
      hasNormal = false;
    }
    var texMode = "",
      numTexComponents = 2;
    var texCoordNode = this._cf.texCoord.node;
    if(texCoordNode) {
      if(texCoordNode._vf.point) {
        hasTexCoord = true;
        texCoords = texCoordNode._vf.point;
        if(x3dom.isa(texCoordNode, x3dom.nodeTypes.TextureCoordinate3D)) {
          numTexComponents = 3;
        }
      } else if(texCoordNode._vf.mode) {
        texMode = texCoordNode._vf.mode;
      }
    } else {
      hasTexCoord = false;
    }
    this._mesh._numTexComponents = numTexComponents;
    var numColComponents = 3;
    var colorNode = this._cf.color.node;
    if(colorNode) {
      hasColor = true;
      colors = colorNode._vf.color;
      if(x3dom.isa(colorNode, x3dom.nodeTypes.ColorRGBA)) {
        numColComponents = 4;
      }
    } else {
      hasColor = false;
    }
    this._mesh._numColComponents = numColComponents;
    this._mesh._indices[0] = [];
    this._mesh._positions[0] = [];
    this._mesh._normals[0] = [];
    this._mesh._texCoords[0] = [];
    this._mesh._colors[0] = [];
    var i, t, cnt, faceCnt;
    var p0, p1, p2, n0, n1, n2, t0, t1, t2, c0, c1, c2;
    if((this._vf.creaseAngle <= x3dom.fields.Eps) || (positions.length / 3 > 65535) || (hasNormal && hasNormalInd) || (hasTexCoord && hasTexCoordInd) || (hasColor && hasColorInd)) {
      if(this._vf.convex) {
        t = 0;
        cnt = 0;
        faceCnt = 0;
        this._mesh._multiIndIndices = [];
        this._mesh._posSize = positions.length;
        for(i = 0; i < indexes.length; ++i) {
          if(indexes[i] == -1) {
            t = 0;
            faceCnt++;
            continue;
          }
          if(hasNormalInd) {
            x3dom.debug.assert(normalInd[i] != -1);
          }
          if(hasTexCoordInd) {
            x3dom.debug.assert(texCoordInd[i] != -1);
          }
          if(hasColorInd) {
            x3dom.debug.assert(colorInd[i] != -1);
          }
          switch(t) {
          case 0:
            p0 = +indexes[i];
            if(hasNormalInd && normPerVert) {
              n0 = +normalInd[i];
            } else if(hasNormalInd && !normPerVert) {
              n0 = +normalInd[faceCnt];
            } else {
              n0 = p0;
            }
            if(hasTexCoordInd) {
              t0 = +texCoordInd[i];
            } else {
              t0 = p0;
            }
            if(hasColorInd && colPerVert) {
              c0 = +colorInd[i];
            } else if(hasColorInd && !colPerVert) {
              c0 = +colorInd[faceCnt];
            } else {
              c0 = p0;
            }
            t = 1;
            break;
          case 1:
            p1 = +indexes[i];
            if(hasNormalInd && normPerVert) {
              n1 = +normalInd[i];
            } else if(hasNormalInd && !normPerVert) {
              n1 = +normalInd[faceCnt];
            } else {
              n1 = p1;
            }
            if(hasTexCoordInd) {
              t1 = +texCoordInd[i];
            } else {
              t1 = p1;
            }
            if(hasColorInd && colPerVert) {
              c1 = +colorInd[i];
            } else if(hasColorInd && !colPerVert) {
              c1 = +colorInd[faceCnt];
            } else {
              c1 = p1;
            }
            t = 2;
            break;
          case 2:
            p2 = +indexes[i];
            if(hasNormalInd && normPerVert) {
              n2 = +normalInd[i];
            } else if(hasNormalInd && !normPerVert) {
              n2 = +normalInd[faceCnt];
            } else {
              n2 = p2;
            }
            if(hasTexCoordInd) {
              t2 = +texCoordInd[i];
            } else {
              t2 = p2;
            }
            if(hasColorInd && colPerVert) {
              c2 = +colorInd[i];
            } else if(hasColorInd && !colPerVert) {
              c2 = +colorInd[faceCnt];
            } else {
              c2 = p2;
            }
            t = 3;
            this._mesh._indices[0].push(cnt++, cnt++, cnt++);
            this._mesh._positions[0].push(positions[p0].x);
            this._mesh._positions[0].push(positions[p0].y);
            this._mesh._positions[0].push(positions[p0].z);
            this._mesh._positions[0].push(positions[p1].x);
            this._mesh._positions[0].push(positions[p1].y);
            this._mesh._positions[0].push(positions[p1].z);
            this._mesh._positions[0].push(positions[p2].x);
            this._mesh._positions[0].push(positions[p2].y);
            this._mesh._positions[0].push(positions[p2].z);
            if(hasNormal) {
              this._mesh._normals[0].push(normals[n0].x);
              this._mesh._normals[0].push(normals[n0].y);
              this._mesh._normals[0].push(normals[n0].z);
              this._mesh._normals[0].push(normals[n1].x);
              this._mesh._normals[0].push(normals[n1].y);
              this._mesh._normals[0].push(normals[n1].z);
              this._mesh._normals[0].push(normals[n2].x);
              this._mesh._normals[0].push(normals[n2].y);
              this._mesh._normals[0].push(normals[n2].z);
            } else {
              this._mesh._multiIndIndices.push(p0, p1, p2);
            }
            if(hasColor) {
              this._mesh._colors[0].push(colors[c0].r);
              this._mesh._colors[0].push(colors[c0].g);
              this._mesh._colors[0].push(colors[c0].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c0].a);
              }
              this._mesh._colors[0].push(colors[c1].r);
              this._mesh._colors[0].push(colors[c1].g);
              this._mesh._colors[0].push(colors[c1].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c1].a);
              }
              this._mesh._colors[0].push(colors[c2].r);
              this._mesh._colors[0].push(colors[c2].g);
              this._mesh._colors[0].push(colors[c2].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c2].a);
              }
            }
            if(hasTexCoord) {
              this._mesh._texCoords[0].push(texCoords[t0].x);
              this._mesh._texCoords[0].push(texCoords[t0].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t0].z);
              }
              this._mesh._texCoords[0].push(texCoords[t1].x);
              this._mesh._texCoords[0].push(texCoords[t1].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t1].z);
              }
              this._mesh._texCoords[0].push(texCoords[t2].x);
              this._mesh._texCoords[0].push(texCoords[t2].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t2].z);
              }
            }
            break;
          case 3:
            p1 = p2;
            t1 = t2;
            if(normPerVert) {
              n1 = n2;
            }
            if(colPerVert) {
              c1 = c2;
            }
            p2 = +indexes[i];
            if(hasNormalInd && normPerVert) {
              n2 = +normalInd[i];
            } else if(hasNormalInd && !normPerVert) {} else {
              n2 = p2;
            }
            if(hasTexCoordInd) {
              t2 = +texCoordInd[i];
            } else {
              t2 = p2;
            }
            if(hasColorInd && colPerVert) {
              c2 = +colorInd[i];
            } else if(hasColorInd && !colPerVert) {} else {
              c2 = p2;
            }
            this._mesh._indices[0].push(cnt++, cnt++, cnt++);
            this._mesh._positions[0].push(positions[p0].x);
            this._mesh._positions[0].push(positions[p0].y);
            this._mesh._positions[0].push(positions[p0].z);
            this._mesh._positions[0].push(positions[p1].x);
            this._mesh._positions[0].push(positions[p1].y);
            this._mesh._positions[0].push(positions[p1].z);
            this._mesh._positions[0].push(positions[p2].x);
            this._mesh._positions[0].push(positions[p2].y);
            this._mesh._positions[0].push(positions[p2].z);
            if(hasNormal) {
              this._mesh._normals[0].push(normals[n0].x);
              this._mesh._normals[0].push(normals[n0].y);
              this._mesh._normals[0].push(normals[n0].z);
              this._mesh._normals[0].push(normals[n1].x);
              this._mesh._normals[0].push(normals[n1].y);
              this._mesh._normals[0].push(normals[n1].z);
              this._mesh._normals[0].push(normals[n2].x);
              this._mesh._normals[0].push(normals[n2].y);
              this._mesh._normals[0].push(normals[n2].z);
            } else {
              this._mesh._multiIndIndices.push(p0, p1, p2);
            }
            if(hasColor) {
              this._mesh._colors[0].push(colors[c0].r);
              this._mesh._colors[0].push(colors[c0].g);
              this._mesh._colors[0].push(colors[c0].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c0].a);
              }
              this._mesh._colors[0].push(colors[c1].r);
              this._mesh._colors[0].push(colors[c1].g);
              this._mesh._colors[0].push(colors[c1].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c1].a);
              }
              this._mesh._colors[0].push(colors[c2].r);
              this._mesh._colors[0].push(colors[c2].g);
              this._mesh._colors[0].push(colors[c2].b);
              if(numColComponents === 4) {
                this._mesh._colors[0].push(colors[c2].a);
              }
            }
            if(hasTexCoord) {
              this._mesh._texCoords[0].push(texCoords[t0].x);
              this._mesh._texCoords[0].push(texCoords[t0].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t0].z);
              }
              this._mesh._texCoords[0].push(texCoords[t1].x);
              this._mesh._texCoords[0].push(texCoords[t1].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t1].z);
              }
              this._mesh._texCoords[0].push(texCoords[t2].x);
              this._mesh._texCoords[0].push(texCoords[t2].y);
              if(numTexComponents === 3) {
                this._mesh._texCoords[0].push(texCoords[t2].z);
              }
            }
            break;
          default:
          }
        }
      } else {
        var linklist = new x3dom.DoublyLinkedList();
        var data = new Object();
        cnt = 0, faceCnt = 0;
        for(var i = 0; i < indexes.length; ++i) {
          if(indexes[i] == -1) {
            var multi_index_data = x3dom.EarClipping.getMultiIndexes(linklist);
            for(var j = 0; j < multi_index_data.indices.length; j++) {
              this._mesh._indices[0].push(cnt);
              cnt++;
              this._mesh._positions[0].push(multi_index_data.point[j].x, multi_index_data.point[j].y, multi_index_data.point[j].z);
              if(hasNormal) {
                this._mesh._normals[0].push(multi_index_data.normals[j].x, multi_index_data.normals[j].y, multi_index_data.normals[j].z);
              }
              if(hasColor) {
                this._mesh._colors[0].push(multi_index_data.colors[j].r, multi_index_data.colors[j].g, multi_index_data.colors[j].b);
                if(numColComponents === 4) {
                  this._mesh._colors[0].push(multi_index_data.colors[j].a);
                }
              }
              if(hasTexCoord) {
                this._mesh._texCoords[0].push(multi_index_data.texCoords[j].x, multi_index_data.texCoords[j].y);
                if(numTexComponents === 3) {
                  this._mesh._texCoords[0].push(multi_index_data.texCoords[j].z);
                }
              }
            }
            linklist = new x3dom.DoublyLinkedList();
            faceCnt++;
            continue;
          }
          if(hasNormal) {
            if(hasNormalInd && normPerVert) {
              data.normals = normals[normalInd[i]];
            } else if(hasNormalInd && !normPerVert) {
              data.normals = normals[normalInd[faceCnt]];
            } else {
              data.normals = normals[indexes[i]];
            }
          }
          if(hasColor) {
            if(hasColorInd && colPerVert) {
              data.colors = colors[colorInd[i]];
            } else if(hasColorInd && !colPerVert) {
              data.colors = colors[colorInd[faceCnt]];
            } else {
              data.colors = colors[indexes[i]];
            }
          }
          if(hasTexCoord) {
            if(hasTexCoordInd) {
              data.texCoords = texCoords[texCoordInd[i]];
            } else {
              data.texCoords = texCoords[indexes[i]];
            }
          }
          linklist.appendNode(new x3dom.DoublyLinkedList.ListNode(positions[indexes[i]], indexes[i], data.normals, data.colors, data.texCoords));
        }
      }
      if(!hasNormal) {
        this._mesh.calcNormals(this._vf.creaseAngle);
      }
      if(!hasTexCoord) {
        this._mesh.calcTexCoords(texMode);
      }
      this._mesh.splitMesh();
    } else {
      t = 0;
      if(this._vf.convex) {
        for(i = 0; i < indexes.length; ++i) {
          if(indexes[i] == -1) {
            t = 0;
            continue;
          }
          switch(t) {
          case 0:
            n0 = +indexes[i];
            t = 1;
            break;
          case 1:
            n1 = +indexes[i];
            t = 2;
            break;
          case 2:
            n2 = +indexes[i];
            t = 3;
            this._mesh._indices[0].push(n0, n1, n2);
            break;
          case 3:
            n1 = n2;
            n2 = +indexes[i];
            this._mesh._indices[0].push(n0, n1, n2);
            break;
          }
        }
      } else {
        var linklist = new x3dom.DoublyLinkedList();
        for(var i = 0; i < indexes.length; ++i) {
          if(indexes[i] == -1) {
            var linklist_indces = x3dom.EarClipping.getIndexes(linklist);
            for(var j = 0; j < linklist_indces.length; j++) {
              this._mesh._indices[0].push(linklist_indces[j]);
            }
            linklist = new x3dom.DoublyLinkedList();
            continue;
          }
          linklist.appendNode(new x3dom.DoublyLinkedList.ListNode(positions[indexes[i]], indexes[i]));
        }
      }
      this._mesh._positions[0] = positions.toGL();
      if(hasNormal) {
        this._mesh._normals[0] = normals.toGL();
      } else {
        this._mesh.calcNormals(this._vf.creaseAngle);
      }
      if(hasTexCoord) {
        this._mesh._texCoords[0] = texCoords.toGL();
        this._mesh._numTexComponents = numTexComponents;
      } else {
        this._mesh.calcTexCoords(texMode);
      }
      if(hasColor) {
        this._mesh._colors[0] = colors.toGL();
        this._mesh._numColComponents = numColComponents;
      }
    }
    this._mesh._invalidate = true;
    this._mesh._numFaces = 0;
    this._mesh._numCoords = 0;
    for(i = 0; i < this._mesh._indices.length; i++) {
      this._mesh._numFaces += this._mesh._indices[i].length / 3;
      this._mesh._numCoords += this._mesh._positions[i].length / 3;
    }
    var time1 = new Date().getTime() - time0;
  },
  fieldChanged: function(fieldName) {
    if(fieldName != "coord" && fieldName != "normal" && fieldName != "texCoord" && fieldName != "color") {
      x3dom.debug.logWarning("IndexedFaceSet: fieldChanged for " + fieldName + " not yet implemented!");
      return;
    }
    var pnts = this._cf.coord.node._vf.point;
    var n = pnts.length;
    if((this._vf.creaseAngle <= x3dom.fields.Eps) || (n > 65535) || (this._vf.normalIndex.length > 0 && this._cf.normal.node) || (this._vf.texCoordIndex.length > 0 && this._cf.texCoord.node) || (this._vf.colorIndex.length > 0 && this._cf.color.node)) {
      x3dom.debug.logWarning("IndexedFaceSet: fieldChanged with creaseAngle == 0, " + "with too many coordinates or multi-index mesh is SLOW!");
      this.nodeChanged();
      Array.forEach(this._parentNodes, function(node) {
        if(fieldName == "coord") node._dirty.positions = true;
        if(fieldName == "normal") node._dirty.normals = true;
        if(fieldName == "texCoord") node._dirty.texcoords = true;
        if(fieldName == "color") node._dirty.colors = true;
      });
      return;
    }
    if(fieldName == "coord") {
      this._mesh._positions[0] = pnts.toGL();
      this._mesh._invalidate = true;
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.positions = true;
      });
    } else if(fieldName == "color") {
      pnts = this._cf.color.node._vf.color;
      this._mesh._colors[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.colors = true;
      });
    } else if(fieldName == "normal") {
      pnts = this._cf.normal.node._vf.vector;
      this._mesh._normals[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.normals = true;
      });
    } else if(fieldName == "texCoord") {
      pnts = this._cf.texCoord.node._vf.point;
      this._mesh._texCoords[0] = pnts.toGL();
      Array.forEach(this._parentNodes, function(node) {
        node._dirty.texcoords = true;
      });
    }
  }
}));
x3dom.versionInfo = {
  version: '1.3.1-dev',
  revision: 'e982de5361bb1715e9897b912cdffe045d845b14',
  date: 'Mon Apr 2 18:30:42 2012 +0200'
};
;

